// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_remoteclient_service.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_GetPairingInfo_Request {
    // message fields
    pin: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Request {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Request {
        <CRemoteClient_GetPairingInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Request {
    pub fn new() -> CRemoteClient_GetPairingInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 pin = 1;

    pub fn get_pin(&self) -> u32 {
        self.pin.unwrap_or(0)
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: u32) {
        self.pin = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_GetPairingInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pin = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.pin {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.pin {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_GetPairingInfo_Request {
        CRemoteClient_GetPairingInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "pin",
                |m: &CRemoteClient_GetPairingInfo_Request| { &m.pin },
                |m: &mut CRemoteClient_GetPairingInfo_Request| { &mut m.pin },
                CRemoteClient_GetPairingInfo_Request::get_pin,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_GetPairingInfo_Request>(
                "CRemoteClient_GetPairingInfo_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Request {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_GetPairingInfo_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_GetPairingInfo_Request::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_GetPairingInfo_Request {
    fn clear(&mut self) {
        self.pin = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_GetPairingInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_GetPairingInfo_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_GetPairingInfo_Response {
    // message fields
    session_id: ::std::option::Option<u64>,
    device_id: ::std::option::Option<u64>,
    request: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Response {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Response {
        <CRemoteClient_GetPairingInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Response {
    pub fn new() -> CRemoteClient_GetPairingInfo_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 2;

    pub fn get_device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    // optional bytes request = 3;

    pub fn get_request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::std::vec::Vec<u8>) {
        self.request = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::std::vec::Vec<u8> {
        self.request.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_GetPairingInfo_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.request)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 9;
        }
        if let Some(v) = self.device_id {
            my_size += 9;
        }
        if let Some(v) = self.request.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_GetPairingInfo_Response {
        CRemoteClient_GetPairingInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "session_id",
                |m: &CRemoteClient_GetPairingInfo_Response| { &m.session_id },
                |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.session_id },
                CRemoteClient_GetPairingInfo_Response::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "device_id",
                |m: &CRemoteClient_GetPairingInfo_Response| { &m.device_id },
                |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.device_id },
                CRemoteClient_GetPairingInfo_Response::get_device_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "request",
                |m: &CRemoteClient_GetPairingInfo_Response| { &m.request },
                |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.request },
                CRemoteClient_GetPairingInfo_Response::get_request,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_GetPairingInfo_Response>(
                "CRemoteClient_GetPairingInfo_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Response {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_GetPairingInfo_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_GetPairingInfo_Response::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_GetPairingInfo_Response {
    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.request.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_GetPairingInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_GetPairingInfo_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_Online_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_Online_Notification {
    fn default() -> &'a CRemoteClient_Online_Notification {
        <CRemoteClient_Online_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_Online_Notification {
    pub fn new() -> CRemoteClient_Online_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_Online_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_Online_Notification {
        CRemoteClient_Online_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_Online_Notification| { &m.steamid },
                |m: &mut CRemoteClient_Online_Notification| { &mut m.steamid },
                CRemoteClient_Online_Notification::get_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_Online_Notification>(
                "CRemoteClient_Online_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_Online_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_Online_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_Online_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_Online_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_Online_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_Online_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_ReplyPacket_Notification {
    // message fields
    session_id: ::std::option::Option<u64>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_ReplyPacket_Notification {
    fn default() -> &'a CRemoteClient_ReplyPacket_Notification {
        <CRemoteClient_ReplyPacket_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_ReplyPacket_Notification {
    pub fn new() -> CRemoteClient_ReplyPacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 2;

    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_ReplyPacket_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 9;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_ReplyPacket_Notification {
        CRemoteClient_ReplyPacket_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "session_id",
                |m: &CRemoteClient_ReplyPacket_Notification| { &m.session_id },
                |m: &mut CRemoteClient_ReplyPacket_Notification| { &mut m.session_id },
                CRemoteClient_ReplyPacket_Notification::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "payload",
                |m: &CRemoteClient_ReplyPacket_Notification| { &m.payload },
                |m: &mut CRemoteClient_ReplyPacket_Notification| { &mut m.payload },
                CRemoteClient_ReplyPacket_Notification::get_payload,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_ReplyPacket_Notification>(
                "CRemoteClient_ReplyPacket_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_ReplyPacket_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_ReplyPacket_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_ReplyPacket_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_ReplyPacket_Notification {
    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_ReplyPacket_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_ReplyPacket_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateTURNServer_Request {
    // message fields
    cellid: ::std::option::Option<u32>,
    credentials: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateTURNServer_Request {
    fn default() -> &'a CRemoteClient_AllocateTURNServer_Request {
        <CRemoteClient_AllocateTURNServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateTURNServer_Request {
    pub fn new() -> CRemoteClient_AllocateTURNServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional string credentials = 2;

    pub fn get_credentials(&self) -> &str {
        match self.credentials.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_credentials(&mut self) {
        self.credentials.clear();
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::std::string::String) {
        self.credentials = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut ::std::string::String {
        if self.credentials.is_none() {
            self.credentials.set_default();
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::std::string::String {
        self.credentials.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateTURNServer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.credentials)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.credentials.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.credentials.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateTURNServer_Request {
        CRemoteClient_AllocateTURNServer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "cellid",
                |m: &CRemoteClient_AllocateTURNServer_Request| { &m.cellid },
                |m: &mut CRemoteClient_AllocateTURNServer_Request| { &mut m.cellid },
                CRemoteClient_AllocateTURNServer_Request::get_cellid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "credentials",
                |m: &CRemoteClient_AllocateTURNServer_Request| { &m.credentials },
                |m: &mut CRemoteClient_AllocateTURNServer_Request| { &mut m.credentials },
                CRemoteClient_AllocateTURNServer_Request::get_credentials,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateTURNServer_Request>(
                "CRemoteClient_AllocateTURNServer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateTURNServer_Request {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateTURNServer_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateTURNServer_Request::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateTURNServer_Request {
    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.credentials.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateTURNServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateTURNServer_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateTURNServer_Response {
    // message fields
    turn_server: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateTURNServer_Response {
    fn default() -> &'a CRemoteClient_AllocateTURNServer_Response {
        <CRemoteClient_AllocateTURNServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateTURNServer_Response {
    pub fn new() -> CRemoteClient_AllocateTURNServer_Response {
        ::std::default::Default::default()
    }

    // optional string turn_server = 1;

    pub fn get_turn_server(&self) -> &str {
        match self.turn_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_turn_server(&mut self) {
        self.turn_server.clear();
    }

    pub fn has_turn_server(&self) -> bool {
        self.turn_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_turn_server(&mut self, v: ::std::string::String) {
        self.turn_server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_turn_server(&mut self) -> &mut ::std::string::String {
        if self.turn_server.is_none() {
            self.turn_server.set_default();
        }
        self.turn_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_turn_server(&mut self) -> ::std::string::String {
        self.turn_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateTURNServer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.turn_server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.turn_server.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.turn_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateTURNServer_Response {
        CRemoteClient_AllocateTURNServer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "turn_server",
                |m: &CRemoteClient_AllocateTURNServer_Response| { &m.turn_server },
                |m: &mut CRemoteClient_AllocateTURNServer_Response| { &mut m.turn_server },
                CRemoteClient_AllocateTURNServer_Response::get_turn_server,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateTURNServer_Response>(
                "CRemoteClient_AllocateTURNServer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateTURNServer_Response {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateTURNServer_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateTURNServer_Response::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateTURNServer_Response {
    fn clear(&mut self) {
        self.turn_server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateTURNServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateTURNServer_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateRelayServer_Request {
    // message fields
    cellid: ::std::option::Option<u32>,
    credentials: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Request {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Request {
        <CRemoteClient_AllocateRelayServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Request {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional string credentials = 2;

    pub fn get_credentials(&self) -> &str {
        match self.credentials.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_credentials(&mut self) {
        self.credentials.clear();
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::std::string::String) {
        self.credentials = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut ::std::string::String {
        if self.credentials.is_none() {
            self.credentials.set_default();
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::std::string::String {
        self.credentials.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateRelayServer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.credentials)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.credentials.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.credentials.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Request {
        CRemoteClient_AllocateRelayServer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "cellid",
                |m: &CRemoteClient_AllocateRelayServer_Request| { &m.cellid },
                |m: &mut CRemoteClient_AllocateRelayServer_Request| { &mut m.cellid },
                CRemoteClient_AllocateRelayServer_Request::get_cellid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "credentials",
                |m: &CRemoteClient_AllocateRelayServer_Request| { &m.credentials },
                |m: &mut CRemoteClient_AllocateRelayServer_Request| { &mut m.credentials },
                CRemoteClient_AllocateRelayServer_Request::get_credentials,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateRelayServer_Request>(
                "CRemoteClient_AllocateRelayServer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Request {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateRelayServer_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateRelayServer_Request::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateRelayServer_Request {
    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.credentials.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateRelayServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateRelayServer_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateRelayServer_Response {
    // message fields
    relay_server: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Response {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Response {
        <CRemoteClient_AllocateRelayServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Response {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Response {
        ::std::default::Default::default()
    }

    // optional string relay_server = 1;

    pub fn get_relay_server(&self) -> &str {
        match self.relay_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_relay_server(&mut self) {
        self.relay_server.clear();
    }

    pub fn has_relay_server(&self) -> bool {
        self.relay_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_server(&mut self, v: ::std::string::String) {
        self.relay_server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relay_server(&mut self) -> &mut ::std::string::String {
        if self.relay_server.is_none() {
            self.relay_server.set_default();
        }
        self.relay_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_relay_server(&mut self) -> ::std::string::String {
        self.relay_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateRelayServer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.relay_server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.relay_server.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.relay_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Response {
        CRemoteClient_AllocateRelayServer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "relay_server",
                |m: &CRemoteClient_AllocateRelayServer_Response| { &m.relay_server },
                |m: &mut CRemoteClient_AllocateRelayServer_Response| { &mut m.relay_server },
                CRemoteClient_AllocateRelayServer_Response::get_relay_server,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateRelayServer_Response>(
                "CRemoteClient_AllocateRelayServer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Response {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateRelayServer_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateRelayServer_Response::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateRelayServer_Response {
    fn clear(&mut self) {
        self.relay_server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateRelayServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateRelayServer_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateSDR_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Request {
    fn default() -> &'a CRemoteClient_AllocateSDR_Request {
        <CRemoteClient_AllocateSDR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Request {
    pub fn new() -> CRemoteClient_AllocateSDR_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateSDR_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateSDR_Request {
        CRemoteClient_AllocateSDR_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "appid",
                |m: &CRemoteClient_AllocateSDR_Request| { &m.appid },
                |m: &mut CRemoteClient_AllocateSDR_Request| { &mut m.appid },
                CRemoteClient_AllocateSDR_Request::get_appid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateSDR_Request>(
                "CRemoteClient_AllocateSDR_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Request {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateSDR_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateSDR_Request::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateSDR_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateSDR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateSDR_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_AllocateSDR_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Response {
    fn default() -> &'a CRemoteClient_AllocateSDR_Response {
        <CRemoteClient_AllocateSDR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Response {
    pub fn new() -> CRemoteClient_AllocateSDR_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateSDR_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_AllocateSDR_Response {
        CRemoteClient_AllocateSDR_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_AllocateSDR_Response>(
                "CRemoteClient_AllocateSDR_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Response {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_AllocateSDR_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_AllocateSDR_Response::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_AllocateSDR_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_AllocateSDR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_AllocateSDR_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_SteamBroadcast_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    clientid: ::std::option::Option<u64>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamBroadcast_Notification {
    fn default() -> &'a CRemoteClient_SteamBroadcast_Notification {
        <CRemoteClient_SteamBroadcast_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SteamBroadcast_Notification {
    pub fn new() -> CRemoteClient_SteamBroadcast_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 clientid = 2;

    pub fn get_clientid(&self) -> u64 {
        self.clientid.unwrap_or(0)
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: u64) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 3;

    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_SteamBroadcast_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.clientid {
            my_size += 9;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_SteamBroadcast_Notification {
        CRemoteClient_SteamBroadcast_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_SteamBroadcast_Notification| { &m.steamid },
                |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.steamid },
                CRemoteClient_SteamBroadcast_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "clientid",
                |m: &CRemoteClient_SteamBroadcast_Notification| { &m.clientid },
                |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.clientid },
                CRemoteClient_SteamBroadcast_Notification::get_clientid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "payload",
                |m: &CRemoteClient_SteamBroadcast_Notification| { &m.payload },
                |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.payload },
                CRemoteClient_SteamBroadcast_Notification::get_payload,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_SteamBroadcast_Notification>(
                "CRemoteClient_SteamBroadcast_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_SteamBroadcast_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_SteamBroadcast_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_SteamBroadcast_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_SteamBroadcast_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.clientid = ::std::option::Option::None;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_SteamBroadcast_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_SteamBroadcast_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_SteamToSteam_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    src_clientid: ::std::option::Option<u64>,
    dst_clientid: ::std::option::Option<u64>,
    secretid: ::std::option::Option<u32>,
    encrypted_payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamToSteam_Notification {
    fn default() -> &'a CRemoteClient_SteamToSteam_Notification {
        <CRemoteClient_SteamToSteam_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SteamToSteam_Notification {
    pub fn new() -> CRemoteClient_SteamToSteam_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 src_clientid = 2;

    pub fn get_src_clientid(&self) -> u64 {
        self.src_clientid.unwrap_or(0)
    }

    pub fn clear_src_clientid(&mut self) {
        self.src_clientid = ::std::option::Option::None;
    }

    pub fn has_src_clientid(&self) -> bool {
        self.src_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src_clientid(&mut self, v: u64) {
        self.src_clientid = ::std::option::Option::Some(v);
    }

    // optional fixed64 dst_clientid = 3;

    pub fn get_dst_clientid(&self) -> u64 {
        self.dst_clientid.unwrap_or(0)
    }

    pub fn clear_dst_clientid(&mut self) {
        self.dst_clientid = ::std::option::Option::None;
    }

    pub fn has_dst_clientid(&self) -> bool {
        self.dst_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dst_clientid(&mut self, v: u64) {
        self.dst_clientid = ::std::option::Option::Some(v);
    }

    // optional uint32 secretid = 4;

    pub fn get_secretid(&self) -> u32 {
        self.secretid.unwrap_or(0)
    }

    pub fn clear_secretid(&mut self) {
        self.secretid = ::std::option::Option::None;
    }

    pub fn has_secretid(&self) -> bool {
        self.secretid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secretid(&mut self, v: u32) {
        self.secretid = ::std::option::Option::Some(v);
    }

    // optional bytes encrypted_payload = 5;

    pub fn get_encrypted_payload(&self) -> &[u8] {
        match self.encrypted_payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_payload(&mut self) {
        self.encrypted_payload.clear();
    }

    pub fn has_encrypted_payload(&self) -> bool {
        self.encrypted_payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_payload.is_none() {
            self.encrypted_payload.set_default();
        }
        self.encrypted_payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_SteamToSteam_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.src_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.dst_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.secretid = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encrypted_payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.src_clientid {
            my_size += 9;
        }
        if let Some(v) = self.dst_clientid {
            my_size += 9;
        }
        if let Some(v) = self.secretid {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.src_clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.dst_clientid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.secretid {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            os.write_bytes(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_SteamToSteam_Notification {
        CRemoteClient_SteamToSteam_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_SteamToSteam_Notification| { &m.steamid },
                |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.steamid },
                CRemoteClient_SteamToSteam_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "src_clientid",
                |m: &CRemoteClient_SteamToSteam_Notification| { &m.src_clientid },
                |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.src_clientid },
                CRemoteClient_SteamToSteam_Notification::get_src_clientid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "dst_clientid",
                |m: &CRemoteClient_SteamToSteam_Notification| { &m.dst_clientid },
                |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.dst_clientid },
                CRemoteClient_SteamToSteam_Notification::get_dst_clientid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "secretid",
                |m: &CRemoteClient_SteamToSteam_Notification| { &m.secretid },
                |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.secretid },
                CRemoteClient_SteamToSteam_Notification::get_secretid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "encrypted_payload",
                |m: &CRemoteClient_SteamToSteam_Notification| { &m.encrypted_payload },
                |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.encrypted_payload },
                CRemoteClient_SteamToSteam_Notification::get_encrypted_payload,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_SteamToSteam_Notification>(
                "CRemoteClient_SteamToSteam_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_SteamToSteam_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_SteamToSteam_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_SteamToSteam_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_SteamToSteam_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.src_clientid = ::std::option::Option::None;
        self.dst_clientid = ::std::option::Option::None;
        self.secretid = ::std::option::Option::None;
        self.encrypted_payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_SteamToSteam_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_SteamToSteam_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemotePlay_SessionStarted_Request {
    // message fields
    host_account_id: ::std::option::Option<u32>,
    client_account_id: ::std::option::Option<u32>,
    appid: ::std::option::Option<u32>,
    device_form_factor: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Request {
    fn default() -> &'a CRemotePlay_SessionStarted_Request {
        <CRemotePlay_SessionStarted_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Request {
    pub fn new() -> CRemotePlay_SessionStarted_Request {
        ::std::default::Default::default()
    }

    // optional uint32 host_account_id = 1;

    pub fn get_host_account_id(&self) -> u32 {
        self.host_account_id.unwrap_or(0)
    }

    pub fn clear_host_account_id(&mut self) {
        self.host_account_id = ::std::option::Option::None;
    }

    pub fn has_host_account_id(&self) -> bool {
        self.host_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_account_id(&mut self, v: u32) {
        self.host_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_account_id = 2;

    pub fn get_client_account_id(&self) -> u32 {
        self.client_account_id.unwrap_or(0)
    }

    pub fn clear_client_account_id(&mut self) {
        self.client_account_id = ::std::option::Option::None;
    }

    pub fn has_client_account_id(&self) -> bool {
        self.client_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_account_id(&mut self, v: u32) {
        self.client_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional int32 device_form_factor = 4;

    pub fn get_device_form_factor(&self) -> i32 {
        self.device_form_factor.unwrap_or(0)
    }

    pub fn clear_device_form_factor(&mut self) {
        self.device_form_factor = ::std::option::Option::None;
    }

    pub fn has_device_form_factor(&self) -> bool {
        self.device_form_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_form_factor(&mut self, v: i32) {
        self.device_form_factor = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStarted_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.host_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.device_form_factor = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.host_account_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_account_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.device_form_factor {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.host_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.device_form_factor {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemotePlay_SessionStarted_Request {
        CRemotePlay_SessionStarted_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "host_account_id",
                |m: &CRemotePlay_SessionStarted_Request| { &m.host_account_id },
                |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.host_account_id },
                CRemotePlay_SessionStarted_Request::get_host_account_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "client_account_id",
                |m: &CRemotePlay_SessionStarted_Request| { &m.client_account_id },
                |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.client_account_id },
                CRemotePlay_SessionStarted_Request::get_client_account_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "appid",
                |m: &CRemotePlay_SessionStarted_Request| { &m.appid },
                |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.appid },
                CRemotePlay_SessionStarted_Request::get_appid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "device_form_factor",
                |m: &CRemotePlay_SessionStarted_Request| { &m.device_form_factor },
                |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.device_form_factor },
                CRemotePlay_SessionStarted_Request::get_device_form_factor,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemotePlay_SessionStarted_Request>(
                "CRemotePlay_SessionStarted_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Request {
        static instance: ::protobuf::rt::Lazy<CRemotePlay_SessionStarted_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemotePlay_SessionStarted_Request::new)
    }
}

impl ::protobuf::Clear for CRemotePlay_SessionStarted_Request {
    fn clear(&mut self) {
        self.host_account_id = ::std::option::Option::None;
        self.client_account_id = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_form_factor = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemotePlay_SessionStarted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemotePlay_SessionStarted_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemotePlay_SessionStarted_Response {
    // message fields
    record_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Response {
    fn default() -> &'a CRemotePlay_SessionStarted_Response {
        <CRemotePlay_SessionStarted_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Response {
    pub fn new() -> CRemotePlay_SessionStarted_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn get_record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStarted_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemotePlay_SessionStarted_Response {
        CRemotePlay_SessionStarted_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "record_id",
                |m: &CRemotePlay_SessionStarted_Response| { &m.record_id },
                |m: &mut CRemotePlay_SessionStarted_Response| { &mut m.record_id },
                CRemotePlay_SessionStarted_Response::get_record_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemotePlay_SessionStarted_Response>(
                "CRemotePlay_SessionStarted_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Response {
        static instance: ::protobuf::rt::Lazy<CRemotePlay_SessionStarted_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemotePlay_SessionStarted_Response::new)
    }
}

impl ::protobuf::Clear for CRemotePlay_SessionStarted_Response {
    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemotePlay_SessionStarted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemotePlay_SessionStarted_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemotePlay_SessionStopped_Notification {
    // message fields
    record_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStopped_Notification {
    fn default() -> &'a CRemotePlay_SessionStopped_Notification {
        <CRemotePlay_SessionStopped_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStopped_Notification {
    pub fn new() -> CRemotePlay_SessionStopped_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn get_record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStopped_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemotePlay_SessionStopped_Notification {
        CRemotePlay_SessionStopped_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "record_id",
                |m: &CRemotePlay_SessionStopped_Notification| { &m.record_id },
                |m: &mut CRemotePlay_SessionStopped_Notification| { &mut m.record_id },
                CRemotePlay_SessionStopped_Notification::get_record_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemotePlay_SessionStopped_Notification>(
                "CRemotePlay_SessionStopped_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemotePlay_SessionStopped_Notification {
        static instance: ::protobuf::rt::Lazy<CRemotePlay_SessionStopped_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemotePlay_SessionStopped_Notification::new)
    }
}

impl ::protobuf::Clear for CRemotePlay_SessionStopped_Notification {
    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemotePlay_SessionStopped_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemotePlay_SessionStopped_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemotePlayTogether_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    pub group_updated: ::protobuf::SingularPtrField<cremote_play_together_notification::GroupUpdated>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemotePlayTogether_Notification {
    fn default() -> &'a CRemotePlayTogether_Notification {
        <CRemotePlayTogether_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlayTogether_Notification {
    pub fn new() -> CRemotePlayTogether_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlayTogether_Notification {
    fn is_initialized(&self) -> bool {
        for v in &self.group_updated {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into::<cremote_play_together_notification::GroupUpdated, _>(wire_type, is, &mut self.group_updated)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.group_updated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.group_updated.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemotePlayTogether_Notification {
        CRemotePlayTogether_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemotePlayTogether_Notification| { &m.steamid },
                |m: &mut CRemotePlayTogether_Notification| { &mut m.steamid },
                CRemotePlayTogether_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cremote_play_together_notification::GroupUpdated>, _>(
                "group_updated",
                |m: &CRemotePlayTogether_Notification| { &m.group_updated },
                |m: &mut CRemotePlayTogether_Notification| { &mut m.group_updated },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemotePlayTogether_Notification>(
                "CRemotePlayTogether_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemotePlayTogether_Notification {
        static instance: ::protobuf::rt::Lazy<CRemotePlayTogether_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemotePlayTogether_Notification::new)
    }
}

impl ::protobuf::Clear for CRemotePlayTogether_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.group_updated.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemotePlayTogether_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemotePlayTogether_Notification {
}

/// Nested message and enums of message `CRemotePlayTogether_Notification`
pub mod cremote_play_together_notification {
    #[derive(PartialEq,Clone,Default)]
    pub struct GroupUpdated {
        // message fields
        host_steamid: ::std::option::Option<u64>,
        host_clientid: ::std::option::Option<u64>,
        pub players: ::std::vec::Vec<u64>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a GroupUpdated {
        fn default() -> &'a GroupUpdated {
            <GroupUpdated as ::protobuf::Message>::default_instance()
        }
    }

    impl GroupUpdated {
        pub fn new() -> GroupUpdated {
            ::std::default::Default::default()
        }

        // optional fixed64 host_steamid = 1;

        pub fn get_host_steamid(&self) -> u64 {
            self.host_steamid.unwrap_or(0)
        }

        pub fn clear_host_steamid(&mut self) {
            self.host_steamid = ::std::option::Option::None;
        }

        pub fn has_host_steamid(&self) -> bool {
            self.host_steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_steamid(&mut self, v: u64) {
            self.host_steamid = ::std::option::Option::Some(v);
        }

        // optional fixed64 host_clientid = 2;

        pub fn get_host_clientid(&self) -> u64 {
            self.host_clientid.unwrap_or(0)
        }

        pub fn clear_host_clientid(&mut self) {
            self.host_clientid = ::std::option::Option::None;
        }

        pub fn has_host_clientid(&self) -> bool {
            self.host_clientid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_clientid(&mut self, v: u64) {
            self.host_clientid = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for GroupUpdated {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.host_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.host_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    3 => {
                        ::protobuf::rt::read_repeated_fixed64_into(wire_type, is, &mut self.players)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.host_steamid {
                my_size += 9;
            }
            if let Some(v) = self.host_clientid {
                my_size += 9;
            }
            my_size += 9 * self.players.len() as u32;
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.host_steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.host_clientid {
                os.write_fixed64(2, v)?;
            }
            for v in &self.players {
                os.write_fixed64(3, *v)?;
            };
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> GroupUpdated {
            GroupUpdated::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                    "host_steamid",
                    |m: &GroupUpdated| { &m.host_steamid },
                    |m: &mut GroupUpdated| { &mut m.host_steamid },
                    GroupUpdated::get_host_steamid,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                    "host_clientid",
                    |m: &GroupUpdated| { &m.host_clientid },
                    |m: &mut GroupUpdated| { &mut m.host_clientid },
                    GroupUpdated::get_host_clientid,
                ));
                fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64>(
                    "players",
                    |m: &GroupUpdated| { &m.players },
                    |m: &mut GroupUpdated| { &mut m.players },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GroupUpdated>(
                    "CRemotePlayTogether_Notification.GroupUpdated",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static GroupUpdated {
            static instance: ::protobuf::rt::Lazy<GroupUpdated> = ::protobuf::rt::Lazy::INIT;
            instance.get(GroupUpdated::new)
        }
    }

    impl ::protobuf::Clear for GroupUpdated {
        fn clear(&mut self) {
            self.host_steamid = ::std::option::Option::None;
            self.host_clientid = ::std::option::Option::None;
            self.players.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for GroupUpdated {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for GroupUpdated {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_RegisterStatusUpdate_Notification {
    // message fields
    session_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    device_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RegisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_RegisterStatusUpdate_Notification {
        <CRemoteClient_RegisterStatusUpdate_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_RegisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 3;

    pub fn get_device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_RegisterStatusUpdate_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 9;
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.device_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        CRemoteClient_RegisterStatusUpdate_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "session_id",
                |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.session_id },
                |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.session_id },
                CRemoteClient_RegisterStatusUpdate_Notification::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.steamid },
                |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.steamid },
                CRemoteClient_RegisterStatusUpdate_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "device_id",
                |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.device_id },
                |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.device_id },
                CRemoteClient_RegisterStatusUpdate_Notification::get_device_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_RegisterStatusUpdate_Notification>(
                "CRemoteClient_RegisterStatusUpdate_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_RegisterStatusUpdate_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_RegisterStatusUpdate_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_RegisterStatusUpdate_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_RegisterStatusUpdate_Notification {
    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_RegisterStatusUpdate_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_RegisterStatusUpdate_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_UnregisterStatusUpdate_Notification {
    // message fields
    session_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_UnregisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_UnregisterStatusUpdate_Notification {
        <CRemoteClient_UnregisterStatusUpdate_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_UnregisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 9;
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        CRemoteClient_UnregisterStatusUpdate_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "session_id",
                |m: &CRemoteClient_UnregisterStatusUpdate_Notification| { &m.session_id },
                |m: &mut CRemoteClient_UnregisterStatusUpdate_Notification| { &mut m.session_id },
                CRemoteClient_UnregisterStatusUpdate_Notification::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_UnregisterStatusUpdate_Notification| { &m.steamid },
                |m: &mut CRemoteClient_UnregisterStatusUpdate_Notification| { &mut m.steamid },
                CRemoteClient_UnregisterStatusUpdate_Notification::get_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_UnregisterStatusUpdate_Notification>(
                "CRemoteClient_UnregisterStatusUpdate_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_UnregisterStatusUpdate_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_UnregisterStatusUpdate_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_UnregisterStatusUpdate_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_UnregisterStatusUpdate_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CRemoteClient_RemotePacket_Notification {
    // message fields
    session_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RemotePacket_Notification {
    fn default() -> &'a CRemoteClient_RemotePacket_Notification {
        <CRemoteClient_RemotePacket_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_RemotePacket_Notification {
    pub fn new() -> CRemoteClient_RemotePacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 4;

    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_RemotePacket_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 9;
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CRemoteClient_RemotePacket_Notification {
        CRemoteClient_RemotePacket_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "session_id",
                |m: &CRemoteClient_RemotePacket_Notification| { &m.session_id },
                |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.session_id },
                CRemoteClient_RemotePacket_Notification::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CRemoteClient_RemotePacket_Notification| { &m.steamid },
                |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.steamid },
                CRemoteClient_RemotePacket_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "payload",
                |m: &CRemoteClient_RemotePacket_Notification| { &m.payload },
                |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.payload },
                CRemoteClient_RemotePacket_Notification::get_payload,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CRemoteClient_RemotePacket_Notification>(
                "CRemoteClient_RemotePacket_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CRemoteClient_RemotePacket_Notification {
        static instance: ::protobuf::rt::Lazy<CRemoteClient_RemotePacket_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CRemoteClient_RemotePacket_Notification::new)
    }
}

impl ::protobuf::Clear for CRemoteClient_RemotePacket_Notification {
    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CRemoteClient_RemotePacket_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CRemoteClient_RemotePacket_Notification {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4steammessages_remoteclient_service.steamclient.proto\x1a,steammessage\
    s_unified_base.steamclient.proto\"8\n$CRemoteClient_GetPairingInfo_Reque\
    st\x12\x10\n\x03pin\x18\x01\x20\x01(\rR\x03pin\"}\n%CRemoteClient_GetPai\
    ringInfo_Response\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\
    \x12\x1b\n\tdevice_id\x18\x02\x20\x01(\x06R\x08deviceId\x12\x18\n\x07req\
    uest\x18\x03\x20\x01(\x0cR\x07request\"=\n!CRemoteClient_Online_Notifica\
    tion\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\"a\n&CRemoteC\
    lient_ReplyPacket_Notification\x12\x1d\n\nsession_id\x18\x01\x20\x01(\
    \x06R\tsessionId\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\
    d\n(CRemoteClient_AllocateTURNServer_Request\x12\x16\n\x06cellid\x18\x01\
    \x20\x01(\rR\x06cellid\x12\x20\n\x0bcredentials\x18\x02\x20\x01(\tR\x0bc\
    redentials\"L\n)CRemoteClient_AllocateTURNServer_Response\x12\x1f\n\x0bt\
    urn_server\x18\x01\x20\x01(\tR\nturnServer\"e\n)CRemoteClient_AllocateRe\
    layServer_Request\x12\x16\n\x06cellid\x18\x01\x20\x01(\rR\x06cellid\x12\
    \x20\n\x0bcredentials\x18\x02\x20\x01(\tR\x0bcredentials\"O\n*CRemoteCli\
    ent_AllocateRelayServer_Response\x12!\n\x0crelay_server\x18\x01\x20\x01(\
    \tR\x0brelayServer\"9\n!CRemoteClient_AllocateSDR_Request\x12\x14\n\x05a\
    ppid\x18\x01\x20\x01(\rR\x05appid\"$\n\"CRemoteClient_AllocateSDR_Respon\
    se\"{\n)CRemoteClient_SteamBroadcast_Notification\x12\x18\n\x07steamid\
    \x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08clientid\x18\x02\x20\x01(\
    \x06R\x08clientid\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\
    \"\xd2\x01\n'CRemoteClient_SteamToSteam_Notification\x12\x18\n\x07steami\
    d\x18\x01\x20\x01(\x06R\x07steamid\x12!\n\x0csrc_clientid\x18\x02\x20\
    \x01(\x06R\x0bsrcClientid\x12!\n\x0cdst_clientid\x18\x03\x20\x01(\x06R\
    \x0bdstClientid\x12\x1a\n\x08secretid\x18\x04\x20\x01(\rR\x08secretid\
    \x12+\n\x11encrypted_payload\x18\x05\x20\x01(\x0cR\x10encryptedPayload\"\
    \xbc\x01\n\"CRemotePlay_SessionStarted_Request\x12&\n\x0fhost_account_id\
    \x18\x01\x20\x01(\rR\rhostAccountId\x12*\n\x11client_account_id\x18\x02\
    \x20\x01(\rR\x0fclientAccountId\x12\x14\n\x05appid\x18\x03\x20\x01(\rR\
    \x05appid\x12,\n\x12device_form_factor\x18\x04\x20\x01(\x05R\x10deviceFo\
    rmFactor\"B\n#CRemotePlay_SessionStarted_Response\x12\x1b\n\trecord_id\
    \x18\x01\x20\x01(\x06R\x08recordId\"F\n'CRemotePlay_SessionStopped_Notif\
    ication\x12\x1b\n\trecord_id\x18\x01\x20\x01(\x06R\x08recordId\"\x83\x02\
    \n\x20CRemotePlayTogether_Notification\x12\x18\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamid\x12S\n\rgroup_updated\x18\x02\x20\x01(\x0b2..CRemo\
    tePlayTogether_Notification.GroupUpdatedR\x0cgroupUpdated\x1ap\n\x0cGrou\
    pUpdated\x12!\n\x0chost_steamid\x18\x01\x20\x01(\x06R\x0bhostSteamid\x12\
    #\n\rhost_clientid\x18\x02\x20\x01(\x06R\x0chostClientid\x12\x18\n\x07pl\
    ayers\x18\x03\x20\x03(\x06R\x07players\"\x87\x01\n/CRemoteClient_Registe\
    rStatusUpdate_Notification\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\t\
    sessionId\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\x12\x1b\
    \n\tdevice_id\x18\x03\x20\x01(\x06R\x08deviceId\"l\n1CRemoteClient_Unreg\
    isterStatusUpdate_Notification\x12\x1d\n\nsession_id\x18\x01\x20\x01(\
    \x06R\tsessionId\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\"\
    |\n'CRemoteClient_RemotePacket_Notification\x12\x1d\n\nsession_id\x18\
    \x01\x20\x01(\x06R\tsessionId\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\
    \x07steamid\x12\x18\n\x07payload\x18\x04\x20\x01(\x0cR\x07payload2\xd4\
    \x0c\n\x0cRemoteClient\x12\x88\x01\n\x0eGetPairingInfo\x12%.CRemoteClien\
    t_GetPairingInfo_Request\x1a&.CRemoteClient_GetPairingInfo_Response\"'\
    \x82\xb5\x18#Get\x20pairing\x20info\x20for\x20an\x20entered\x20PIN\x12~\
    \n\x0cNotifyOnline\x12\".CRemoteClient_Online_Notification\x1a\x0b.NoRes\
    ponse\"=\x82\xb5\x189Let\x20the\x20service\x20know\x20we're\x20available\
    \x20for\x20status\x20listeners\x12n\n\x11NotifyReplyPacket\x12'.CRemoteC\
    lient_ReplyPacket_Notification\x1a\x0b.NoResponse\"#\x82\xb5\x18\x1fSend\
    \x20a\x20reply\x20to\x20a\x20remote\x20client\x12\x9f\x01\n\x12AllocateT\
    URNServer\x12).CRemoteClient_AllocateTURNServer_Request\x1a*.CRemoteClie\
    nt_AllocateTURNServer_Response\"2\x82\xb5\x18.Allocate\x20a\x20TURN\x20s\
    erver\x20for\x20a\x20streaming\x20session\x12\xa7\x01\n\x13AllocateRelay\
    Server\x12*.CRemoteClient_AllocateRelayServer_Request\x1a+.CRemoteClient\
    _AllocateRelayServer_Response\"7\x82\xb5\x183Allocate\x20a\x20UDP\x20rel\
    ay\x20server\x20for\x20a\x20streaming\x20session\x12}\n\x0bAllocateSDR\
    \x12\".CRemoteClient_AllocateSDR_Request\x1a#.CRemoteClient_AllocateSDR_\
    Response\"%\x82\xb5\x18!Allocate\x20SDR\x20resources\x20for\x20an\x20app\
    \x12\x83\x01\n\x18SendSteamBroadcastPacket\x12*.CRemoteClient_SteamBroad\
    cast_Notification\x1a\x0b.NoResponse\".\x82\xb5\x18*Broadcast\x20a\x20pa\
    cket\x20to\x20remote\x20Steam\x20clients\x12{\n\x16SendSteamToSteamPacke\
    t\x12(.CRemoteClient_SteamToSteam_Notification\x1a\x0b.NoResponse\"*\x82\
    \xb5\x18&Send\x20a\x20packet\x20to\x20a\x20remote\x20Steam\x20client\x12\
    \xa8\x01\n\x1cSendRemotePlaySessionStarted\x12#.CRemotePlay_SessionStart\
    ed_Request\x1a$.CRemotePlay_SessionStarted_Response\"=\x82\xb5\x189Let\
    \x20the\x20server\x20know\x20that\x20we\x20started\x20a\x20Remote\x20Pla\
    y\x20session\x12\x94\x01\n\x1cSendRemotePlaySessionStopped\x12(.CRemoteP\
    lay_SessionStopped_Notification\x1a\x0b.NoResponse\"=\x82\xb5\x189Let\
    \x20the\x20server\x20know\x20that\x20we\x20stopped\x20a\x20Remote\x20Pla\
    y\x20session\x12\x88\x01\n\x1cSendRemotePlayTogetherPacket\x12!.CRemoteP\
    layTogether_Notification\x1a\x0b.NoResponse\"8\x82\xb5\x184Send\x20a\x20\
    Remote\x20Play\x20Together\x20packet\x20to\x20a\x20Steam\x20client\x1a.\
    \x82\xb5\x18*Methods\x20for\x20Steam\x20remote\x20client\x20operations2\
    \x94\x07\n\x17RemoteClientSteamClient\x12\x90\x01\n\x1aNotifyRegisterSta\
    tusUpdate\x120.CRemoteClient_RegisterStatusUpdate_Notification\x1a\x0b.N\
    oResponse\"3\x82\xb5\x18/Register\x20for\x20status\x20updates\x20with\
    \x20a\x20Steam\x20client\x12\x96\x01\n\x1cNotifyUnregisterStatusUpdate\
    \x122.CRemoteClient_UnregisterStatusUpdate_Notification\x1a\x0b.NoRespon\
    se\"5\x82\xb5\x181Unregister\x20for\x20status\x20updates\x20with\x20a\
    \x20Steam\x20client\x12p\n\x12NotifyRemotePacket\x12(.CRemoteClient_Remo\
    tePacket_Notification\x1a\x0b.NoResponse\"#\x82\xb5\x18\x1fSend\x20a\x20\
    packet\x20to\x20a\x20Steam\x20client\x12\x85\x01\n\x1aNotifySteamBroadca\
    stPacket\x12*.CRemoteClient_SteamBroadcast_Notification\x1a\x0b.NoRespon\
    se\".\x82\xb5\x18*Broadcast\x20a\x20packet\x20to\x20remote\x20Steam\x20c\
    lients\x12\x91\x01\n\x18NotifySteamToSteamPacket\x12(.CRemoteClient_Stea\
    mToSteam_Notification\x1a\x0b.NoResponse\">\x82\xb5\x18:Send\x20a\x20pac\
    ket\x20to\x20a\x20Steam\x20client\x20from\x20a\x20remote\x20Steam\x20cli\
    ent\x12\x8a\x01\n\x1eNotifyRemotePlayTogetherPacket\x12!.CRemotePlayToge\
    ther_Notification\x1a\x0b.NoResponse\"8\x82\xb5\x184Send\x20a\x20Remote\
    \x20Play\x20Together\x20packet\x20to\x20a\x20Steam\x20client\x1a2\x82\
    \xb5\x18*Methods\x20for\x20Steam\x20remote\x20client\x20operations\xc0\
    \xb5\x18\x02B\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
