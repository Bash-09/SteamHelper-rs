// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_vac.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CFileVerification_SignatureCheck_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    file_size: ::std::option::Option<u64>,
    file_timestamp: ::std::option::Option<u32>,
    file_timestamp2: ::std::option::Option<u32>,
    signature_result: ::std::option::Option<u32>,
    filename: ::protobuf::SingularField<::std::string::String>,
    client_package_version: ::std::option::Option<u32>,
    sha1hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Request {
    fn default() -> &'a CFileVerification_SignatureCheck_Request {
        <CFileVerification_SignatureCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Request {
    pub fn new() -> CFileVerification_SignatureCheck_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 file_size = 3;


    pub fn get_file_size(&self) -> u64 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u64) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp = 4;


    pub fn get_file_timestamp(&self) -> u32 {
        self.file_timestamp.unwrap_or(0)
    }
    pub fn clear_file_timestamp(&mut self) {
        self.file_timestamp = ::std::option::Option::None;
    }

    pub fn has_file_timestamp(&self) -> bool {
        self.file_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp(&mut self, v: u32) {
        self.file_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp2 = 5;


    pub fn get_file_timestamp2(&self) -> u32 {
        self.file_timestamp2.unwrap_or(0)
    }
    pub fn clear_file_timestamp2(&mut self) {
        self.file_timestamp2 = ::std::option::Option::None;
    }

    pub fn has_file_timestamp2(&self) -> bool {
        self.file_timestamp2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp2(&mut self, v: u32) {
        self.file_timestamp2 = ::std::option::Option::Some(v);
    }

    // optional uint32 signature_result = 6;


    pub fn get_signature_result(&self) -> u32 {
        self.signature_result.unwrap_or(0)
    }
    pub fn clear_signature_result(&mut self) {
        self.signature_result = ::std::option::Option::None;
    }

    pub fn has_signature_result(&self) -> bool {
        self.signature_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_result(&mut self, v: u32) {
        self.signature_result = ::std::option::Option::Some(v);
    }

    // optional string filename = 7;


    pub fn get_filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_filename(&mut self) {
        self.filename.clear();
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename.set_default();
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 client_package_version = 8;


    pub fn get_client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }
    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional bytes sha1hash = 9;


    pub fn get_sha1hash(&self) -> &[u8] {
        match self.sha1hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_sha1hash(&mut self) {
        self.sha1hash.clear();
    }

    pub fn has_sha1hash(&self) -> bool {
        self.sha1hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha1hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha1hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha1hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha1hash.is_none() {
            self.sha1hash.set_default();
        }
        self.sha1hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha1hash(&mut self) -> ::std::vec::Vec<u8> {
        self.sha1hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_timestamp2 = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.signature_result = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.filename)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.client_package_version = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sha1hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.file_timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.file_timestamp2 {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.signature_result {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sha1hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.file_timestamp {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.file_timestamp2 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.signature_result {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.filename.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(8, v)?;
        }
        if let Some(ref v) = self.sha1hash.as_ref() {
            os.write_bytes(9, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CFileVerification_SignatureCheck_Request {
        CFileVerification_SignatureCheck_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CFileVerification_SignatureCheck_Request| { &m.steamid },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CFileVerification_SignatureCheck_Request| { &m.appid },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "file_size",
                |m: &CFileVerification_SignatureCheck_Request| { &m.file_size },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "file_timestamp",
                |m: &CFileVerification_SignatureCheck_Request| { &m.file_timestamp },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "file_timestamp2",
                |m: &CFileVerification_SignatureCheck_Request| { &m.file_timestamp2 },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_timestamp2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "signature_result",
                |m: &CFileVerification_SignatureCheck_Request| { &m.signature_result },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.signature_result },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filename",
                |m: &CFileVerification_SignatureCheck_Request| { &m.filename },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "client_package_version",
                |m: &CFileVerification_SignatureCheck_Request| { &m.client_package_version },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.client_package_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sha1hash",
                |m: &CFileVerification_SignatureCheck_Request| { &m.sha1hash },
                |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.sha1hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CFileVerification_SignatureCheck_Request>(
                "CFileVerification_SignatureCheck_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Request {
        static instance: ::protobuf::rt::LazyV2<CFileVerification_SignatureCheck_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CFileVerification_SignatureCheck_Request::new)
    }
}

impl ::protobuf::Clear for CFileVerification_SignatureCheck_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.file_timestamp = ::std::option::Option::None;
        self.file_timestamp2 = ::std::option::Option::None;
        self.signature_result = ::std::option::Option::None;
        self.filename.clear();
        self.client_package_version = ::std::option::Option::None;
        self.sha1hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CFileVerification_SignatureCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SignatureCheck_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CFileVerification_SignatureCheck_Response {
    // message fields
    deny_operation: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Response {
    fn default() -> &'a CFileVerification_SignatureCheck_Response {
        <CFileVerification_SignatureCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Response {
    pub fn new() -> CFileVerification_SignatureCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool deny_operation = 1;


    pub fn get_deny_operation(&self) -> bool {
        self.deny_operation.unwrap_or(false)
    }
    pub fn clear_deny_operation(&mut self) {
        self.deny_operation = ::std::option::Option::None;
    }

    pub fn has_deny_operation(&self) -> bool {
        self.deny_operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deny_operation(&mut self, v: bool) {
        self.deny_operation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deny_operation = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.deny_operation {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.deny_operation {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CFileVerification_SignatureCheck_Response {
        CFileVerification_SignatureCheck_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "deny_operation",
                |m: &CFileVerification_SignatureCheck_Response| { &m.deny_operation },
                |m: &mut CFileVerification_SignatureCheck_Response| { &mut m.deny_operation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CFileVerification_SignatureCheck_Response>(
                "CFileVerification_SignatureCheck_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Response {
        static instance: ::protobuf::rt::LazyV2<CFileVerification_SignatureCheck_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CFileVerification_SignatureCheck_Response::new)
    }
}

impl ::protobuf::Clear for CFileVerification_SignatureCheck_Response {
    fn clear(&mut self) {
        self.deny_operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CFileVerification_SignatureCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SignatureCheck_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CFileVerification_SteamServiceCheck_Request {
    // message fields
    service_status: ::std::option::Option<u32>,
    client_package_version: ::std::option::Option<u32>,
    launcher_type: ::std::option::Option<u32>,
    os_type: ::std::option::Option<u32>,
    service_repair: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Request {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Request {
        <CFileVerification_SteamServiceCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Request {
    pub fn new() -> CFileVerification_SteamServiceCheck_Request {
        ::std::default::Default::default()
    }

    // optional uint32 service_status = 2;


    pub fn get_service_status(&self) -> u32 {
        self.service_status.unwrap_or(0)
    }
    pub fn clear_service_status(&mut self) {
        self.service_status = ::std::option::Option::None;
    }

    pub fn has_service_status(&self) -> bool {
        self.service_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_status(&mut self, v: u32) {
        self.service_status = ::std::option::Option::Some(v);
    }

    // optional uint32 client_package_version = 3;


    pub fn get_client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }
    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional uint32 launcher_type = 4;


    pub fn get_launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }
    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 os_type = 5;


    pub fn get_os_type(&self) -> u32 {
        self.os_type.unwrap_or(0)
    }
    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: u32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 service_repair = 6;


    pub fn get_service_repair(&self) -> u32 {
        self.service_repair.unwrap_or(0)
    }
    pub fn clear_service_repair(&mut self) {
        self.service_repair = ::std::option::Option::None;
    }

    pub fn has_service_repair(&self) -> bool {
        self.service_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_repair(&mut self, v: u32) {
        self.service_repair = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.service_status = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.client_package_version = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.launcher_type = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.os_type = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.service_repair = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.service_status {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.service_repair {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.service_status {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.service_repair {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CFileVerification_SteamServiceCheck_Request {
        CFileVerification_SteamServiceCheck_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "service_status",
                |m: &CFileVerification_SteamServiceCheck_Request| { &m.service_status },
                |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.service_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "client_package_version",
                |m: &CFileVerification_SteamServiceCheck_Request| { &m.client_package_version },
                |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.client_package_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "launcher_type",
                |m: &CFileVerification_SteamServiceCheck_Request| { &m.launcher_type },
                |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.launcher_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "os_type",
                |m: &CFileVerification_SteamServiceCheck_Request| { &m.os_type },
                |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.os_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "service_repair",
                |m: &CFileVerification_SteamServiceCheck_Request| { &m.service_repair },
                |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.service_repair },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CFileVerification_SteamServiceCheck_Request>(
                "CFileVerification_SteamServiceCheck_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Request {
        static instance: ::protobuf::rt::LazyV2<CFileVerification_SteamServiceCheck_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CFileVerification_SteamServiceCheck_Request::new)
    }
}

impl ::protobuf::Clear for CFileVerification_SteamServiceCheck_Request {
    fn clear(&mut self) {
        self.service_status = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.launcher_type = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.service_repair = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CFileVerification_SteamServiceCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SteamServiceCheck_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CFileVerification_SteamServiceCheck_Response {
    // message fields
    attempt_repair: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Response {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Response {
        <CFileVerification_SteamServiceCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Response {
    pub fn new() -> CFileVerification_SteamServiceCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool attempt_repair = 1;


    pub fn get_attempt_repair(&self) -> bool {
        self.attempt_repair.unwrap_or(false)
    }
    pub fn clear_attempt_repair(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
    }

    pub fn has_attempt_repair(&self) -> bool {
        self.attempt_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_repair(&mut self, v: bool) {
        self.attempt_repair = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.attempt_repair = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.attempt_repair {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.attempt_repair {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CFileVerification_SteamServiceCheck_Response {
        CFileVerification_SteamServiceCheck_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "attempt_repair",
                |m: &CFileVerification_SteamServiceCheck_Response| { &m.attempt_repair },
                |m: &mut CFileVerification_SteamServiceCheck_Response| { &mut m.attempt_repair },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CFileVerification_SteamServiceCheck_Response>(
                "CFileVerification_SteamServiceCheck_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Response {
        static instance: ::protobuf::rt::LazyV2<CFileVerification_SteamServiceCheck_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CFileVerification_SteamServiceCheck_Response::new)
    }
}

impl ::protobuf::Clear for CFileVerification_SteamServiceCheck_Response {
    fn clear(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CFileVerification_SteamServiceCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SteamServiceCheck_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#steammessages_vac.steamclient.proto\x1a,steammessages_unified_base.st\
    eamclient.proto\"\xe0\x02\n(CFileVerification_SignatureCheck_Request\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\
    \x18\x02\x20\x01(\rR\x05appid\x12\x1b\n\tfile_size\x18\x03\x20\x01(\x04R\
    \x08fileSize\x12%\n\x0efile_timestamp\x18\x04\x20\x01(\rR\rfileTimestamp\
    \x12'\n\x0ffile_timestamp2\x18\x05\x20\x01(\rR\x0efileTimestamp2\x12)\n\
    \x10signature_result\x18\x06\x20\x01(\rR\x0fsignatureResult\x12\x1a\n\
    \x08filename\x18\x07\x20\x01(\tR\x08filename\x124\n\x16client_package_ve\
    rsion\x18\x08\x20\x01(\rR\x14clientPackageVersion\x12\x1a\n\x08sha1hash\
    \x18\t\x20\x01(\x0cR\x08sha1hash\"R\n)CFileVerification_SignatureCheck_R\
    esponse\x12%\n\x0edeny_operation\x18\x01\x20\x01(\x08R\rdenyOperation\"\
    \xef\x01\n+CFileVerification_SteamServiceCheck_Request\x12%\n\x0eservice\
    _status\x18\x02\x20\x01(\rR\rserviceStatus\x124\n\x16client_package_vers\
    ion\x18\x03\x20\x01(\rR\x14clientPackageVersion\x12#\n\rlauncher_type\
    \x18\x04\x20\x01(\rR\x0clauncherType\x12\x17\n\x07os_type\x18\x05\x20\
    \x01(\rR\x06osType\x12%\n\x0eservice_repair\x18\x06\x20\x01(\rR\rservice\
    Repair\"U\n,CFileVerification_SteamServiceCheck_Response\x12%\n\x0eattem\
    pt_repair\x18\x01\x20\x01(\x08R\rattemptRepair2\xde\x02\n\x10FileVerific\
    ation\x12\x8f\x01\n\x0eSignatureCheck\x12).CFileVerification_SignatureCh\
    eck_Request\x1a*.CFileVerification_SignatureCheck_Response\"&\x82\xb5\
    \x18\"File\x20signature\x20check\x20was\x20performed\x12\x97\x01\n\x11St\
    eamServiceCheck\x12,.CFileVerification_SteamServiceCheck_Request\x1a-.CF\
    ileVerification_SteamServiceCheck_Response\"%\x82\xb5\x18!Steam\x20Servi\
    ce\x20check\x20was\x20performed\x1a\x1e\x82\xb5\x18\x1aFile\x20verificat\
    ion\x20servicesB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
