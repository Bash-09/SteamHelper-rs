// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_hiddevices.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CHIDDeviceInfo {
    // message fields
    location: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EHIDDeviceLocation>>,
    path: ::protobuf::SingularField<::std::string::String>,
    vendor_id: ::std::option::Option<u32>,
    product_id: ::std::option::Option<u32>,
    serial_number: ::protobuf::SingularField<::std::string::String>,
    release_number: ::std::option::Option<u32>,
    manufacturer_string: ::protobuf::SingularField<::std::string::String>,
    product_string: ::protobuf::SingularField<::std::string::String>,
    usage_page: ::std::option::Option<u32>,
    usage: ::std::option::Option<u32>,
    interface_number: ::std::option::Option<i32>,
    ostype: ::std::option::Option<i32>,
    is_generic_gamepad: ::std::option::Option<bool>,
    is_generic_joystick: ::std::option::Option<bool>,
    caps_bits: ::std::option::Option<u32>,
    session_id: ::std::option::Option<u32>,
    eControllerType: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CHIDDeviceInfo {
    fn default() -> &'a CHIDDeviceInfo {
        <CHIDDeviceInfo as ::protobuf::Message>::default_instance()
    }
}

impl CHIDDeviceInfo {
    pub fn new() -> CHIDDeviceInfo {
        ::std::default::Default::default()
    }

    // optional .EHIDDeviceLocation location = 1;

    pub fn get_location(&self) -> EHIDDeviceLocation {
        match self.location {
            Some(e) => e.enum_value_or(EHIDDeviceLocation::k_EDeviceLocationLocal),
            None => EHIDDeviceLocation::k_EDeviceLocationLocal,
        }
    }

    pub fn clear_location(&mut self) {
        self.location = ::std::option::Option::None;
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: EHIDDeviceLocation) {
        self.location = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional string path = 2;

    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 vendor_id = 3;

    pub fn get_vendor_id(&self) -> u32 {
        self.vendor_id.unwrap_or(0)
    }

    pub fn clear_vendor_id(&mut self) {
        self.vendor_id = ::std::option::Option::None;
    }

    pub fn has_vendor_id(&self) -> bool {
        self.vendor_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vendor_id(&mut self, v: u32) {
        self.vendor_id = ::std::option::Option::Some(v);
    }

    // optional uint32 product_id = 4;

    pub fn get_product_id(&self) -> u32 {
        self.product_id.unwrap_or(0)
    }

    pub fn clear_product_id(&mut self) {
        self.product_id = ::std::option::Option::None;
    }

    pub fn has_product_id(&self) -> bool {
        self.product_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product_id(&mut self, v: u32) {
        self.product_id = ::std::option::Option::Some(v);
    }

    // optional string serial_number = 5;

    pub fn get_serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number.set_default();
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 release_number = 6;

    pub fn get_release_number(&self) -> u32 {
        self.release_number.unwrap_or(0)
    }

    pub fn clear_release_number(&mut self) {
        self.release_number = ::std::option::Option::None;
    }

    pub fn has_release_number(&self) -> bool {
        self.release_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_release_number(&mut self, v: u32) {
        self.release_number = ::std::option::Option::Some(v);
    }

    // optional string manufacturer_string = 7;

    pub fn get_manufacturer_string(&self) -> &str {
        match self.manufacturer_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manufacturer_string(&mut self) {
        self.manufacturer_string.clear();
    }

    pub fn has_manufacturer_string(&self) -> bool {
        self.manufacturer_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_string(&mut self, v: ::std::string::String) {
        self.manufacturer_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_string(&mut self) -> &mut ::std::string::String {
        if self.manufacturer_string.is_none() {
            self.manufacturer_string.set_default();
        }
        self.manufacturer_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_manufacturer_string(&mut self) -> ::std::string::String {
        self.manufacturer_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string product_string = 8;

    pub fn get_product_string(&self) -> &str {
        match self.product_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_product_string(&mut self) {
        self.product_string.clear();
    }

    pub fn has_product_string(&self) -> bool {
        self.product_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product_string(&mut self, v: ::std::string::String) {
        self.product_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_string(&mut self) -> &mut ::std::string::String {
        if self.product_string.is_none() {
            self.product_string.set_default();
        }
        self.product_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_product_string(&mut self) -> ::std::string::String {
        self.product_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 usage_page = 9;

    pub fn get_usage_page(&self) -> u32 {
        self.usage_page.unwrap_or(0)
    }

    pub fn clear_usage_page(&mut self) {
        self.usage_page = ::std::option::Option::None;
    }

    pub fn has_usage_page(&self) -> bool {
        self.usage_page.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage_page(&mut self, v: u32) {
        self.usage_page = ::std::option::Option::Some(v);
    }

    // optional uint32 usage = 10;

    pub fn get_usage(&self) -> u32 {
        self.usage.unwrap_or(0)
    }

    pub fn clear_usage(&mut self) {
        self.usage = ::std::option::Option::None;
    }

    pub fn has_usage(&self) -> bool {
        self.usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: u32) {
        self.usage = ::std::option::Option::Some(v);
    }

    // optional int32 interface_number = 11;

    pub fn get_interface_number(&self) -> i32 {
        self.interface_number.unwrap_or(-1i32)
    }

    pub fn clear_interface_number(&mut self) {
        self.interface_number = ::std::option::Option::None;
    }

    pub fn has_interface_number(&self) -> bool {
        self.interface_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interface_number(&mut self, v: i32) {
        self.interface_number = ::std::option::Option::Some(v);
    }

    // optional int32 ostype = 12;

    pub fn get_ostype(&self) -> i32 {
        self.ostype.unwrap_or(-1i32)
    }

    pub fn clear_ostype(&mut self) {
        self.ostype = ::std::option::Option::None;
    }

    pub fn has_ostype(&self) -> bool {
        self.ostype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ostype(&mut self, v: i32) {
        self.ostype = ::std::option::Option::Some(v);
    }

    // optional bool is_generic_gamepad = 13;

    pub fn get_is_generic_gamepad(&self) -> bool {
        self.is_generic_gamepad.unwrap_or(false)
    }

    pub fn clear_is_generic_gamepad(&mut self) {
        self.is_generic_gamepad = ::std::option::Option::None;
    }

    pub fn has_is_generic_gamepad(&self) -> bool {
        self.is_generic_gamepad.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_generic_gamepad(&mut self, v: bool) {
        self.is_generic_gamepad = ::std::option::Option::Some(v);
    }

    // optional bool is_generic_joystick = 14;

    pub fn get_is_generic_joystick(&self) -> bool {
        self.is_generic_joystick.unwrap_or(false)
    }

    pub fn clear_is_generic_joystick(&mut self) {
        self.is_generic_joystick = ::std::option::Option::None;
    }

    pub fn has_is_generic_joystick(&self) -> bool {
        self.is_generic_joystick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_generic_joystick(&mut self, v: bool) {
        self.is_generic_joystick = ::std::option::Option::Some(v);
    }

    // optional uint32 caps_bits = 15;

    pub fn get_caps_bits(&self) -> u32 {
        self.caps_bits.unwrap_or(0)
    }

    pub fn clear_caps_bits(&mut self) {
        self.caps_bits = ::std::option::Option::None;
    }

    pub fn has_caps_bits(&self) -> bool {
        self.caps_bits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_caps_bits(&mut self, v: u32) {
        self.caps_bits = ::std::option::Option::Some(v);
    }

    // optional uint32 session_id = 16;

    pub fn get_session_id(&self) -> u32 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 eControllerType = 17;

    pub fn get_eControllerType(&self) -> u32 {
        self.eControllerType.unwrap_or(0u32)
    }

    pub fn clear_eControllerType(&mut self) {
        self.eControllerType = ::std::option::Option::None;
    }

    pub fn has_eControllerType(&self) -> bool {
        self.eControllerType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eControllerType(&mut self, v: u32) {
        self.eControllerType = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CHIDDeviceInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.location = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.vendor_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.product_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.serial_number)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.release_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.manufacturer_string)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.product_string)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.usage_page = ::std::option::Option::Some(is.read_uint32()?);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.usage = ::std::option::Option::Some(is.read_uint32()?);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.interface_number = ::std::option::Option::Some(is.read_int32()?);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ostype = ::std::option::Option::Some(is.read_int32()?);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_generic_gamepad = ::std::option::Option::Some(is.read_bool()?);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_generic_joystick = ::std::option::Option::Some(is.read_bool()?);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.caps_bits = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eControllerType = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.location {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, v);
        }
        if let Some(v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.vendor_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.product_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.release_number {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.manufacturer_string.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.product_string.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.usage_page {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.usage {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.interface_number {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ostype {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_generic_gamepad {
            my_size += 2;
        }
        if let Some(v) = self.is_generic_joystick {
            my_size += 2;
        }
        if let Some(v) = self.caps_bits {
            my_size += ::protobuf::rt::value_size(15, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.session_id {
            my_size += ::protobuf::rt::value_size(16, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.eControllerType {
            my_size += ::protobuf::rt::value_size(17, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.location {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.path.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.vendor_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.product_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.release_number {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.manufacturer_string.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.product_string.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.usage_page {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.usage {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.interface_number {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.ostype {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.is_generic_gamepad {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.is_generic_joystick {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.caps_bits {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.session_id {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.eControllerType {
            os.write_uint32(17, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CHIDDeviceInfo {
        CHIDDeviceInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EHIDDeviceLocation>(
                "location",
                |m: &CHIDDeviceInfo| { &m.location },
                |m: &mut CHIDDeviceInfo| { &mut m.location },
                EHIDDeviceLocation::k_EDeviceLocationLocal,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "path",
                |m: &CHIDDeviceInfo| { &m.path },
                |m: &mut CHIDDeviceInfo| { &mut m.path },
                CHIDDeviceInfo::get_path,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "vendor_id",
                |m: &CHIDDeviceInfo| { &m.vendor_id },
                |m: &mut CHIDDeviceInfo| { &mut m.vendor_id },
                CHIDDeviceInfo::get_vendor_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "product_id",
                |m: &CHIDDeviceInfo| { &m.product_id },
                |m: &mut CHIDDeviceInfo| { &mut m.product_id },
                CHIDDeviceInfo::get_product_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "serial_number",
                |m: &CHIDDeviceInfo| { &m.serial_number },
                |m: &mut CHIDDeviceInfo| { &mut m.serial_number },
                CHIDDeviceInfo::get_serial_number,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "release_number",
                |m: &CHIDDeviceInfo| { &m.release_number },
                |m: &mut CHIDDeviceInfo| { &mut m.release_number },
                CHIDDeviceInfo::get_release_number,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "manufacturer_string",
                |m: &CHIDDeviceInfo| { &m.manufacturer_string },
                |m: &mut CHIDDeviceInfo| { &mut m.manufacturer_string },
                CHIDDeviceInfo::get_manufacturer_string,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "product_string",
                |m: &CHIDDeviceInfo| { &m.product_string },
                |m: &mut CHIDDeviceInfo| { &mut m.product_string },
                CHIDDeviceInfo::get_product_string,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "usage_page",
                |m: &CHIDDeviceInfo| { &m.usage_page },
                |m: &mut CHIDDeviceInfo| { &mut m.usage_page },
                CHIDDeviceInfo::get_usage_page,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "usage",
                |m: &CHIDDeviceInfo| { &m.usage },
                |m: &mut CHIDDeviceInfo| { &mut m.usage },
                CHIDDeviceInfo::get_usage,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "interface_number",
                |m: &CHIDDeviceInfo| { &m.interface_number },
                |m: &mut CHIDDeviceInfo| { &mut m.interface_number },
                CHIDDeviceInfo::get_interface_number,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "ostype",
                |m: &CHIDDeviceInfo| { &m.ostype },
                |m: &mut CHIDDeviceInfo| { &mut m.ostype },
                CHIDDeviceInfo::get_ostype,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_generic_gamepad",
                |m: &CHIDDeviceInfo| { &m.is_generic_gamepad },
                |m: &mut CHIDDeviceInfo| { &mut m.is_generic_gamepad },
                CHIDDeviceInfo::get_is_generic_gamepad,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_generic_joystick",
                |m: &CHIDDeviceInfo| { &m.is_generic_joystick },
                |m: &mut CHIDDeviceInfo| { &mut m.is_generic_joystick },
                CHIDDeviceInfo::get_is_generic_joystick,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "caps_bits",
                |m: &CHIDDeviceInfo| { &m.caps_bits },
                |m: &mut CHIDDeviceInfo| { &mut m.caps_bits },
                CHIDDeviceInfo::get_caps_bits,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "session_id",
                |m: &CHIDDeviceInfo| { &m.session_id },
                |m: &mut CHIDDeviceInfo| { &mut m.session_id },
                CHIDDeviceInfo::get_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "eControllerType",
                |m: &CHIDDeviceInfo| { &m.eControllerType },
                |m: &mut CHIDDeviceInfo| { &mut m.eControllerType },
                CHIDDeviceInfo::get_eControllerType,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CHIDDeviceInfo>(
                "CHIDDeviceInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CHIDDeviceInfo {
        static instance: ::protobuf::rt::Lazy<CHIDDeviceInfo> = ::protobuf::rt::Lazy::INIT;
        instance.get(CHIDDeviceInfo::new)
    }
}

impl ::protobuf::Clear for CHIDDeviceInfo {
    fn clear(&mut self) {
        self.location = ::std::option::Option::None;
        self.path.clear();
        self.vendor_id = ::std::option::Option::None;
        self.product_id = ::std::option::Option::None;
        self.serial_number.clear();
        self.release_number = ::std::option::Option::None;
        self.manufacturer_string.clear();
        self.product_string.clear();
        self.usage_page = ::std::option::Option::None;
        self.usage = ::std::option::Option::None;
        self.interface_number = ::std::option::Option::None;
        self.ostype = ::std::option::Option::None;
        self.is_generic_gamepad = ::std::option::Option::None;
        self.is_generic_joystick = ::std::option::Option::None;
        self.caps_bits = ::std::option::Option::None;
        self.session_id = ::std::option::Option::None;
        self.eControllerType = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CHIDDeviceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHIDDeviceInfo {
}

#[derive(PartialEq,Clone,Default)]
pub struct CHIDDeviceInputReport {
    // message fields
    full_report: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    delta_report: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    delta_report_size: ::std::option::Option<u32>,
    delta_report_crc: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CHIDDeviceInputReport {
    fn default() -> &'a CHIDDeviceInputReport {
        <CHIDDeviceInputReport as ::protobuf::Message>::default_instance()
    }
}

impl CHIDDeviceInputReport {
    pub fn new() -> CHIDDeviceInputReport {
        ::std::default::Default::default()
    }

    // optional bytes full_report = 1;

    pub fn get_full_report(&self) -> &[u8] {
        match self.full_report.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_full_report(&mut self) {
        self.full_report.clear();
    }

    pub fn has_full_report(&self) -> bool {
        self.full_report.is_some()
    }

    // Param is passed by value, moved
    pub fn set_full_report(&mut self, v: ::std::vec::Vec<u8>) {
        self.full_report = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_full_report(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.full_report.is_none() {
            self.full_report.set_default();
        }
        self.full_report.as_mut().unwrap()
    }

    // Take field
    pub fn take_full_report(&mut self) -> ::std::vec::Vec<u8> {
        self.full_report.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes delta_report = 2;

    pub fn get_delta_report(&self) -> &[u8] {
        match self.delta_report.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_delta_report(&mut self) {
        self.delta_report.clear();
    }

    pub fn has_delta_report(&self) -> bool {
        self.delta_report.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delta_report(&mut self, v: ::std::vec::Vec<u8>) {
        self.delta_report = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delta_report(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.delta_report.is_none() {
            self.delta_report.set_default();
        }
        self.delta_report.as_mut().unwrap()
    }

    // Take field
    pub fn take_delta_report(&mut self) -> ::std::vec::Vec<u8> {
        self.delta_report.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 delta_report_size = 3;

    pub fn get_delta_report_size(&self) -> u32 {
        self.delta_report_size.unwrap_or(0)
    }

    pub fn clear_delta_report_size(&mut self) {
        self.delta_report_size = ::std::option::Option::None;
    }

    pub fn has_delta_report_size(&self) -> bool {
        self.delta_report_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delta_report_size(&mut self, v: u32) {
        self.delta_report_size = ::std::option::Option::Some(v);
    }

    // optional uint32 delta_report_crc = 4;

    pub fn get_delta_report_crc(&self) -> u32 {
        self.delta_report_crc.unwrap_or(0)
    }

    pub fn clear_delta_report_crc(&mut self) {
        self.delta_report_crc = ::std::option::Option::None;
    }

    pub fn has_delta_report_crc(&self) -> bool {
        self.delta_report_crc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delta_report_crc(&mut self, v: u32) {
        self.delta_report_crc = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CHIDDeviceInputReport {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.full_report)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.delta_report)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.delta_report_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.delta_report_crc = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.full_report.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.delta_report.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.delta_report_size {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.delta_report_crc {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.full_report.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.delta_report.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.delta_report_size {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.delta_report_crc {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CHIDDeviceInputReport {
        CHIDDeviceInputReport::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "full_report",
                |m: &CHIDDeviceInputReport| { &m.full_report },
                |m: &mut CHIDDeviceInputReport| { &mut m.full_report },
                CHIDDeviceInputReport::get_full_report,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "delta_report",
                |m: &CHIDDeviceInputReport| { &m.delta_report },
                |m: &mut CHIDDeviceInputReport| { &mut m.delta_report },
                CHIDDeviceInputReport::get_delta_report,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "delta_report_size",
                |m: &CHIDDeviceInputReport| { &m.delta_report_size },
                |m: &mut CHIDDeviceInputReport| { &mut m.delta_report_size },
                CHIDDeviceInputReport::get_delta_report_size,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "delta_report_crc",
                |m: &CHIDDeviceInputReport| { &m.delta_report_crc },
                |m: &mut CHIDDeviceInputReport| { &mut m.delta_report_crc },
                CHIDDeviceInputReport::get_delta_report_crc,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CHIDDeviceInputReport>(
                "CHIDDeviceInputReport",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CHIDDeviceInputReport {
        static instance: ::protobuf::rt::Lazy<CHIDDeviceInputReport> = ::protobuf::rt::Lazy::INIT;
        instance.get(CHIDDeviceInputReport::new)
    }
}

impl ::protobuf::Clear for CHIDDeviceInputReport {
    fn clear(&mut self) {
        self.full_report.clear();
        self.delta_report.clear();
        self.delta_report_size = ::std::option::Option::None;
        self.delta_report_crc = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CHIDDeviceInputReport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHIDDeviceInputReport {
}

#[derive(PartialEq,Clone,Default)]
pub struct CHIDMessageToRemote {
    // message fields
    request_id: ::std::option::Option<u32>,
    // message oneof groups
    pub command: ::std::option::Option<chidmessage_to_remote::Command>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CHIDMessageToRemote {
    fn default() -> &'a CHIDMessageToRemote {
        <CHIDMessageToRemote as ::protobuf::Message>::default_instance()
    }
}

impl CHIDMessageToRemote {
    pub fn new() -> CHIDMessageToRemote {
        ::std::default::Default::default()
    }

    // optional uint32 request_id = 1;

    pub fn get_request_id(&self) -> u32 {
        self.request_id.unwrap_or(0)
    }

    pub fn clear_request_id(&mut self) {
        self.request_id = ::std::option::Option::None;
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u32) {
        self.request_id = ::std::option::Option::Some(v);
    }

    // optional .CHIDMessageToRemote.DeviceOpen device_open = 2;

    pub fn get_device_open(&self) -> &chidmessage_to_remote::DeviceOpen {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceOpen as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_open(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_open(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_open(&mut self, v: chidmessage_to_remote::DeviceOpen) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_open(&mut self) -> &mut chidmessage_to_remote::DeviceOpen {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(chidmessage_to_remote::DeviceOpen::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_open(&mut self) -> chidmessage_to_remote::DeviceOpen {
        if self.has_device_open() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceOpen::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceClose device_close = 3;

    pub fn get_device_close(&self) -> &chidmessage_to_remote::DeviceClose {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceClose as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_close(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_close(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_close(&mut self, v: chidmessage_to_remote::DeviceClose) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_close(&mut self) -> &mut chidmessage_to_remote::DeviceClose {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(chidmessage_to_remote::DeviceClose::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_close(&mut self) -> chidmessage_to_remote::DeviceClose {
        if self.has_device_close() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceClose::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceWrite device_write = 4;

    pub fn get_device_write(&self) -> &chidmessage_to_remote::DeviceWrite {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceWrite as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_write(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_write(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_write(&mut self, v: chidmessage_to_remote::DeviceWrite) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_write(&mut self) -> &mut chidmessage_to_remote::DeviceWrite {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(chidmessage_to_remote::DeviceWrite::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_write(&mut self) -> chidmessage_to_remote::DeviceWrite {
        if self.has_device_write() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceWrite::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceRead device_read = 5;

    pub fn get_device_read(&self) -> &chidmessage_to_remote::DeviceRead {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceRead as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_read(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_read(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_read(&mut self, v: chidmessage_to_remote::DeviceRead) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_read(&mut self) -> &mut chidmessage_to_remote::DeviceRead {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(chidmessage_to_remote::DeviceRead::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_read(&mut self) -> chidmessage_to_remote::DeviceRead {
        if self.has_device_read() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceRead::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;

    pub fn get_device_send_feature_report(&self) -> &chidmessage_to_remote::DeviceSendFeatureReport {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceSendFeatureReport as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_send_feature_report(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_send_feature_report(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_send_feature_report(&mut self, v: chidmessage_to_remote::DeviceSendFeatureReport) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_send_feature_report(&mut self) -> &mut chidmessage_to_remote::DeviceSendFeatureReport {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(chidmessage_to_remote::DeviceSendFeatureReport::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_send_feature_report(&mut self) -> chidmessage_to_remote::DeviceSendFeatureReport {
        if self.has_device_send_feature_report() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceSendFeatureReport::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;

    pub fn get_device_get_feature_report(&self) -> &chidmessage_to_remote::DeviceGetFeatureReport {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceGetFeatureReport as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_get_feature_report(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_get_feature_report(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_get_feature_report(&mut self, v: chidmessage_to_remote::DeviceGetFeatureReport) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_get_feature_report(&mut self) -> &mut chidmessage_to_remote::DeviceGetFeatureReport {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(chidmessage_to_remote::DeviceGetFeatureReport::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_get_feature_report(&mut self) -> chidmessage_to_remote::DeviceGetFeatureReport {
        if self.has_device_get_feature_report() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceGetFeatureReport::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;

    pub fn get_device_get_vendor_string(&self) -> &chidmessage_to_remote::DeviceGetVendorString {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceGetVendorString as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_get_vendor_string(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_get_vendor_string(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_get_vendor_string(&mut self, v: chidmessage_to_remote::DeviceGetVendorString) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_get_vendor_string(&mut self) -> &mut chidmessage_to_remote::DeviceGetVendorString {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(chidmessage_to_remote::DeviceGetVendorString::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_get_vendor_string(&mut self) -> chidmessage_to_remote::DeviceGetVendorString {
        if self.has_device_get_vendor_string() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceGetVendorString::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;

    pub fn get_device_get_product_string(&self) -> &chidmessage_to_remote::DeviceGetProductString {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceGetProductString as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_get_product_string(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_get_product_string(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_get_product_string(&mut self, v: chidmessage_to_remote::DeviceGetProductString) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_get_product_string(&mut self) -> &mut chidmessage_to_remote::DeviceGetProductString {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(chidmessage_to_remote::DeviceGetProductString::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_get_product_string(&mut self) -> chidmessage_to_remote::DeviceGetProductString {
        if self.has_device_get_product_string() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceGetProductString::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;

    pub fn get_device_get_serial_number_string(&self) -> &chidmessage_to_remote::DeviceGetSerialNumberString {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceGetSerialNumberString as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_get_serial_number_string(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_get_serial_number_string(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_get_serial_number_string(&mut self, v: chidmessage_to_remote::DeviceGetSerialNumberString) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_get_serial_number_string(&mut self) -> &mut chidmessage_to_remote::DeviceGetSerialNumberString {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(chidmessage_to_remote::DeviceGetSerialNumberString::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_get_serial_number_string(&mut self) -> chidmessage_to_remote::DeviceGetSerialNumberString {
        if self.has_device_get_serial_number_string() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceGetSerialNumberString::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;

    pub fn get_device_start_input_reports(&self) -> &chidmessage_to_remote::DeviceStartInputReports {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceStartInputReports as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_start_input_reports(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_start_input_reports(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_start_input_reports(&mut self, v: chidmessage_to_remote::DeviceStartInputReports) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_start_input_reports(&mut self) -> &mut chidmessage_to_remote::DeviceStartInputReports {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(chidmessage_to_remote::DeviceStartInputReports::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_start_input_reports(&mut self) -> chidmessage_to_remote::DeviceStartInputReports {
        if self.has_device_start_input_reports() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceStartInputReports::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;

    pub fn get_device_request_full_report(&self) -> &chidmessage_to_remote::DeviceRequestFullReport {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceRequestFullReport as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_request_full_report(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_request_full_report(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_request_full_report(&mut self, v: chidmessage_to_remote::DeviceRequestFullReport) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_request_full_report(&mut self) -> &mut chidmessage_to_remote::DeviceRequestFullReport {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(chidmessage_to_remote::DeviceRequestFullReport::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_request_full_report(&mut self) -> chidmessage_to_remote::DeviceRequestFullReport {
        if self.has_device_request_full_report() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceRequestFullReport::new()
        }
    }

    // optional .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;

    pub fn get_device_disconnect(&self) -> &chidmessage_to_remote::DeviceDisconnect {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(ref v)) => v,
            _ => <chidmessage_to_remote::DeviceDisconnect as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_device_disconnect(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_device_disconnect(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_device_disconnect(&mut self, v: chidmessage_to_remote::DeviceDisconnect) {
        self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_device_disconnect(&mut self) -> &mut chidmessage_to_remote::DeviceDisconnect {
        if let ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(chidmessage_to_remote::DeviceDisconnect::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_device_disconnect(&mut self) -> chidmessage_to_remote::DeviceDisconnect {
        if self.has_device_disconnect() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_to_remote::DeviceDisconnect::new()
        }
    }
}

impl ::protobuf::Message for CHIDMessageToRemote {
    fn is_initialized(&self) -> bool {
        if let Some(chidmessage_to_remote::Command::device_open(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_close(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_write(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_read(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_send_feature_report(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_get_feature_report(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_get_vendor_string(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_get_product_string(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_get_serial_number_string(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_start_input_reports(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_request_full_report(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_to_remote::Command::device_disconnect(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_open(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_close(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_write(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_read(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_send_feature_report(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_feature_report(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_vendor_string(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_product_string(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_get_serial_number_string(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_start_input_reports(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_request_full_report(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_to_remote::Command::device_disconnect(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.request_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &chidmessage_to_remote::Command::device_open(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_close(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_write(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_read(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_send_feature_report(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_get_feature_report(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_get_vendor_string(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_get_product_string(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_get_serial_number_string(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_start_input_reports(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_request_full_report(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_to_remote::Command::device_disconnect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.request_id {
            os.write_uint32(1, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &chidmessage_to_remote::Command::device_open(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &chidmessage_to_remote::Command::device_close(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &chidmessage_to_remote::Command::device_write(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &chidmessage_to_remote::Command::device_read(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &chidmessage_to_remote::Command::device_send_feature_report(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &chidmessage_to_remote::Command::device_get_feature_report(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &chidmessage_to_remote::Command::device_get_vendor_string(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &chidmessage_to_remote::Command::device_get_product_string(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &chidmessage_to_remote::Command::device_get_serial_number_string(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &chidmessage_to_remote::Command::device_start_input_reports(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &chidmessage_to_remote::Command::device_request_full_report(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &chidmessage_to_remote::Command::device_disconnect(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CHIDMessageToRemote {
        CHIDMessageToRemote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "request_id",
                |m: &CHIDMessageToRemote| { &m.request_id },
                |m: &mut CHIDMessageToRemote| { &mut m.request_id },
                CHIDMessageToRemote::get_request_id,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceOpen>(
                "device_open",
                CHIDMessageToRemote::has_device_open,
                CHIDMessageToRemote::get_device_open,
                CHIDMessageToRemote::mut_device_open,
                CHIDMessageToRemote::set_device_open,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceClose>(
                "device_close",
                CHIDMessageToRemote::has_device_close,
                CHIDMessageToRemote::get_device_close,
                CHIDMessageToRemote::mut_device_close,
                CHIDMessageToRemote::set_device_close,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceWrite>(
                "device_write",
                CHIDMessageToRemote::has_device_write,
                CHIDMessageToRemote::get_device_write,
                CHIDMessageToRemote::mut_device_write,
                CHIDMessageToRemote::set_device_write,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceRead>(
                "device_read",
                CHIDMessageToRemote::has_device_read,
                CHIDMessageToRemote::get_device_read,
                CHIDMessageToRemote::mut_device_read,
                CHIDMessageToRemote::set_device_read,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceSendFeatureReport>(
                "device_send_feature_report",
                CHIDMessageToRemote::has_device_send_feature_report,
                CHIDMessageToRemote::get_device_send_feature_report,
                CHIDMessageToRemote::mut_device_send_feature_report,
                CHIDMessageToRemote::set_device_send_feature_report,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceGetFeatureReport>(
                "device_get_feature_report",
                CHIDMessageToRemote::has_device_get_feature_report,
                CHIDMessageToRemote::get_device_get_feature_report,
                CHIDMessageToRemote::mut_device_get_feature_report,
                CHIDMessageToRemote::set_device_get_feature_report,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceGetVendorString>(
                "device_get_vendor_string",
                CHIDMessageToRemote::has_device_get_vendor_string,
                CHIDMessageToRemote::get_device_get_vendor_string,
                CHIDMessageToRemote::mut_device_get_vendor_string,
                CHIDMessageToRemote::set_device_get_vendor_string,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceGetProductString>(
                "device_get_product_string",
                CHIDMessageToRemote::has_device_get_product_string,
                CHIDMessageToRemote::get_device_get_product_string,
                CHIDMessageToRemote::mut_device_get_product_string,
                CHIDMessageToRemote::set_device_get_product_string,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceGetSerialNumberString>(
                "device_get_serial_number_string",
                CHIDMessageToRemote::has_device_get_serial_number_string,
                CHIDMessageToRemote::get_device_get_serial_number_string,
                CHIDMessageToRemote::mut_device_get_serial_number_string,
                CHIDMessageToRemote::set_device_get_serial_number_string,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceStartInputReports>(
                "device_start_input_reports",
                CHIDMessageToRemote::has_device_start_input_reports,
                CHIDMessageToRemote::get_device_start_input_reports,
                CHIDMessageToRemote::mut_device_start_input_reports,
                CHIDMessageToRemote::set_device_start_input_reports,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceRequestFullReport>(
                "device_request_full_report",
                CHIDMessageToRemote::has_device_request_full_report,
                CHIDMessageToRemote::get_device_request_full_report,
                CHIDMessageToRemote::mut_device_request_full_report,
                CHIDMessageToRemote::set_device_request_full_report,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_to_remote::DeviceDisconnect>(
                "device_disconnect",
                CHIDMessageToRemote::has_device_disconnect,
                CHIDMessageToRemote::get_device_disconnect,
                CHIDMessageToRemote::mut_device_disconnect,
                CHIDMessageToRemote::set_device_disconnect,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CHIDMessageToRemote>(
                "CHIDMessageToRemote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CHIDMessageToRemote {
        static instance: ::protobuf::rt::Lazy<CHIDMessageToRemote> = ::protobuf::rt::Lazy::INIT;
        instance.get(CHIDMessageToRemote::new)
    }
}

impl ::protobuf::Clear for CHIDMessageToRemote {
    fn clear(&mut self) {
        self.request_id = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CHIDMessageToRemote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHIDMessageToRemote {
}

/// Nested message and enums of message `CHIDMessageToRemote`
pub mod chidmessage_to_remote {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Command {
        device_open(DeviceOpen),
        device_close(DeviceClose),
        device_write(DeviceWrite),
        device_read(DeviceRead),
        device_send_feature_report(DeviceSendFeatureReport),
        device_get_feature_report(DeviceGetFeatureReport),
        device_get_vendor_string(DeviceGetVendorString),
        device_get_product_string(DeviceGetProductString),
        device_get_serial_number_string(DeviceGetSerialNumberString),
        device_start_input_reports(DeviceStartInputReports),
        device_request_full_report(DeviceRequestFullReport),
        device_disconnect(DeviceDisconnect),
    }

    impl ::protobuf::Oneof for Command {
    }
    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceOpen {
        // message fields
        pub info: ::protobuf::SingularPtrField<super::CHIDDeviceInfo>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceOpen {
        fn default() -> &'a DeviceOpen {
            <DeviceOpen as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceOpen {
        pub fn new() -> DeviceOpen {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for DeviceOpen {
        fn is_initialized(&self) -> bool {
            for v in &self.info {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_singular_message_into::<super::CHIDDeviceInfo, _>(wire_type, is, &mut self.info)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.info.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.info.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceOpen {
            DeviceOpen::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<super::CHIDDeviceInfo>, _>(
                    "info",
                    |m: &DeviceOpen| { &m.info },
                    |m: &mut DeviceOpen| { &mut m.info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceOpen>(
                    "CHIDMessageToRemote.DeviceOpen",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceOpen {
            static instance: ::protobuf::rt::Lazy<DeviceOpen> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceOpen::new)
        }
    }

    impl ::protobuf::Clear for DeviceOpen {
        fn clear(&mut self) {
            self.info.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceOpen {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceOpen {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceClose {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceClose {
        fn default() -> &'a DeviceClose {
            <DeviceClose as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceClose {
        pub fn new() -> DeviceClose {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceClose {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceClose {
            DeviceClose::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceClose| { &m.device },
                    |m: &mut DeviceClose| { &mut m.device },
                    DeviceClose::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceClose>(
                    "CHIDMessageToRemote.DeviceClose",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceClose {
            static instance: ::protobuf::rt::Lazy<DeviceClose> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceClose::new)
        }
    }

    impl ::protobuf::Clear for DeviceClose {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceClose {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceClose {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceWrite {
        // message fields
        device: ::std::option::Option<u32>,
        data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceWrite {
        fn default() -> &'a DeviceWrite {
            <DeviceWrite as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceWrite {
        pub fn new() -> DeviceWrite {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional bytes data = 2;

        pub fn get_data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data.clear();
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data.set_default();
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for DeviceWrite {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceWrite {
            DeviceWrite::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceWrite| { &m.device },
                    |m: &mut DeviceWrite| { &mut m.device },
                    DeviceWrite::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "data",
                    |m: &DeviceWrite| { &m.data },
                    |m: &mut DeviceWrite| { &mut m.data },
                    DeviceWrite::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceWrite>(
                    "CHIDMessageToRemote.DeviceWrite",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceWrite {
            static instance: ::protobuf::rt::Lazy<DeviceWrite> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceWrite::new)
        }
    }

    impl ::protobuf::Clear for DeviceWrite {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.data.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceWrite {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceWrite {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceRead {
        // message fields
        device: ::std::option::Option<u32>,
        length: ::std::option::Option<u32>,
        timeout_ms: ::std::option::Option<i32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceRead {
        fn default() -> &'a DeviceRead {
            <DeviceRead as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceRead {
        pub fn new() -> DeviceRead {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional uint32 length = 2;

        pub fn get_length(&self) -> u32 {
            self.length.unwrap_or(0)
        }

        pub fn clear_length(&mut self) {
            self.length = ::std::option::Option::None;
        }

        pub fn has_length(&self) -> bool {
            self.length.is_some()
        }

        // Param is passed by value, moved
        pub fn set_length(&mut self, v: u32) {
            self.length = ::std::option::Option::Some(v);
        }

        // optional int32 timeout_ms = 3;

        pub fn get_timeout_ms(&self) -> i32 {
            self.timeout_ms.unwrap_or(0)
        }

        pub fn clear_timeout_ms(&mut self) {
            self.timeout_ms = ::std::option::Option::None;
        }

        pub fn has_timeout_ms(&self) -> bool {
            self.timeout_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timeout_ms(&mut self, v: i32) {
            self.timeout_ms = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceRead {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.length = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    3 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.timeout_ms = ::std::option::Option::Some(is.read_int32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.length {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.timeout_ms {
                my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.length {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.timeout_ms {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceRead {
            DeviceRead::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceRead| { &m.device },
                    |m: &mut DeviceRead| { &mut m.device },
                    DeviceRead::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "length",
                    |m: &DeviceRead| { &m.length },
                    |m: &mut DeviceRead| { &mut m.length },
                    DeviceRead::get_length,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "timeout_ms",
                    |m: &DeviceRead| { &m.timeout_ms },
                    |m: &mut DeviceRead| { &mut m.timeout_ms },
                    DeviceRead::get_timeout_ms,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceRead>(
                    "CHIDMessageToRemote.DeviceRead",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceRead {
            static instance: ::protobuf::rt::Lazy<DeviceRead> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceRead::new)
        }
    }

    impl ::protobuf::Clear for DeviceRead {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.length = ::std::option::Option::None;
            self.timeout_ms = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceRead {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceRead {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceSendFeatureReport {
        // message fields
        device: ::std::option::Option<u32>,
        data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceSendFeatureReport {
        fn default() -> &'a DeviceSendFeatureReport {
            <DeviceSendFeatureReport as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceSendFeatureReport {
        pub fn new() -> DeviceSendFeatureReport {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional bytes data = 2;

        pub fn get_data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data.clear();
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data.set_default();
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for DeviceSendFeatureReport {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceSendFeatureReport {
            DeviceSendFeatureReport::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceSendFeatureReport| { &m.device },
                    |m: &mut DeviceSendFeatureReport| { &mut m.device },
                    DeviceSendFeatureReport::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "data",
                    |m: &DeviceSendFeatureReport| { &m.data },
                    |m: &mut DeviceSendFeatureReport| { &mut m.data },
                    DeviceSendFeatureReport::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceSendFeatureReport>(
                    "CHIDMessageToRemote.DeviceSendFeatureReport",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceSendFeatureReport {
            static instance: ::protobuf::rt::Lazy<DeviceSendFeatureReport> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceSendFeatureReport::new)
        }
    }

    impl ::protobuf::Clear for DeviceSendFeatureReport {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.data.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceSendFeatureReport {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceSendFeatureReport {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceGetFeatureReport {
        // message fields
        device: ::std::option::Option<u32>,
        report_number: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        length: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceGetFeatureReport {
        fn default() -> &'a DeviceGetFeatureReport {
            <DeviceGetFeatureReport as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceGetFeatureReport {
        pub fn new() -> DeviceGetFeatureReport {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional bytes report_number = 2;

        pub fn get_report_number(&self) -> &[u8] {
            match self.report_number.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_report_number(&mut self) {
            self.report_number.clear();
        }

        pub fn has_report_number(&self) -> bool {
            self.report_number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_report_number(&mut self, v: ::std::vec::Vec<u8>) {
            self.report_number = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_report_number(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.report_number.is_none() {
                self.report_number.set_default();
            }
            self.report_number.as_mut().unwrap()
        }

        // Take field
        pub fn take_report_number(&mut self) -> ::std::vec::Vec<u8> {
            self.report_number.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional uint32 length = 3;

        pub fn get_length(&self) -> u32 {
            self.length.unwrap_or(0)
        }

        pub fn clear_length(&mut self) {
            self.length = ::std::option::Option::None;
        }

        pub fn has_length(&self) -> bool {
            self.length.is_some()
        }

        // Param is passed by value, moved
        pub fn set_length(&mut self, v: u32) {
            self.length = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceGetFeatureReport {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.report_number)?;
                    },
                    3 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.length = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.report_number.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            if let Some(v) = self.length {
                my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.report_number.as_ref() {
                os.write_bytes(2, v)?;
            }
            if let Some(v) = self.length {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceGetFeatureReport {
            DeviceGetFeatureReport::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceGetFeatureReport| { &m.device },
                    |m: &mut DeviceGetFeatureReport| { &mut m.device },
                    DeviceGetFeatureReport::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "report_number",
                    |m: &DeviceGetFeatureReport| { &m.report_number },
                    |m: &mut DeviceGetFeatureReport| { &mut m.report_number },
                    DeviceGetFeatureReport::get_report_number,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "length",
                    |m: &DeviceGetFeatureReport| { &m.length },
                    |m: &mut DeviceGetFeatureReport| { &mut m.length },
                    DeviceGetFeatureReport::get_length,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceGetFeatureReport>(
                    "CHIDMessageToRemote.DeviceGetFeatureReport",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceGetFeatureReport {
            static instance: ::protobuf::rt::Lazy<DeviceGetFeatureReport> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceGetFeatureReport::new)
        }
    }

    impl ::protobuf::Clear for DeviceGetFeatureReport {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.report_number.clear();
            self.length = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceGetFeatureReport {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceGetFeatureReport {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceGetVendorString {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceGetVendorString {
        fn default() -> &'a DeviceGetVendorString {
            <DeviceGetVendorString as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceGetVendorString {
        pub fn new() -> DeviceGetVendorString {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceGetVendorString {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceGetVendorString {
            DeviceGetVendorString::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceGetVendorString| { &m.device },
                    |m: &mut DeviceGetVendorString| { &mut m.device },
                    DeviceGetVendorString::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceGetVendorString>(
                    "CHIDMessageToRemote.DeviceGetVendorString",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceGetVendorString {
            static instance: ::protobuf::rt::Lazy<DeviceGetVendorString> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceGetVendorString::new)
        }
    }

    impl ::protobuf::Clear for DeviceGetVendorString {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceGetVendorString {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceGetVendorString {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceGetProductString {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceGetProductString {
        fn default() -> &'a DeviceGetProductString {
            <DeviceGetProductString as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceGetProductString {
        pub fn new() -> DeviceGetProductString {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceGetProductString {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceGetProductString {
            DeviceGetProductString::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceGetProductString| { &m.device },
                    |m: &mut DeviceGetProductString| { &mut m.device },
                    DeviceGetProductString::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceGetProductString>(
                    "CHIDMessageToRemote.DeviceGetProductString",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceGetProductString {
            static instance: ::protobuf::rt::Lazy<DeviceGetProductString> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceGetProductString::new)
        }
    }

    impl ::protobuf::Clear for DeviceGetProductString {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceGetProductString {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceGetProductString {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceGetSerialNumberString {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceGetSerialNumberString {
        fn default() -> &'a DeviceGetSerialNumberString {
            <DeviceGetSerialNumberString as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceGetSerialNumberString {
        pub fn new() -> DeviceGetSerialNumberString {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceGetSerialNumberString {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceGetSerialNumberString {
            DeviceGetSerialNumberString::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceGetSerialNumberString| { &m.device },
                    |m: &mut DeviceGetSerialNumberString| { &mut m.device },
                    DeviceGetSerialNumberString::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceGetSerialNumberString>(
                    "CHIDMessageToRemote.DeviceGetSerialNumberString",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceGetSerialNumberString {
            static instance: ::protobuf::rt::Lazy<DeviceGetSerialNumberString> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceGetSerialNumberString::new)
        }
    }

    impl ::protobuf::Clear for DeviceGetSerialNumberString {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceGetSerialNumberString {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceGetSerialNumberString {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceStartInputReports {
        // message fields
        device: ::std::option::Option<u32>,
        length: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceStartInputReports {
        fn default() -> &'a DeviceStartInputReports {
            <DeviceStartInputReports as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceStartInputReports {
        pub fn new() -> DeviceStartInputReports {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional uint32 length = 2;

        pub fn get_length(&self) -> u32 {
            self.length.unwrap_or(0)
        }

        pub fn clear_length(&mut self) {
            self.length = ::std::option::Option::None;
        }

        pub fn has_length(&self) -> bool {
            self.length.is_some()
        }

        // Param is passed by value, moved
        pub fn set_length(&mut self, v: u32) {
            self.length = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceStartInputReports {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.length = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.length {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.length {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceStartInputReports {
            DeviceStartInputReports::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceStartInputReports| { &m.device },
                    |m: &mut DeviceStartInputReports| { &mut m.device },
                    DeviceStartInputReports::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "length",
                    |m: &DeviceStartInputReports| { &m.length },
                    |m: &mut DeviceStartInputReports| { &mut m.length },
                    DeviceStartInputReports::get_length,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceStartInputReports>(
                    "CHIDMessageToRemote.DeviceStartInputReports",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceStartInputReports {
            static instance: ::protobuf::rt::Lazy<DeviceStartInputReports> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceStartInputReports::new)
        }
    }

    impl ::protobuf::Clear for DeviceStartInputReports {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.length = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceStartInputReports {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceStartInputReports {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceRequestFullReport {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceRequestFullReport {
        fn default() -> &'a DeviceRequestFullReport {
            <DeviceRequestFullReport as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceRequestFullReport {
        pub fn new() -> DeviceRequestFullReport {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for DeviceRequestFullReport {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceRequestFullReport {
            DeviceRequestFullReport::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceRequestFullReport| { &m.device },
                    |m: &mut DeviceRequestFullReport| { &mut m.device },
                    DeviceRequestFullReport::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceRequestFullReport>(
                    "CHIDMessageToRemote.DeviceRequestFullReport",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceRequestFullReport {
            static instance: ::protobuf::rt::Lazy<DeviceRequestFullReport> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceRequestFullReport::new)
        }
    }

    impl ::protobuf::Clear for DeviceRequestFullReport {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceRequestFullReport {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceRequestFullReport {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceDisconnect {
        // message fields
        device: ::std::option::Option<u32>,
        disconnectMethod: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<super::EHIDDeviceDisconnectMethod>>,
        data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceDisconnect {
        fn default() -> &'a DeviceDisconnect {
            <DeviceDisconnect as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceDisconnect {
        pub fn new() -> DeviceDisconnect {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }

        // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2;

        pub fn get_disconnectMethod(&self) -> super::EHIDDeviceDisconnectMethod {
            match self.disconnectMethod {
                Some(e) => e.enum_value_or(super::EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown),
                None => super::EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown,
            }
        }

        pub fn clear_disconnectMethod(&mut self) {
            self.disconnectMethod = ::std::option::Option::None;
        }

        pub fn has_disconnectMethod(&self) -> bool {
            self.disconnectMethod.is_some()
        }

        // Param is passed by value, moved
        pub fn set_disconnectMethod(&mut self, v: super::EHIDDeviceDisconnectMethod) {
            self.disconnectMethod = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
        }

        // optional bytes data = 3;

        pub fn get_data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data.clear();
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data.set_default();
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for DeviceDisconnect {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.disconnectMethod = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    3 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.disconnectMethod {
                my_size += ::protobuf::rt::enum_or_unknown_size(2, v);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.disconnectMethod {
                os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(3, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceDisconnect {
            DeviceDisconnect::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &DeviceDisconnect| { &m.device },
                    |m: &mut DeviceDisconnect| { &mut m.device },
                    DeviceDisconnect::get_device,
                ));
                fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, super::EHIDDeviceDisconnectMethod>(
                    "disconnectMethod",
                    |m: &DeviceDisconnect| { &m.disconnectMethod },
                    |m: &mut DeviceDisconnect| { &mut m.disconnectMethod },
                    super::EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "data",
                    |m: &DeviceDisconnect| { &m.data },
                    |m: &mut DeviceDisconnect| { &mut m.data },
                    DeviceDisconnect::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceDisconnect>(
                    "CHIDMessageToRemote.DeviceDisconnect",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceDisconnect {
            static instance: ::protobuf::rt::Lazy<DeviceDisconnect> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceDisconnect::new)
        }
    }

    impl ::protobuf::Clear for DeviceDisconnect {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.disconnectMethod = ::std::option::Option::None;
            self.data.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceDisconnect {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceDisconnect {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CHIDMessageFromRemote {
    // message oneof groups
    pub command: ::std::option::Option<chidmessage_from_remote::Command>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CHIDMessageFromRemote {
    fn default() -> &'a CHIDMessageFromRemote {
        <CHIDMessageFromRemote as ::protobuf::Message>::default_instance()
    }
}

impl CHIDMessageFromRemote {
    pub fn new() -> CHIDMessageFromRemote {
        ::std::default::Default::default()
    }

    // optional .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;

    pub fn get_update_device_list(&self) -> &chidmessage_from_remote::UpdateDeviceList {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(ref v)) => v,
            _ => <chidmessage_from_remote::UpdateDeviceList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_update_device_list(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_update_device_list(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update_device_list(&mut self, v: chidmessage_from_remote::UpdateDeviceList) {
        self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update_device_list(&mut self) -> &mut chidmessage_from_remote::UpdateDeviceList {
        if let ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(chidmessage_from_remote::UpdateDeviceList::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update_device_list(&mut self) -> chidmessage_from_remote::UpdateDeviceList {
        if self.has_update_device_list() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_from_remote::UpdateDeviceList::new()
        }
    }

    // optional .CHIDMessageFromRemote.RequestResponse response = 2;

    pub fn get_response(&self) -> &chidmessage_from_remote::RequestResponse {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::response(ref v)) => v,
            _ => <chidmessage_from_remote::RequestResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_response(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: chidmessage_from_remote::RequestResponse) {
        self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response(&mut self) -> &mut chidmessage_from_remote::RequestResponse {
        if let ::std::option::Option::Some(chidmessage_from_remote::Command::response(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::response(chidmessage_from_remote::RequestResponse::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response(&mut self) -> chidmessage_from_remote::RequestResponse {
        if self.has_response() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_from_remote::Command::response(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_from_remote::RequestResponse::new()
        }
    }

    // optional .CHIDMessageFromRemote.DeviceInputReports reports = 3;

    pub fn get_reports(&self) -> &chidmessage_from_remote::DeviceInputReports {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::reports(ref v)) => v,
            _ => <chidmessage_from_remote::DeviceInputReports as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reports(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_reports(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::reports(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reports(&mut self, v: chidmessage_from_remote::DeviceInputReports) {
        self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::reports(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reports(&mut self) -> &mut chidmessage_from_remote::DeviceInputReports {
        if let ::std::option::Option::Some(chidmessage_from_remote::Command::reports(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::reports(chidmessage_from_remote::DeviceInputReports::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::reports(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reports(&mut self) -> chidmessage_from_remote::DeviceInputReports {
        if self.has_reports() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_from_remote::Command::reports(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_from_remote::DeviceInputReports::new()
        }
    }

    // optional .CHIDMessageFromRemote.CloseDevice close_device = 4;

    pub fn get_close_device(&self) -> &chidmessage_from_remote::CloseDevice {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(ref v)) => v,
            _ => <chidmessage_from_remote::CloseDevice as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_close_device(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_close_device(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_device(&mut self, v: chidmessage_from_remote::CloseDevice) {
        self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_device(&mut self) -> &mut chidmessage_from_remote::CloseDevice {
        if let ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(chidmessage_from_remote::CloseDevice::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_device(&mut self) -> chidmessage_from_remote::CloseDevice {
        if self.has_close_device() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_from_remote::CloseDevice::new()
        }
    }

    // optional .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;

    pub fn get_close_all_devices(&self) -> &chidmessage_from_remote::CloseAllDevices {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(ref v)) => v,
            _ => <chidmessage_from_remote::CloseAllDevices as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_close_all_devices(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_close_all_devices(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_all_devices(&mut self, v: chidmessage_from_remote::CloseAllDevices) {
        self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_all_devices(&mut self) -> &mut chidmessage_from_remote::CloseAllDevices {
        if let ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(chidmessage_from_remote::CloseAllDevices::new()));
        }
        match self.command {
            ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_all_devices(&mut self) -> chidmessage_from_remote::CloseAllDevices {
        if self.has_close_all_devices() {
            match self.command.take() {
                ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(v)) => v,
                _ => panic!(),
            }
        } else {
            chidmessage_from_remote::CloseAllDevices::new()
        }
    }
}

impl ::protobuf::Message for CHIDMessageFromRemote {
    fn is_initialized(&self) -> bool {
        if let Some(chidmessage_from_remote::Command::update_device_list(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_from_remote::Command::response(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_from_remote::Command::reports(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_from_remote::Command::close_device(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(chidmessage_from_remote::Command::close_all_devices(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::update_device_list(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::response(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::reports(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_device(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(chidmessage_from_remote::Command::close_all_devices(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &chidmessage_from_remote::Command::update_device_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_from_remote::Command::response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_from_remote::Command::reports(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_from_remote::Command::close_device(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &chidmessage_from_remote::Command::close_all_devices(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &chidmessage_from_remote::Command::update_device_list(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &chidmessage_from_remote::Command::response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &chidmessage_from_remote::Command::reports(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &chidmessage_from_remote::Command::close_device(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &chidmessage_from_remote::Command::close_all_devices(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CHIDMessageFromRemote {
        CHIDMessageFromRemote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_from_remote::UpdateDeviceList>(
                "update_device_list",
                CHIDMessageFromRemote::has_update_device_list,
                CHIDMessageFromRemote::get_update_device_list,
                CHIDMessageFromRemote::mut_update_device_list,
                CHIDMessageFromRemote::set_update_device_list,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_from_remote::RequestResponse>(
                "response",
                CHIDMessageFromRemote::has_response,
                CHIDMessageFromRemote::get_response,
                CHIDMessageFromRemote::mut_response,
                CHIDMessageFromRemote::set_response,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_from_remote::DeviceInputReports>(
                "reports",
                CHIDMessageFromRemote::has_reports,
                CHIDMessageFromRemote::get_reports,
                CHIDMessageFromRemote::mut_reports,
                CHIDMessageFromRemote::set_reports,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_from_remote::CloseDevice>(
                "close_device",
                CHIDMessageFromRemote::has_close_device,
                CHIDMessageFromRemote::get_close_device,
                CHIDMessageFromRemote::mut_close_device,
                CHIDMessageFromRemote::set_close_device,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, chidmessage_from_remote::CloseAllDevices>(
                "close_all_devices",
                CHIDMessageFromRemote::has_close_all_devices,
                CHIDMessageFromRemote::get_close_all_devices,
                CHIDMessageFromRemote::mut_close_all_devices,
                CHIDMessageFromRemote::set_close_all_devices,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CHIDMessageFromRemote>(
                "CHIDMessageFromRemote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CHIDMessageFromRemote {
        static instance: ::protobuf::rt::Lazy<CHIDMessageFromRemote> = ::protobuf::rt::Lazy::INIT;
        instance.get(CHIDMessageFromRemote::new)
    }
}

impl ::protobuf::Clear for CHIDMessageFromRemote {
    fn clear(&mut self) {
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CHIDMessageFromRemote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHIDMessageFromRemote {
}

/// Nested message and enums of message `CHIDMessageFromRemote`
pub mod chidmessage_from_remote {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Command {
        update_device_list(UpdateDeviceList),
        response(RequestResponse),
        reports(DeviceInputReports),
        close_device(CloseDevice),
        close_all_devices(CloseAllDevices),
    }

    impl ::protobuf::Oneof for Command {
    }
    #[derive(PartialEq,Clone,Default)]
    pub struct UpdateDeviceList {
        // message fields
        pub devices: ::protobuf::RepeatedField<super::CHIDDeviceInfo>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a UpdateDeviceList {
        fn default() -> &'a UpdateDeviceList {
            <UpdateDeviceList as ::protobuf::Message>::default_instance()
        }
    }

    impl UpdateDeviceList {
        pub fn new() -> UpdateDeviceList {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for UpdateDeviceList {
        fn is_initialized(&self) -> bool {
            for v in &self.devices {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.devices)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            for value in &self.devices {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            for v in &self.devices {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> UpdateDeviceList {
            UpdateDeviceList::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<super::CHIDDeviceInfo>>(
                    "devices",
                    |m: &UpdateDeviceList| { &m.devices },
                    |m: &mut UpdateDeviceList| { &mut m.devices },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateDeviceList>(
                    "CHIDMessageFromRemote.UpdateDeviceList",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static UpdateDeviceList {
            static instance: ::protobuf::rt::Lazy<UpdateDeviceList> = ::protobuf::rt::Lazy::INIT;
            instance.get(UpdateDeviceList::new)
        }
    }

    impl ::protobuf::Clear for UpdateDeviceList {
        fn clear(&mut self) {
            self.devices.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for UpdateDeviceList {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for UpdateDeviceList {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct RequestResponse {
        // message fields
        request_id: ::std::option::Option<u32>,
        result: ::std::option::Option<i32>,
        data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a RequestResponse {
        fn default() -> &'a RequestResponse {
            <RequestResponse as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestResponse {
        pub fn new() -> RequestResponse {
            ::std::default::Default::default()
        }

        // optional uint32 request_id = 1;

        pub fn get_request_id(&self) -> u32 {
            self.request_id.unwrap_or(0)
        }

        pub fn clear_request_id(&mut self) {
            self.request_id = ::std::option::Option::None;
        }

        pub fn has_request_id(&self) -> bool {
            self.request_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_request_id(&mut self, v: u32) {
            self.request_id = ::std::option::Option::Some(v);
        }

        // optional int32 result = 2;

        pub fn get_result(&self) -> i32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: i32) {
            self.result = ::std::option::Option::Some(v);
        }

        // optional bytes data = 3;

        pub fn get_data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data.clear();
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data.set_default();
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for RequestResponse {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.request_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.result = ::std::option::Option::Some(is.read_int32()?);
                    },
                    3 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.request_id {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.result {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.request_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.result {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(3, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> RequestResponse {
            RequestResponse::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "request_id",
                    |m: &RequestResponse| { &m.request_id },
                    |m: &mut RequestResponse| { &mut m.request_id },
                    RequestResponse::get_request_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "result",
                    |m: &RequestResponse| { &m.result },
                    |m: &mut RequestResponse| { &mut m.result },
                    RequestResponse::get_result,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "data",
                    |m: &RequestResponse| { &m.data },
                    |m: &mut RequestResponse| { &mut m.data },
                    RequestResponse::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestResponse>(
                    "CHIDMessageFromRemote.RequestResponse",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static RequestResponse {
            static instance: ::protobuf::rt::Lazy<RequestResponse> = ::protobuf::rt::Lazy::INIT;
            instance.get(RequestResponse::new)
        }
    }

    impl ::protobuf::Clear for RequestResponse {
        fn clear(&mut self) {
            self.request_id = ::std::option::Option::None;
            self.result = ::std::option::Option::None;
            self.data.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for RequestResponse {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RequestResponse {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct DeviceInputReports {
        // message fields
        pub device_reports: ::protobuf::RepeatedField<device_input_reports::DeviceInputReport>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a DeviceInputReports {
        fn default() -> &'a DeviceInputReports {
            <DeviceInputReports as ::protobuf::Message>::default_instance()
        }
    }

    impl DeviceInputReports {
        pub fn new() -> DeviceInputReports {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for DeviceInputReports {
        fn is_initialized(&self) -> bool {
            for v in &self.device_reports {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.device_reports)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            for value in &self.device_reports {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            for v in &self.device_reports {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> DeviceInputReports {
            DeviceInputReports::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<device_input_reports::DeviceInputReport>>(
                    "device_reports",
                    |m: &DeviceInputReports| { &m.device_reports },
                    |m: &mut DeviceInputReports| { &mut m.device_reports },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceInputReports>(
                    "CHIDMessageFromRemote.DeviceInputReports",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static DeviceInputReports {
            static instance: ::protobuf::rt::Lazy<DeviceInputReports> = ::protobuf::rt::Lazy::INIT;
            instance.get(DeviceInputReports::new)
        }
    }

    impl ::protobuf::Clear for DeviceInputReports {
        fn clear(&mut self) {
            self.device_reports.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for DeviceInputReports {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeviceInputReports {
    }

    /// Nested message and enums of message `DeviceInputReports`
    pub mod device_input_reports {
        #[derive(PartialEq,Clone,Default)]
        pub struct DeviceInputReport {
            // message fields
            device: ::std::option::Option<u32>,
            pub reports: ::protobuf::RepeatedField<super::super::CHIDDeviceInputReport>,
            // special fields
            pub unknown_fields: ::protobuf::UnknownFields,
            pub cached_size: ::protobuf::rt::CachedSize,
        }

        impl<'a> ::std::default::Default for &'a DeviceInputReport {
            fn default() -> &'a DeviceInputReport {
                <DeviceInputReport as ::protobuf::Message>::default_instance()
            }
        }

        impl DeviceInputReport {
            pub fn new() -> DeviceInputReport {
                ::std::default::Default::default()
            }

            // optional uint32 device = 1;

            pub fn get_device(&self) -> u32 {
                self.device.unwrap_or(0)
            }

            pub fn clear_device(&mut self) {
                self.device = ::std::option::Option::None;
            }

            pub fn has_device(&self) -> bool {
                self.device.is_some()
            }

            // Param is passed by value, moved
            pub fn set_device(&mut self, v: u32) {
                self.device = ::std::option::Option::Some(v);
            }
        }

        impl ::protobuf::Message for DeviceInputReport {
            fn is_initialized(&self) -> bool {
                for v in &self.reports {
                    if !v.is_initialized() {
                        return false;
                    }
                };
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
                while !is.eof()? {
                    let (field_number, wire_type) = is.read_tag_unpack()?;
                    match field_number {
                        1 => {
                            if wire_type != ::protobuf::wire_format::WireTypeVarint {
                                return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                            }
                            self.device = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        2 => {
                            ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.reports)?;
                        },
                        _ => {
                            ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u32 {
                let mut my_size = 0;
                if let Some(v) = self.device {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                }
                for value in &self.reports {
                    let len = value.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                };
                my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
                self.cached_size.set(my_size);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
                if let Some(v) = self.device {
                    os.write_uint32(1, v)?;
                }
                for v in &self.reports {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                };
                os.write_unknown_fields(self.get_unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn get_cached_size(&self) -> u32 {
                self.cached_size.get()
            }

            fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
                &self.unknown_fields
            }

            fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
                &mut self.unknown_fields
            }

            fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
                Self::descriptor_static()
            }

            fn new() -> DeviceInputReport {
                DeviceInputReport::new()
            }

            fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
                descriptor.get(|| {
                    let mut fields = ::std::vec::Vec::new();
                    fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                        "device",
                        |m: &DeviceInputReport| { &m.device },
                        |m: &mut DeviceInputReport| { &mut m.device },
                        DeviceInputReport::get_device,
                    ));
                    fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<super::super::CHIDDeviceInputReport>>(
                        "reports",
                        |m: &DeviceInputReport| { &m.reports },
                        |m: &mut DeviceInputReport| { &mut m.reports },
                    ));
                    ::protobuf::reflect::MessageDescriptor::new::<DeviceInputReport>(
                        "CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport",
                        fields,
                        super::super::file_descriptor_proto()
                    )
                })
            }

            fn default_instance() -> &'static DeviceInputReport {
                static instance: ::protobuf::rt::Lazy<DeviceInputReport> = ::protobuf::rt::Lazy::INIT;
                instance.get(DeviceInputReport::new)
            }
        }

        impl ::protobuf::Clear for DeviceInputReport {
            fn clear(&mut self) {
                self.device = ::std::option::Option::None;
                self.reports.clear();
                self.unknown_fields.clear();
            }
        }

        impl ::std::fmt::Debug for DeviceInputReport {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for DeviceInputReport {
        }
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct CloseDevice {
        // message fields
        device: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a CloseDevice {
        fn default() -> &'a CloseDevice {
            <CloseDevice as ::protobuf::Message>::default_instance()
        }
    }

    impl CloseDevice {
        pub fn new() -> CloseDevice {
            ::std::default::Default::default()
        }

        // optional uint32 device = 1;

        pub fn get_device(&self) -> u32 {
            self.device.unwrap_or(0)
        }

        pub fn clear_device(&mut self) {
            self.device = ::std::option::Option::None;
        }

        pub fn has_device(&self) -> bool {
            self.device.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device(&mut self, v: u32) {
            self.device = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for CloseDevice {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.device = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.device {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.device {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> CloseDevice {
            CloseDevice::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "device",
                    |m: &CloseDevice| { &m.device },
                    |m: &mut CloseDevice| { &mut m.device },
                    CloseDevice::get_device,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloseDevice>(
                    "CHIDMessageFromRemote.CloseDevice",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static CloseDevice {
            static instance: ::protobuf::rt::Lazy<CloseDevice> = ::protobuf::rt::Lazy::INIT;
            instance.get(CloseDevice::new)
        }
    }

    impl ::protobuf::Clear for CloseDevice {
        fn clear(&mut self) {
            self.device = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for CloseDevice {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CloseDevice {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct CloseAllDevices {
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a CloseAllDevices {
        fn default() -> &'a CloseAllDevices {
            <CloseAllDevices as ::protobuf::Message>::default_instance()
        }
    }

    impl CloseAllDevices {
        pub fn new() -> CloseAllDevices {
            ::std::default::Default::default()
        }
    }

    impl ::protobuf::Message for CloseAllDevices {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> CloseAllDevices {
            CloseAllDevices::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CloseAllDevices>(
                    "CHIDMessageFromRemote.CloseAllDevices",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static CloseAllDevices {
            static instance: ::protobuf::rt::Lazy<CloseAllDevices> = ::protobuf::rt::Lazy::INIT;
            instance.get(CloseAllDevices::new)
        }
    }

    impl ::protobuf::Clear for CloseAllDevices {
        fn clear(&mut self) {
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for CloseAllDevices {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CloseAllDevices {
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EHIDDeviceLocation {
    k_EDeviceLocationLocal = 0,
    k_EDeviceLocationRemote = 2,
    k_EDeviceLocationAny = 3,
}

impl ::protobuf::ProtobufEnum for EHIDDeviceLocation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EHIDDeviceLocation> {
        match value {
            0 => ::std::option::Option::Some(EHIDDeviceLocation::k_EDeviceLocationLocal),
            2 => ::std::option::Option::Some(EHIDDeviceLocation::k_EDeviceLocationRemote),
            3 => ::std::option::Option::Some(EHIDDeviceLocation::k_EDeviceLocationAny),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EHIDDeviceLocation] = &[
            EHIDDeviceLocation::k_EDeviceLocationLocal,
            EHIDDeviceLocation::k_EDeviceLocationRemote,
            EHIDDeviceLocation::k_EDeviceLocationAny,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EHIDDeviceLocation>("EHIDDeviceLocation", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EHIDDeviceLocation {
    fn default() -> Self {
        EHIDDeviceLocation::k_EDeviceLocationLocal
    }
}

impl ::protobuf::reflect::ProtobufValue for EHIDDeviceLocation {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EHIDDeviceDisconnectMethod {
    k_EDeviceDisconnectMethodUnknown = 0,
    k_EDeviceDisconnectMethodBluetooth = 1,
    k_EDeviceDisconnectMethodFeatureReport = 2,
    k_EDeviceDisconnectMethodOutputReport = 3,
}

impl ::protobuf::ProtobufEnum for EHIDDeviceDisconnectMethod {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EHIDDeviceDisconnectMethod> {
        match value {
            0 => ::std::option::Option::Some(EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown),
            1 => ::std::option::Option::Some(EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodBluetooth),
            2 => ::std::option::Option::Some(EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodFeatureReport),
            3 => ::std::option::Option::Some(EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodOutputReport),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EHIDDeviceDisconnectMethod] = &[
            EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown,
            EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodBluetooth,
            EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodFeatureReport,
            EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodOutputReport,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EHIDDeviceDisconnectMethod>("EHIDDeviceDisconnectMethod", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EHIDDeviceDisconnectMethod {
    fn default() -> Self {
        EHIDDeviceDisconnectMethod::k_EDeviceDisconnectMethodUnknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EHIDDeviceDisconnectMethod {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1esteammessages_hiddevices.proto\"\x94\x05\n\x0eCHIDDeviceInfo\x12G\
    \n\x08location\x18\x01\x20\x01(\x0e2\x13.EHIDDeviceLocation:\x16k_EDevic\
    eLocationLocalR\x08location\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pat\
    h\x12\x1b\n\tvendor_id\x18\x03\x20\x01(\rR\x08vendorId\x12\x1d\n\nproduc\
    t_id\x18\x04\x20\x01(\rR\tproductId\x12#\n\rserial_number\x18\x05\x20\
    \x01(\tR\x0cserialNumber\x12%\n\x0erelease_number\x18\x06\x20\x01(\rR\rr\
    eleaseNumber\x12/\n\x13manufacturer_string\x18\x07\x20\x01(\tR\x12manufa\
    cturerString\x12%\n\x0eproduct_string\x18\x08\x20\x01(\tR\rproductString\
    \x12\x1d\n\nusage_page\x18\t\x20\x01(\rR\tusagePage\x12\x14\n\x05usage\
    \x18\n\x20\x01(\rR\x05usage\x12-\n\x10interface_number\x18\x0b\x20\x01(\
    \x05:\x02-1R\x0finterfaceNumber\x12\x1a\n\x06ostype\x18\x0c\x20\x01(\x05\
    :\x02-1R\x06ostype\x12,\n\x12is_generic_gamepad\x18\r\x20\x01(\x08R\x10i\
    sGenericGamepad\x12.\n\x13is_generic_joystick\x18\x0e\x20\x01(\x08R\x11i\
    sGenericJoystick\x12\x1b\n\tcaps_bits\x18\x0f\x20\x01(\rR\x08capsBits\
    \x12\x1d\n\nsession_id\x18\x10\x20\x01(\rR\tsessionId\x12+\n\x0feControl\
    lerType\x18\x11\x20\x01(\r:\x010R\x0feControllerType\"\xb1\x01\n\x15CHID\
    DeviceInputReport\x12\x1f\n\x0bfull_report\x18\x01\x20\x01(\x0cR\nfullRe\
    port\x12!\n\x0cdelta_report\x18\x02\x20\x01(\x0cR\x0bdeltaReport\x12*\n\
    \x11delta_report_size\x18\x03\x20\x01(\rR\x0fdeltaReportSize\x12(\n\x10d\
    elta_report_crc\x18\x04\x20\x01(\rR\x0edeltaReportCrc\"\x93\x10\n\x13CHI\
    DMessageToRemote\x12\x1d\n\nrequest_id\x18\x01\x20\x01(\rR\trequestId\
    \x12B\n\x0bdevice_open\x18\x02\x20\x01(\x0b2\x1f.CHIDMessageToRemote.Dev\
    iceOpenH\0R\ndeviceOpen\x12E\n\x0cdevice_close\x18\x03\x20\x01(\x0b2\x20\
    .CHIDMessageToRemote.DeviceCloseH\0R\x0bdeviceClose\x12E\n\x0cdevice_wri\
    te\x18\x04\x20\x01(\x0b2\x20.CHIDMessageToRemote.DeviceWriteH\0R\x0bdevi\
    ceWrite\x12B\n\x0bdevice_read\x18\x05\x20\x01(\x0b2\x1f.CHIDMessageToRem\
    ote.DeviceReadH\0R\ndeviceRead\x12k\n\x1adevice_send_feature_report\x18\
    \x06\x20\x01(\x0b2,.CHIDMessageToRemote.DeviceSendFeatureReportH\0R\x17d\
    eviceSendFeatureReport\x12h\n\x19device_get_feature_report\x18\x07\x20\
    \x01(\x0b2+.CHIDMessageToRemote.DeviceGetFeatureReportH\0R\x16deviceGetF\
    eatureReport\x12e\n\x18device_get_vendor_string\x18\x08\x20\x01(\x0b2*.C\
    HIDMessageToRemote.DeviceGetVendorStringH\0R\x15deviceGetVendorString\
    \x12h\n\x19device_get_product_string\x18\t\x20\x01(\x0b2+.CHIDMessageToR\
    emote.DeviceGetProductStringH\0R\x16deviceGetProductString\x12x\n\x1fdev\
    ice_get_serial_number_string\x18\n\x20\x01(\x0b20.CHIDMessageToRemote.De\
    viceGetSerialNumberStringH\0R\x1bdeviceGetSerialNumberString\x12k\n\x1ad\
    evice_start_input_reports\x18\x0b\x20\x01(\x0b2,.CHIDMessageToRemote.Dev\
    iceStartInputReportsH\0R\x17deviceStartInputReports\x12k\n\x1adevice_req\
    uest_full_report\x18\x0c\x20\x01(\x0b2,.CHIDMessageToRemote.DeviceReques\
    tFullReportH\0R\x17deviceRequestFullReport\x12T\n\x11device_disconnect\
    \x18\r\x20\x01(\x0b2%.CHIDMessageToRemote.DeviceDisconnectH\0R\x10device\
    Disconnect\x1a1\n\nDeviceOpen\x12#\n\x04info\x18\x01\x20\x01(\x0b2\x0f.C\
    HIDDeviceInfoR\x04info\x1a%\n\x0bDeviceClose\x12\x16\n\x06device\x18\x01\
    \x20\x01(\rR\x06device\x1a9\n\x0bDeviceWrite\x12\x16\n\x06device\x18\x01\
    \x20\x01(\rR\x06device\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\
    \x1a[\n\nDeviceRead\x12\x16\n\x06device\x18\x01\x20\x01(\rR\x06device\
    \x12\x16\n\x06length\x18\x02\x20\x01(\rR\x06length\x12\x1d\n\ntimeout_ms\
    \x18\x03\x20\x01(\x05R\ttimeoutMs\x1aE\n\x17DeviceSendFeatureReport\x12\
    \x16\n\x06device\x18\x01\x20\x01(\rR\x06device\x12\x12\n\x04data\x18\x02\
    \x20\x01(\x0cR\x04data\x1am\n\x16DeviceGetFeatureReport\x12\x16\n\x06dev\
    ice\x18\x01\x20\x01(\rR\x06device\x12#\n\rreport_number\x18\x02\x20\x01(\
    \x0cR\x0creportNumber\x12\x16\n\x06length\x18\x03\x20\x01(\rR\x06length\
    \x1a/\n\x15DeviceGetVendorString\x12\x16\n\x06device\x18\x01\x20\x01(\rR\
    \x06device\x1a0\n\x16DeviceGetProductString\x12\x16\n\x06device\x18\x01\
    \x20\x01(\rR\x06device\x1a5\n\x1bDeviceGetSerialNumberString\x12\x16\n\
    \x06device\x18\x01\x20\x01(\rR\x06device\x1aI\n\x17DeviceStartInputRepor\
    ts\x12\x16\n\x06device\x18\x01\x20\x01(\rR\x06device\x12\x16\n\x06length\
    \x18\x02\x20\x01(\rR\x06length\x1a1\n\x17DeviceRequestFullReport\x12\x16\
    \n\x06device\x18\x01\x20\x01(\rR\x06device\x1a\xa9\x01\n\x10DeviceDiscon\
    nect\x12\x16\n\x06device\x18\x01\x20\x01(\rR\x06device\x12i\n\x10disconn\
    ectMethod\x18\x02\x20\x01(\x0e2\x1b.EHIDDeviceDisconnectMethod:\x20k_EDe\
    viceDisconnectMethodUnknownR\x10disconnectMethod\x12\x12\n\x04data\x18\
    \x03\x20\x01(\x0cR\x04dataB\t\n\x07command\"\xd8\x06\n\x15CHIDMessageFro\
    mRemote\x12W\n\x12update_device_list\x18\x01\x20\x01(\x0b2'.CHIDMessageF\
    romRemote.UpdateDeviceListH\0R\x10updateDeviceList\x12D\n\x08response\
    \x18\x02\x20\x01(\x0b2&.CHIDMessageFromRemote.RequestResponseH\0R\x08res\
    ponse\x12E\n\x07reports\x18\x03\x20\x01(\x0b2).CHIDMessageFromRemote.Dev\
    iceInputReportsH\0R\x07reports\x12G\n\x0cclose_device\x18\x04\x20\x01(\
    \x0b2\".CHIDMessageFromRemote.CloseDeviceH\0R\x0bcloseDevice\x12T\n\x11c\
    lose_all_devices\x18\x05\x20\x01(\x0b2&.CHIDMessageFromRemote.CloseAllDe\
    vicesH\0R\x0fcloseAllDevices\x1a=\n\x10UpdateDeviceList\x12)\n\x07device\
    s\x18\x01\x20\x03(\x0b2\x0f.CHIDDeviceInfoR\x07devices\x1a\\\n\x0fReques\
    tResponse\x12\x1d\n\nrequest_id\x18\x01\x20\x01(\rR\trequestId\x12\x16\n\
    \x06result\x18\x02\x20\x01(\x05R\x06result\x12\x12\n\x04data\x18\x03\x20\
    \x01(\x0cR\x04data\x1a\xd7\x01\n\x12DeviceInputReports\x12b\n\x0edevice_\
    reports\x18\x01\x20\x03(\x0b2;.CHIDMessageFromRemote.DeviceInputReports.\
    DeviceInputReportR\rdeviceReports\x1a]\n\x11DeviceInputReport\x12\x16\n\
    \x06device\x18\x01\x20\x01(\rR\x06device\x120\n\x07reports\x18\x02\x20\
    \x03(\x0b2\x16.CHIDDeviceInputReportR\x07reports\x1a%\n\x0bCloseDevice\
    \x12\x16\n\x06device\x18\x01\x20\x01(\rR\x06device\x1a\x11\n\x0fCloseAll\
    DevicesB\t\n\x07command*g\n\x12EHIDDeviceLocation\x12\x1a\n\x16k_EDevice\
    LocationLocal\x10\0\x12\x1b\n\x17k_EDeviceLocationRemote\x10\x02\x12\x18\
    \n\x14k_EDeviceLocationAny\x10\x03*\xc1\x01\n\x1aEHIDDeviceDisconnectMet\
    hod\x12$\n\x20k_EDeviceDisconnectMethodUnknown\x10\0\x12&\n\"k_EDeviceDi\
    sconnectMethodBluetooth\x10\x01\x12*\n&k_EDeviceDisconnectMethodFeatureR\
    eport\x10\x02\x12)\n%k_EDeviceDisconnectMethodOutputReport\x10\x03B\x05H\
    \x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
