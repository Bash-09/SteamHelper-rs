// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_linkfilter.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Request {
    // message fields
    hit_type: ::std::option::Option<u32>,
    count: ::std::option::Option<u32>,
    start: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Request {
        <CCommunity_GetLinkFilterHashPrefixes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;


    pub fn get_hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }
    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;


    pub fn get_count(&self) -> u32 {
        self.count.unwrap_or(0)
    }
    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;


    pub fn get_start(&self) -> u64 {
        self.start.unwrap_or(0)
    }
    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hit_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        CCommunity_GetLinkFilterHashPrefixes_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hit_type",
                |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.hit_type },
                |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.hit_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.count },
                |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start",
                |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.start },
                |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.start },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterHashPrefixes_Request>(
                "CCommunity_GetLinkFilterHashPrefixes_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterHashPrefixes_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterHashPrefixes_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Response {
    // message fields
    pub hash_prefixes: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Response {
        <CCommunity_GetLinkFilterHashPrefixes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        ::std::default::Default::default()
    }

    // repeated uint32 hash_prefixes = 1;


    pub fn get_hash_prefixes(&self) -> &[u32] {
        &self.hash_prefixes
    }
    pub fn clear_hash_prefixes(&mut self) {
        self.hash_prefixes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_prefixes(&mut self, v: ::std::vec::Vec<u32>) {
        self.hash_prefixes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hash_prefixes(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.hash_prefixes
    }

    // Take field
    pub fn take_hash_prefixes(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.hash_prefixes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.hash_prefixes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.hash_prefixes {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.hash_prefixes {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        CCommunity_GetLinkFilterHashPrefixes_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hash_prefixes",
                |m: &CCommunity_GetLinkFilterHashPrefixes_Response| { &m.hash_prefixes },
                |m: &mut CCommunity_GetLinkFilterHashPrefixes_Response| { &mut m.hash_prefixes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterHashPrefixes_Response>(
                "CCommunity_GetLinkFilterHashPrefixes_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterHashPrefixes_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterHashPrefixes_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn clear(&mut self) {
        self.hash_prefixes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterHashes_Request {
    // message fields
    hit_type: ::std::option::Option<u32>,
    count: ::std::option::Option<u32>,
    start: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Request {
        <CCommunity_GetLinkFilterHashes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;


    pub fn get_hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }
    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;


    pub fn get_count(&self) -> u32 {
        self.count.unwrap_or(0)
    }
    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;


    pub fn get_start(&self) -> u64 {
        self.start.unwrap_or(0)
    }
    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashes_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hit_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Request {
        CCommunity_GetLinkFilterHashes_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hit_type",
                |m: &CCommunity_GetLinkFilterHashes_Request| { &m.hit_type },
                |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.hit_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &CCommunity_GetLinkFilterHashes_Request| { &m.count },
                |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start",
                |m: &CCommunity_GetLinkFilterHashes_Request| { &m.start },
                |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.start },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterHashes_Request>(
                "CCommunity_GetLinkFilterHashes_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterHashes_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterHashes_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterHashes_Request {
    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterHashes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterHashes_Response {
    // message fields
    pub hashes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Response {
        <CCommunity_GetLinkFilterHashes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Response {
        ::std::default::Default::default()
    }

    // repeated bytes hashes = 1;


    pub fn get_hashes(&self) -> &[::std::vec::Vec<u8>] {
        &self.hashes
    }
    pub fn clear_hashes(&mut self) {
        self.hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hashes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.hashes
    }

    // Take field
    pub fn take_hashes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.hashes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashes_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.hashes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.hashes {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.hashes {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Response {
        CCommunity_GetLinkFilterHashes_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hashes",
                |m: &CCommunity_GetLinkFilterHashes_Response| { &m.hashes },
                |m: &mut CCommunity_GetLinkFilterHashes_Response| { &mut m.hashes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterHashes_Response>(
                "CCommunity_GetLinkFilterHashes_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterHashes_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterHashes_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterHashes_Response {
    fn clear(&mut self) {
        self.hashes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterHashes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterListVersion_Request {
    // message fields
    hit_type: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Request {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Request {
        <CCommunity_GetLinkFilterListVersion_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Request {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;


    pub fn get_hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }
    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterListVersion_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hit_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        CCommunity_GetLinkFilterListVersion_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hit_type",
                |m: &CCommunity_GetLinkFilterListVersion_Request| { &m.hit_type },
                |m: &mut CCommunity_GetLinkFilterListVersion_Request| { &mut m.hit_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterListVersion_Request>(
                "CCommunity_GetLinkFilterListVersion_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterListVersion_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterListVersion_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterListVersion_Request {
    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterListVersion_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetLinkFilterListVersion_Response {
    // message fields
    version: ::protobuf::SingularField<::std::string::String>,
    count: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Response {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Response {
        <CCommunity_GetLinkFilterListVersion_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Response {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        ::std::default::Default::default()
    }

    // optional string version = 1;


    pub fn get_version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 count = 2;


    pub fn get_count(&self) -> u64 {
        self.count.unwrap_or(0)
    }
    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterListVersion_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.version.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.count {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        CCommunity_GetLinkFilterListVersion_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.version },
                |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.count },
                |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetLinkFilterListVersion_Response>(
                "CCommunity_GetLinkFilterListVersion_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetLinkFilterListVersion_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetLinkFilterListVersion_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetLinkFilterListVersion_Response {
    fn clear(&mut self) {
        self.version.clear();
        self.count = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetLinkFilterListVersion_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_linkfilter.steamclient.proto\x1a,steammessages_unified_\
    base.steamclient.proto\"\xb4\x02\n,CCommunity_GetLinkFilterHashPrefixes_\
    Request\x12P\n\x08hit_type\x18\x01\x20\x01(\rR\x07hitTypeB5\x82\xb5\x181\
    The\x20retrieved\x20hits\x20will\x20be\x20filtered\x20to\x20this\x20type\
    .\x12c\n\x05count\x18\x02\x20\x01(\rR\x05countBM\x82\xb5\x18IThe\x20numb\
    er\x20of\x20hits\x20to\x20retrieve\x20in\x20a\x20single\x20batch.\x20Spe\
    cify\x200\x20for\x20no\x20limit.\x12M\n\x05start\x18\x03\x20\x01(\x04R\
    \x05startB7\x82\xb5\x183The\x20starting\x20count\x20when\x20retrieving\
    \x20hits\x20in\x20batches.\"\x95\x01\n-CCommunity_GetLinkFilterHashPrefi\
    xes_Response\x12d\n\rhash_prefixes\x18\x01\x20\x03(\rR\x0chashPrefixesB?\
    \x82\xb5\x18;The\x20first\x2032\x20bits\x20of\x20the\x20SHA1\x20hashes\
    \x20of\x20each\x20hit\x20requested.\"\xae\x02\n&CCommunity_GetLinkFilter\
    Hashes_Request\x12P\n\x08hit_type\x18\x01\x20\x01(\rR\x07hitTypeB5\x82\
    \xb5\x181The\x20retrieved\x20hits\x20will\x20be\x20filtered\x20to\x20thi\
    s\x20type.\x12c\n\x05count\x18\x02\x20\x01(\rR\x05countBM\x82\xb5\x18ITh\
    e\x20number\x20of\x20hits\x20to\x20retrieve\x20in\x20a\x20single\x20batc\
    h.\x20Specify\x200\x20for\x20no\x20limit.\x12M\n\x05start\x18\x03\x20\
    \x01(\x04R\x05startB7\x82\xb5\x183The\x20starting\x20count\x20when\x20re\
    trieving\x20hits\x20in\x20batches.\"r\n'CCommunity_GetLinkFilterHashes_R\
    esponse\x12G\n\x06hashes\x18\x01\x20\x03(\x0cR\x06hashesB/\x82\xb5\x18+A\
    \x20list\x20of\x20hashes\x20returned\x20from\x20our\x20request.\"\x89\
    \x01\n+CCommunity_GetLinkFilterListVersion_Request\x12Z\n\x08hit_type\
    \x18\x01\x20\x01(\rR\x07hitTypeB?\x82\xb5\x18;The\x20version\x20hashes\
    \x20for\x20this\x20type's\x20chunks\x20will\x20be\x20returned.\"\xba\x01\
    \n,CCommunity_GetLinkFilterListVersion_Response\x12O\n\x07version\x18\
    \x01\x20\x01(\tR\x07versionB5\x82\xb5\x181A\x20hash\x20built\x20using\
    \x20the\x20IDs\x20of\x20the\x20contained\x20hits.\x129\n\x05count\x18\
    \x02\x20\x01(\x04R\x05countB#\x82\xb5\x18\x1fThe\x20number\x20of\x20hits\
    \x20of\x20this\x20type2\xc6\x05\n\x13CommunityLinkFilter\x12\xd2\x01\n\
    \x19GetLinkFilterHashPrefixes\x12-.CCommunity_GetLinkFilterHashPrefixes_\
    Request\x1a..CCommunity_GetLinkFilterHashPrefixes_Response\"V\x82\xb5\
    \x18RGet\x20a\x20list\x20of\x20hash\x20prefixes\x20for\x20the\x20specifi\
    ed\x20hit\x20type,\x20to\x20use\x20for\x20client\x20caching.\x12\xb9\x01\
    \n\x13GetLinkFilterHashes\x12'.CCommunity_GetLinkFilterHashes_Request\
    \x1a(.CCommunity_GetLinkFilterHashes_Response\"O\x82\xb5\x18KGet\x20a\
    \x20list\x20of\x20hashes\x20for\x20the\x20specified\x20hit\x20type,\x20t\
    o\x20use\x20for\x20client\x20caching.\x12\xcd\x01\n\x18GetLinkFilterList\
    Version\x12,.CCommunity_GetLinkFilterListVersion_Request\x1a-.CCommunity\
    _GetLinkFilterListVersion_Response\"T\x82\xb5\x18PGet\x20a\x20list\x20of\
    \x20hashes\x20describing\x20the\x20version\x20of\x20each\x20chunk\x20of\
    \x20the\x20requested\x20size.\x1aN\x82\xb5\x18JA\x20service\x20for\x20re\
    cording\x20data\x20about\x20Steam\x20Community\x20phishing\x20link\x20fi\
    lteringB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
