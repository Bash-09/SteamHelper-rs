// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_virtualcontroller.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerElement {
    // message fields
    field_type: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EControllerElementType>>,
    visible: ::std::option::Option<bool>,
    x_position: ::std::option::Option<f32>,
    y_position: ::std::option::Option<f32>,
    x_scale: ::std::option::Option<f32>,
    y_scale: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerElement {
    fn default() -> &'a CVirtualControllerElement {
        <CVirtualControllerElement as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerElement {
    pub fn new() -> CVirtualControllerElement {
        ::std::default::Default::default()
    }

    // optional .EControllerElementType type = 1;

    pub fn get_field_type(&self) -> EControllerElementType {
        match self.field_type {
            Some(e) => e.enum_value_or(EControllerElementType::k_EControllerElementTypeNone),
            None => EControllerElementType::k_EControllerElementTypeNone,
        }
    }

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EControllerElementType) {
        self.field_type = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional bool visible = 2;

    pub fn get_visible(&self) -> bool {
        self.visible.unwrap_or(false)
    }

    pub fn clear_visible(&mut self) {
        self.visible = ::std::option::Option::None;
    }

    pub fn has_visible(&self) -> bool {
        self.visible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visible(&mut self, v: bool) {
        self.visible = ::std::option::Option::Some(v);
    }

    // optional float x_position = 3;

    pub fn get_x_position(&self) -> f32 {
        self.x_position.unwrap_or(0.)
    }

    pub fn clear_x_position(&mut self) {
        self.x_position = ::std::option::Option::None;
    }

    pub fn has_x_position(&self) -> bool {
        self.x_position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x_position(&mut self, v: f32) {
        self.x_position = ::std::option::Option::Some(v);
    }

    // optional float y_position = 4;

    pub fn get_y_position(&self) -> f32 {
        self.y_position.unwrap_or(0.)
    }

    pub fn clear_y_position(&mut self) {
        self.y_position = ::std::option::Option::None;
    }

    pub fn has_y_position(&self) -> bool {
        self.y_position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y_position(&mut self, v: f32) {
        self.y_position = ::std::option::Option::Some(v);
    }

    // optional float x_scale = 5;

    pub fn get_x_scale(&self) -> f32 {
        self.x_scale.unwrap_or(1.0f32)
    }

    pub fn clear_x_scale(&mut self) {
        self.x_scale = ::std::option::Option::None;
    }

    pub fn has_x_scale(&self) -> bool {
        self.x_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x_scale(&mut self, v: f32) {
        self.x_scale = ::std::option::Option::Some(v);
    }

    // optional float y_scale = 6;

    pub fn get_y_scale(&self) -> f32 {
        self.y_scale.unwrap_or(1.0f32)
    }

    pub fn clear_y_scale(&mut self) {
        self.y_scale = ::std::option::Option::None;
    }

    pub fn has_y_scale(&self) -> bool {
        self.y_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y_scale(&mut self, v: f32) {
        self.y_scale = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CVirtualControllerElement {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.visible = ::std::option::Option::Some(is.read_bool()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.x_position = ::std::option::Option::Some(is.read_float()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.y_position = ::std::option::Option::Some(is.read_float()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.x_scale = ::std::option::Option::Some(is.read_float()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.y_scale = ::std::option::Option::Some(is.read_float()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, v);
        }
        if let Some(v) = self.visible {
            my_size += 2;
        }
        if let Some(v) = self.x_position {
            my_size += 5;
        }
        if let Some(v) = self.y_position {
            my_size += 5;
        }
        if let Some(v) = self.x_scale {
            my_size += 5;
        }
        if let Some(v) = self.y_scale {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.visible {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.x_position {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.y_position {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.x_scale {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.y_scale {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerElement {
        CVirtualControllerElement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EControllerElementType>(
                "type",
                |m: &CVirtualControllerElement| { &m.field_type },
                |m: &mut CVirtualControllerElement| { &mut m.field_type },
                EControllerElementType::k_EControllerElementTypeNone,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "visible",
                |m: &CVirtualControllerElement| { &m.visible },
                |m: &mut CVirtualControllerElement| { &mut m.visible },
                CVirtualControllerElement::get_visible,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "x_position",
                |m: &CVirtualControllerElement| { &m.x_position },
                |m: &mut CVirtualControllerElement| { &mut m.x_position },
                CVirtualControllerElement::get_x_position,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "y_position",
                |m: &CVirtualControllerElement| { &m.y_position },
                |m: &mut CVirtualControllerElement| { &mut m.y_position },
                CVirtualControllerElement::get_y_position,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "x_scale",
                |m: &CVirtualControllerElement| { &m.x_scale },
                |m: &mut CVirtualControllerElement| { &mut m.x_scale },
                CVirtualControllerElement::get_x_scale,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "y_scale",
                |m: &CVirtualControllerElement| { &m.y_scale },
                |m: &mut CVirtualControllerElement| { &mut m.y_scale },
                CVirtualControllerElement::get_y_scale,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerElement>(
                "CVirtualControllerElement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerElement {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerElement> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerElement::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerElement {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.visible = ::std::option::Option::None;
        self.x_position = ::std::option::Option::None;
        self.y_position = ::std::option::Option::None;
        self.x_scale = ::std::option::Option::None;
        self.y_scale = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerElement {
}

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerColor {
    // message fields
    r: ::std::option::Option<f32>,
    g: ::std::option::Option<f32>,
    b: ::std::option::Option<f32>,
    a: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerColor {
    fn default() -> &'a CVirtualControllerColor {
        <CVirtualControllerColor as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerColor {
    pub fn new() -> CVirtualControllerColor {
        ::std::default::Default::default()
    }

    // optional float r = 1;

    pub fn get_r(&self) -> f32 {
        self.r.unwrap_or(1.0f32)
    }

    pub fn clear_r(&mut self) {
        self.r = ::std::option::Option::None;
    }

    pub fn has_r(&self) -> bool {
        self.r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: f32) {
        self.r = ::std::option::Option::Some(v);
    }

    // optional float g = 2;

    pub fn get_g(&self) -> f32 {
        self.g.unwrap_or(1.0f32)
    }

    pub fn clear_g(&mut self) {
        self.g = ::std::option::Option::None;
    }

    pub fn has_g(&self) -> bool {
        self.g.is_some()
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: f32) {
        self.g = ::std::option::Option::Some(v);
    }

    // optional float b = 3;

    pub fn get_b(&self) -> f32 {
        self.b.unwrap_or(1.0f32)
    }

    pub fn clear_b(&mut self) {
        self.b = ::std::option::Option::None;
    }

    pub fn has_b(&self) -> bool {
        self.b.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: f32) {
        self.b = ::std::option::Option::Some(v);
    }

    // optional float a = 4;

    pub fn get_a(&self) -> f32 {
        self.a.unwrap_or(1.0f32)
    }

    pub fn clear_a(&mut self) {
        self.a = ::std::option::Option::None;
    }

    pub fn has_a(&self) -> bool {
        self.a.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: f32) {
        self.a = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CVirtualControllerColor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.r = ::std::option::Option::Some(is.read_float()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.g = ::std::option::Option::Some(is.read_float()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.b = ::std::option::Option::Some(is.read_float()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.a = ::std::option::Option::Some(is.read_float()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.r {
            my_size += 5;
        }
        if let Some(v) = self.g {
            my_size += 5;
        }
        if let Some(v) = self.b {
            my_size += 5;
        }
        if let Some(v) = self.a {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.r {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.g {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.b {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.a {
            os.write_float(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerColor {
        CVirtualControllerColor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "r",
                |m: &CVirtualControllerColor| { &m.r },
                |m: &mut CVirtualControllerColor| { &mut m.r },
                CVirtualControllerColor::get_r,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "g",
                |m: &CVirtualControllerColor| { &m.g },
                |m: &mut CVirtualControllerColor| { &mut m.g },
                CVirtualControllerColor::get_g,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "b",
                |m: &CVirtualControllerColor| { &m.b },
                |m: &mut CVirtualControllerColor| { &mut m.b },
                CVirtualControllerColor::get_b,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFloat, _>(
                "a",
                |m: &CVirtualControllerColor| { &m.a },
                |m: &mut CVirtualControllerColor| { &mut m.a },
                CVirtualControllerColor::get_a,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerColor>(
                "CVirtualControllerColor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerColor {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerColor> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerColor::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerColor {
    fn clear(&mut self) {
        self.r = ::std::option::Option::None;
        self.g = ::std::option::Option::None;
        self.b = ::std::option::Option::None;
        self.a = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerColor {
}

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerLayout {
    // message fields
    layout_version: ::std::option::Option<i32>,
    actionset_id: ::std::option::Option<i32>,
    pub elements: ::protobuf::RepeatedField<CVirtualControllerElement>,
    pub color: ::protobuf::SingularPtrField<CVirtualControllerColor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayout {
    fn default() -> &'a CVirtualControllerLayout {
        <CVirtualControllerLayout as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerLayout {
    pub fn new() -> CVirtualControllerLayout {
        ::std::default::Default::default()
    }

    // optional int32 layout_version = 1;

    pub fn get_layout_version(&self) -> i32 {
        self.layout_version.unwrap_or(0)
    }

    pub fn clear_layout_version(&mut self) {
        self.layout_version = ::std::option::Option::None;
    }

    pub fn has_layout_version(&self) -> bool {
        self.layout_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout_version(&mut self, v: i32) {
        self.layout_version = ::std::option::Option::Some(v);
    }

    // optional int32 actionset_id = 2;

    pub fn get_actionset_id(&self) -> i32 {
        self.actionset_id.unwrap_or(0)
    }

    pub fn clear_actionset_id(&mut self) {
        self.actionset_id = ::std::option::Option::None;
    }

    pub fn has_actionset_id(&self) -> bool {
        self.actionset_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actionset_id(&mut self, v: i32) {
        self.actionset_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CVirtualControllerLayout {
    fn is_initialized(&self) -> bool {
        for v in &self.elements {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.color {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.layout_version = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.actionset_id = ::std::option::Option::Some(is.read_int32()?);
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.elements)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into::<CVirtualControllerColor, _>(wire_type, is, &mut self.color)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.layout_version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.actionset_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.elements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.layout_version {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.actionset_id {
            os.write_int32(2, v)?;
        }
        for v in &self.elements {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerLayout {
        CVirtualControllerLayout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "layout_version",
                |m: &CVirtualControllerLayout| { &m.layout_version },
                |m: &mut CVirtualControllerLayout| { &mut m.layout_version },
                CVirtualControllerLayout::get_layout_version,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "actionset_id",
                |m: &CVirtualControllerLayout| { &m.actionset_id },
                |m: &mut CVirtualControllerLayout| { &mut m.actionset_id },
                CVirtualControllerLayout::get_actionset_id,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CVirtualControllerElement>>(
                "elements",
                |m: &CVirtualControllerLayout| { &m.elements },
                |m: &mut CVirtualControllerLayout| { &mut m.elements },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CVirtualControllerColor>, _>(
                "color",
                |m: &CVirtualControllerLayout| { &m.color },
                |m: &mut CVirtualControllerLayout| { &mut m.color },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerLayout>(
                "CVirtualControllerLayout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerLayout {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerLayout> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerLayout::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerLayout {
    fn clear(&mut self) {
        self.layout_version = ::std::option::Option::None;
        self.actionset_id = ::std::option::Option::None;
        self.elements.clear();
        self.color.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerLayout {
}

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerLayouts {
    // message fields
    pub layouts: ::protobuf::RepeatedField<CVirtualControllerLayout>,
    input_mode: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EInputMode>>,
    mouse_mode: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EMouseMode>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayouts {
    fn default() -> &'a CVirtualControllerLayouts {
        <CVirtualControllerLayouts as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerLayouts {
    pub fn new() -> CVirtualControllerLayouts {
        ::std::default::Default::default()
    }

    // optional .EInputMode input_mode = 2;

    pub fn get_input_mode(&self) -> EInputMode {
        match self.input_mode {
            Some(e) => e.enum_value_or(EInputMode::k_EInputModeController),
            None => EInputMode::k_EInputModeController,
        }
    }

    pub fn clear_input_mode(&mut self) {
        self.input_mode = ::std::option::Option::None;
    }

    pub fn has_input_mode(&self) -> bool {
        self.input_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_mode(&mut self, v: EInputMode) {
        self.input_mode = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional .EMouseMode mouse_mode = 3;

    pub fn get_mouse_mode(&self) -> EMouseMode {
        match self.mouse_mode {
            Some(e) => e.enum_value_or(EMouseMode::k_EMouseModeUnknown),
            None => EMouseMode::k_EMouseModeUnknown,
        }
    }

    pub fn clear_mouse_mode(&mut self) {
        self.mouse_mode = ::std::option::Option::None;
    }

    pub fn has_mouse_mode(&self) -> bool {
        self.mouse_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mouse_mode(&mut self, v: EMouseMode) {
        self.mouse_mode = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }
}

impl ::protobuf::Message for CVirtualControllerLayouts {
    fn is_initialized(&self) -> bool {
        for v in &self.layouts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.layouts)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.mouse_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.layouts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.input_mode {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, v);
        }
        if let Some(v) = self.mouse_mode {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.layouts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.input_mode {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.mouse_mode {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerLayouts {
        CVirtualControllerLayouts::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CVirtualControllerLayout>>(
                "layouts",
                |m: &CVirtualControllerLayouts| { &m.layouts },
                |m: &mut CVirtualControllerLayouts| { &mut m.layouts },
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EInputMode>(
                "input_mode",
                |m: &CVirtualControllerLayouts| { &m.input_mode },
                |m: &mut CVirtualControllerLayouts| { &mut m.input_mode },
                EInputMode::k_EInputModeController,
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EMouseMode>(
                "mouse_mode",
                |m: &CVirtualControllerLayouts| { &m.mouse_mode },
                |m: &mut CVirtualControllerLayouts| { &mut m.mouse_mode },
                EMouseMode::k_EMouseModeUnknown,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerLayouts>(
                "CVirtualControllerLayouts",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerLayouts {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerLayouts> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerLayouts::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerLayouts {
    fn clear(&mut self) {
        self.layouts.clear();
        self.input_mode = ::std::option::Option::None;
        self.mouse_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerLayouts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerLayouts {
}

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerConfig {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub actionsets: ::protobuf::RepeatedField<cvirtual_controller_config::ActionSet>,
    default_mouse_mode: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EMouseMode>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerConfig {
    fn default() -> &'a CVirtualControllerConfig {
        <CVirtualControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerConfig {
    pub fn new() -> CVirtualControllerConfig {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EMouseMode default_mouse_mode = 3;

    pub fn get_default_mouse_mode(&self) -> EMouseMode {
        match self.default_mouse_mode {
            Some(e) => e.enum_value_or(EMouseMode::k_EMouseModeRelative),
            None => EMouseMode::k_EMouseModeRelative,
        }
    }

    pub fn clear_default_mouse_mode(&mut self) {
        self.default_mouse_mode = ::std::option::Option::None;
    }

    pub fn has_default_mouse_mode(&self) -> bool {
        self.default_mouse_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_mouse_mode(&mut self, v: EMouseMode) {
        self.default_mouse_mode = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }
}

impl ::protobuf::Message for CVirtualControllerConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.actionsets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.actionsets)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.default_mouse_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.actionsets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.default_mouse_mode {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.actionsets {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.default_mouse_mode {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerConfig {
        CVirtualControllerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "name",
                |m: &CVirtualControllerConfig| { &m.name },
                |m: &mut CVirtualControllerConfig| { &mut m.name },
                CVirtualControllerConfig::get_name,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cvirtual_controller_config::ActionSet>>(
                "actionsets",
                |m: &CVirtualControllerConfig| { &m.actionsets },
                |m: &mut CVirtualControllerConfig| { &mut m.actionsets },
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EMouseMode>(
                "default_mouse_mode",
                |m: &CVirtualControllerConfig| { &m.default_mouse_mode },
                |m: &mut CVirtualControllerConfig| { &mut m.default_mouse_mode },
                EMouseMode::k_EMouseModeRelative,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerConfig>(
                "CVirtualControllerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerConfig {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerConfig> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerConfig::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.actionsets.clear();
        self.default_mouse_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerConfig {
}

/// Nested message and enums of message `CVirtualControllerConfig`
pub mod cvirtual_controller_config {
    #[derive(PartialEq,Clone,Default)]
    pub struct Control {
        // message fields
        name: ::protobuf::SingularField<::std::string::String>,
        icon: ::protobuf::SingularField<::std::string::String>,
        input_source: ::std::option::Option<i32>,
        input_mode: ::std::option::Option<i32>,
        input_element: ::std::option::Option<i32>,
        output_gamepad: ::std::option::Option<i32>,
        output_keyboard: ::std::option::Option<i32>,
        output_mouse: ::std::option::Option<i32>,
        icon_foreground: ::protobuf::SingularField<::std::string::String>,
        icon_background: ::protobuf::SingularField<::std::string::String>,
        input_toggle: ::std::option::Option<bool>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a Control {
        fn default() -> &'a Control {
            <Control as ::protobuf::Message>::default_instance()
        }
    }

    impl Control {
        pub fn new() -> Control {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn get_name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name.set_default();
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon = 2;

        pub fn get_icon(&self) -> &str {
            match self.icon.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon(&mut self) {
            self.icon.clear();
        }

        pub fn has_icon(&self) -> bool {
            self.icon.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon(&mut self, v: ::std::string::String) {
            self.icon = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon(&mut self) -> &mut ::std::string::String {
            if self.icon.is_none() {
                self.icon.set_default();
            }
            self.icon.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon(&mut self) -> ::std::string::String {
            self.icon.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 input_source = 3;

        pub fn get_input_source(&self) -> i32 {
            self.input_source.unwrap_or(0)
        }

        pub fn clear_input_source(&mut self) {
            self.input_source = ::std::option::Option::None;
        }

        pub fn has_input_source(&self) -> bool {
            self.input_source.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_source(&mut self, v: i32) {
            self.input_source = ::std::option::Option::Some(v);
        }

        // optional int32 input_mode = 4;

        pub fn get_input_mode(&self) -> i32 {
            self.input_mode.unwrap_or(0)
        }

        pub fn clear_input_mode(&mut self) {
            self.input_mode = ::std::option::Option::None;
        }

        pub fn has_input_mode(&self) -> bool {
            self.input_mode.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_mode(&mut self, v: i32) {
            self.input_mode = ::std::option::Option::Some(v);
        }

        // optional int32 input_element = 5;

        pub fn get_input_element(&self) -> i32 {
            self.input_element.unwrap_or(0)
        }

        pub fn clear_input_element(&mut self) {
            self.input_element = ::std::option::Option::None;
        }

        pub fn has_input_element(&self) -> bool {
            self.input_element.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_element(&mut self, v: i32) {
            self.input_element = ::std::option::Option::Some(v);
        }

        // optional int32 output_gamepad = 6;

        pub fn get_output_gamepad(&self) -> i32 {
            self.output_gamepad.unwrap_or(0)
        }

        pub fn clear_output_gamepad(&mut self) {
            self.output_gamepad = ::std::option::Option::None;
        }

        pub fn has_output_gamepad(&self) -> bool {
            self.output_gamepad.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_gamepad(&mut self, v: i32) {
            self.output_gamepad = ::std::option::Option::Some(v);
        }

        // optional int32 output_keyboard = 7;

        pub fn get_output_keyboard(&self) -> i32 {
            self.output_keyboard.unwrap_or(0)
        }

        pub fn clear_output_keyboard(&mut self) {
            self.output_keyboard = ::std::option::Option::None;
        }

        pub fn has_output_keyboard(&self) -> bool {
            self.output_keyboard.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_keyboard(&mut self, v: i32) {
            self.output_keyboard = ::std::option::Option::Some(v);
        }

        // optional int32 output_mouse = 8;

        pub fn get_output_mouse(&self) -> i32 {
            self.output_mouse.unwrap_or(0)
        }

        pub fn clear_output_mouse(&mut self) {
            self.output_mouse = ::std::option::Option::None;
        }

        pub fn has_output_mouse(&self) -> bool {
            self.output_mouse.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_mouse(&mut self, v: i32) {
            self.output_mouse = ::std::option::Option::Some(v);
        }

        // optional string icon_foreground = 9;

        pub fn get_icon_foreground(&self) -> &str {
            match self.icon_foreground.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_foreground(&mut self) {
            self.icon_foreground.clear();
        }

        pub fn has_icon_foreground(&self) -> bool {
            self.icon_foreground.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_foreground(&mut self, v: ::std::string::String) {
            self.icon_foreground = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_foreground(&mut self) -> &mut ::std::string::String {
            if self.icon_foreground.is_none() {
                self.icon_foreground.set_default();
            }
            self.icon_foreground.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_foreground(&mut self) -> ::std::string::String {
            self.icon_foreground.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon_background = 10;

        pub fn get_icon_background(&self) -> &str {
            match self.icon_background.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_background(&mut self) {
            self.icon_background.clear();
        }

        pub fn has_icon_background(&self) -> bool {
            self.icon_background.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_background(&mut self, v: ::std::string::String) {
            self.icon_background = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_background(&mut self) -> &mut ::std::string::String {
            if self.icon_background.is_none() {
                self.icon_background.set_default();
            }
            self.icon_background.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_background(&mut self) -> ::std::string::String {
            self.icon_background.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool input_toggle = 11;

        pub fn get_input_toggle(&self) -> bool {
            self.input_toggle.unwrap_or(false)
        }

        pub fn clear_input_toggle(&mut self) {
            self.input_toggle = ::std::option::Option::None;
        }

        pub fn has_input_toggle(&self) -> bool {
            self.input_toggle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_toggle(&mut self, v: bool) {
            self.input_toggle = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Control {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                    },
                    2 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.icon)?;
                    },
                    3 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.input_source = ::std::option::Option::Some(is.read_int32()?);
                    },
                    4 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.input_mode = ::std::option::Option::Some(is.read_int32()?);
                    },
                    5 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.input_element = ::std::option::Option::Some(is.read_int32()?);
                    },
                    6 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.output_gamepad = ::std::option::Option::Some(is.read_int32()?);
                    },
                    7 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.output_keyboard = ::std::option::Option::Some(is.read_int32()?);
                    },
                    8 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.output_mouse = ::std::option::Option::Some(is.read_int32()?);
                    },
                    9 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.icon_foreground)?;
                    },
                    10 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.icon_background)?;
                    },
                    11 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.input_toggle = ::std::option::Option::Some(is.read_bool()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.icon.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.input_source {
                my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.input_mode {
                my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.input_element {
                my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.output_gamepad {
                my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.output_keyboard {
                my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.output_mouse {
                my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.icon_foreground.as_ref() {
                my_size += ::protobuf::rt::string_size(9, &v);
            }
            if let Some(v) = self.icon_background.as_ref() {
                my_size += ::protobuf::rt::string_size(10, &v);
            }
            if let Some(v) = self.input_toggle {
                my_size += 2;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.icon.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.input_source {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.input_mode {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.input_element {
                os.write_int32(5, v)?;
            }
            if let Some(v) = self.output_gamepad {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.output_keyboard {
                os.write_int32(7, v)?;
            }
            if let Some(v) = self.output_mouse {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.icon_foreground.as_ref() {
                os.write_string(9, v)?;
            }
            if let Some(v) = self.icon_background.as_ref() {
                os.write_string(10, v)?;
            }
            if let Some(v) = self.input_toggle {
                os.write_bool(11, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> Control {
            Control::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "name",
                    |m: &Control| { &m.name },
                    |m: &mut Control| { &mut m.name },
                    Control::get_name,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "icon",
                    |m: &Control| { &m.icon },
                    |m: &mut Control| { &mut m.icon },
                    Control::get_icon,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "input_source",
                    |m: &Control| { &m.input_source },
                    |m: &mut Control| { &mut m.input_source },
                    Control::get_input_source,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "input_mode",
                    |m: &Control| { &m.input_mode },
                    |m: &mut Control| { &mut m.input_mode },
                    Control::get_input_mode,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "input_element",
                    |m: &Control| { &m.input_element },
                    |m: &mut Control| { &mut m.input_element },
                    Control::get_input_element,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "output_gamepad",
                    |m: &Control| { &m.output_gamepad },
                    |m: &mut Control| { &mut m.output_gamepad },
                    Control::get_output_gamepad,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "output_keyboard",
                    |m: &Control| { &m.output_keyboard },
                    |m: &mut Control| { &mut m.output_keyboard },
                    Control::get_output_keyboard,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "output_mouse",
                    |m: &Control| { &m.output_mouse },
                    |m: &mut Control| { &mut m.output_mouse },
                    Control::get_output_mouse,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "icon_foreground",
                    |m: &Control| { &m.icon_foreground },
                    |m: &mut Control| { &mut m.icon_foreground },
                    Control::get_icon_foreground,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "icon_background",
                    |m: &Control| { &m.icon_background },
                    |m: &mut Control| { &mut m.icon_background },
                    Control::get_icon_background,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                    "input_toggle",
                    |m: &Control| { &m.input_toggle },
                    |m: &mut Control| { &mut m.input_toggle },
                    Control::get_input_toggle,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Control>(
                    "CVirtualControllerConfig.Control",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static Control {
            static instance: ::protobuf::rt::Lazy<Control> = ::protobuf::rt::Lazy::INIT;
            instance.get(Control::new)
        }
    }

    impl ::protobuf::Clear for Control {
        fn clear(&mut self) {
            self.name.clear();
            self.icon.clear();
            self.input_source = ::std::option::Option::None;
            self.input_mode = ::std::option::Option::None;
            self.input_element = ::std::option::Option::None;
            self.output_gamepad = ::std::option::Option::None;
            self.output_keyboard = ::std::option::Option::None;
            self.output_mouse = ::std::option::Option::None;
            self.icon_foreground.clear();
            self.icon_background.clear();
            self.input_toggle = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for Control {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Control {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct ActionSet {
        // message fields
        id: ::std::option::Option<i32>,
        parent_id: ::std::option::Option<i32>,
        name: ::protobuf::SingularField<::std::string::String>,
        pub controls: ::protobuf::RepeatedField<Control>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a ActionSet {
        fn default() -> &'a ActionSet {
            <ActionSet as ::protobuf::Message>::default_instance()
        }
    }

    impl ActionSet {
        pub fn new() -> ActionSet {
            ::std::default::Default::default()
        }

        // optional int32 id = 1;

        pub fn get_id(&self) -> i32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: i32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional int32 parent_id = 2;

        pub fn get_parent_id(&self) -> i32 {
            self.parent_id.unwrap_or(0)
        }

        pub fn clear_parent_id(&mut self) {
            self.parent_id = ::std::option::Option::None;
        }

        pub fn has_parent_id(&self) -> bool {
            self.parent_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_parent_id(&mut self, v: i32) {
            self.parent_id = ::std::option::Option::Some(v);
        }

        // optional string name = 3;

        pub fn get_name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name.set_default();
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for ActionSet {
        fn is_initialized(&self) -> bool {
            for v in &self.controls {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.parent_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    3 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                    },
                    4 => {
                        ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.controls)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.parent_id {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            for value in &self.controls {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.parent_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(3, v)?;
            }
            for v in &self.controls {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> ActionSet {
            ActionSet::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "id",
                    |m: &ActionSet| { &m.id },
                    |m: &mut ActionSet| { &mut m.id },
                    ActionSet::get_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                    "parent_id",
                    |m: &ActionSet| { &m.parent_id },
                    |m: &mut ActionSet| { &mut m.parent_id },
                    ActionSet::get_parent_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "name",
                    |m: &ActionSet| { &m.name },
                    |m: &mut ActionSet| { &mut m.name },
                    ActionSet::get_name,
                ));
                fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<Control>>(
                    "controls",
                    |m: &ActionSet| { &m.controls },
                    |m: &mut ActionSet| { &mut m.controls },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActionSet>(
                    "CVirtualControllerConfig.ActionSet",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static ActionSet {
            static instance: ::protobuf::rt::Lazy<ActionSet> = ::protobuf::rt::Lazy::INIT;
            instance.get(ActionSet::new)
        }
    }

    impl ::protobuf::Clear for ActionSet {
        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.parent_id = ::std::option::Option::None;
            self.name.clear();
            self.controls.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for ActionSet {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ActionSet {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CVirtualControllerLayoutPackage {
    // message fields
    appid: ::std::option::Option<u32>,
    revision: ::std::option::Option<u32>,
    pub config: ::protobuf::SingularPtrField<CVirtualControllerConfig>,
    pub layouts: ::protobuf::SingularPtrField<CVirtualControllerLayouts>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayoutPackage {
    fn default() -> &'a CVirtualControllerLayoutPackage {
        <CVirtualControllerLayoutPackage as ::protobuf::Message>::default_instance()
    }
}

impl CVirtualControllerLayoutPackage {
    pub fn new() -> CVirtualControllerLayoutPackage {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 revision = 2;

    pub fn get_revision(&self) -> u32 {
        self.revision.unwrap_or(0)
    }

    pub fn clear_revision(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u32) {
        self.revision = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CVirtualControllerLayoutPackage {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.layouts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into::<CVirtualControllerConfig, _>(wire_type, is, &mut self.config)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into::<CVirtualControllerLayouts, _>(wire_type, is, &mut self.layouts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.revision {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.layouts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.revision {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.layouts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVirtualControllerLayoutPackage {
        CVirtualControllerLayoutPackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "appid",
                |m: &CVirtualControllerLayoutPackage| { &m.appid },
                |m: &mut CVirtualControllerLayoutPackage| { &mut m.appid },
                CVirtualControllerLayoutPackage::get_appid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "revision",
                |m: &CVirtualControllerLayoutPackage| { &m.revision },
                |m: &mut CVirtualControllerLayoutPackage| { &mut m.revision },
                CVirtualControllerLayoutPackage::get_revision,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CVirtualControllerConfig>, _>(
                "config",
                |m: &CVirtualControllerLayoutPackage| { &m.config },
                |m: &mut CVirtualControllerLayoutPackage| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CVirtualControllerLayouts>, _>(
                "layouts",
                |m: &CVirtualControllerLayoutPackage| { &m.layouts },
                |m: &mut CVirtualControllerLayoutPackage| { &mut m.layouts },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CVirtualControllerLayoutPackage>(
                "CVirtualControllerLayoutPackage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CVirtualControllerLayoutPackage {
        static instance: ::protobuf::rt::Lazy<CVirtualControllerLayoutPackage> = ::protobuf::rt::Lazy::INIT;
        instance.get(CVirtualControllerLayoutPackage::new)
    }
}

impl ::protobuf::Clear for CVirtualControllerLayoutPackage {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.revision = ::std::option::Option::None;
        self.config.clear();
        self.layouts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVirtualControllerLayoutPackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVirtualControllerLayoutPackage {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EInputMode {
    k_EInputModeUnknown = 0,
    k_EInputModeMouse = 1,
    k_EInputModeController = 2,
    k_EInputModeMouseAndController = 3,
}

impl ::protobuf::ProtobufEnum for EInputMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EInputMode> {
        match value {
            0 => ::std::option::Option::Some(EInputMode::k_EInputModeUnknown),
            1 => ::std::option::Option::Some(EInputMode::k_EInputModeMouse),
            2 => ::std::option::Option::Some(EInputMode::k_EInputModeController),
            3 => ::std::option::Option::Some(EInputMode::k_EInputModeMouseAndController),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EInputMode] = &[
            EInputMode::k_EInputModeUnknown,
            EInputMode::k_EInputModeMouse,
            EInputMode::k_EInputModeController,
            EInputMode::k_EInputModeMouseAndController,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EInputMode>("EInputMode", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EInputMode {
    fn default() -> Self {
        EInputMode::k_EInputModeUnknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EInputMode {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EMouseMode {
    k_EMouseModeUnknown = 0,
    k_EMouseModeRelativeCursor = 1,
    k_EMouseModeAbsoluteCursor = 2,
    k_EMouseModeTouch = 3,
    k_EMouseModeRelative = 4,
}

impl ::protobuf::ProtobufEnum for EMouseMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMouseMode> {
        match value {
            0 => ::std::option::Option::Some(EMouseMode::k_EMouseModeUnknown),
            1 => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelativeCursor),
            2 => ::std::option::Option::Some(EMouseMode::k_EMouseModeAbsoluteCursor),
            3 => ::std::option::Option::Some(EMouseMode::k_EMouseModeTouch),
            4 => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelative),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EMouseMode] = &[
            EMouseMode::k_EMouseModeUnknown,
            EMouseMode::k_EMouseModeRelativeCursor,
            EMouseMode::k_EMouseModeAbsoluteCursor,
            EMouseMode::k_EMouseModeTouch,
            EMouseMode::k_EMouseModeRelative,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EMouseMode>("EMouseMode", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EMouseMode {
    fn default() -> Self {
        EMouseMode::k_EMouseModeUnknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EMouseMode {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EControllerElementType {
    k_EControllerElementTypeNone = -1,
    k_EControllerElementTypeThumb = 0,
    k_EControllerElementTypeButtonSteam = 1,
    k_EControllerElementTypeJoystickLeft = 2,
    k_EControllerElementTypeButtonJoystickLeft = 3,
    k_EControllerElementTypeJoystickRight = 4,
    k_EControllerElementTypeButtonJoystickRight = 5,
    k_EControllerElementTypeDPad = 6,
    k_EControllerElementTypeButtonA = 7,
    k_EControllerElementTypeButtonB = 8,
    k_EControllerElementTypeButtonX = 9,
    k_EControllerElementTypeButtonY = 10,
    k_EControllerElementTypeButtonSelect = 11,
    k_EControllerElementTypeButtonStart = 12,
    k_EControllerElementTypeButtonTriggerLeft = 13,
    k_EControllerElementTypeButtonTriggerRight = 14,
    k_EControllerElementTypeButtonBumperLeft = 15,
    k_EControllerElementTypeButtonBumperRight = 16,
    k_EControllerElementTypeButtonMacro0 = 17,
    k_EControllerElementTypeButtonMacro1 = 18,
    k_EControllerElementTypeButtonMacro2 = 19,
    k_EControllerElementTypeButtonMacro3 = 20,
    k_EControllerElementTypeButtonMacro4 = 21,
    k_EControllerElementTypeButtonMacro5 = 22,
    k_EControllerElementTypeButtonMacro6 = 23,
    k_EControllerElementTypeButtonMacro7 = 24,
    k_EControllerElementTypeTrackpadCenter = 25,
    k_EControllerElementTypeTrackpadLeft = 26,
    k_EControllerElementTypeTrackpadRight = 27,
    k_EControllerElementTypeKeyboard = 28,
    k_EControllerElementTypeMax = 29,
}

impl ::protobuf::ProtobufEnum for EControllerElementType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EControllerElementType> {
        match value {
            -1 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeNone),
            0 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeThumb),
            1 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSteam),
            2 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickLeft),
            3 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickLeft),
            4 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickRight),
            5 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickRight),
            6 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeDPad),
            7 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonA),
            8 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonB),
            9 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonX),
            10 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonY),
            11 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSelect),
            12 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonStart),
            13 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerLeft),
            14 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerRight),
            15 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperLeft),
            16 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperRight),
            17 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro0),
            18 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro1),
            19 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro2),
            20 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro3),
            21 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro4),
            22 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro5),
            23 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro6),
            24 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro7),
            25 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadCenter),
            26 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadLeft),
            27 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadRight),
            28 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeKeyboard),
            29 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeMax),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EControllerElementType] = &[
            EControllerElementType::k_EControllerElementTypeNone,
            EControllerElementType::k_EControllerElementTypeThumb,
            EControllerElementType::k_EControllerElementTypeButtonSteam,
            EControllerElementType::k_EControllerElementTypeJoystickLeft,
            EControllerElementType::k_EControllerElementTypeButtonJoystickLeft,
            EControllerElementType::k_EControllerElementTypeJoystickRight,
            EControllerElementType::k_EControllerElementTypeButtonJoystickRight,
            EControllerElementType::k_EControllerElementTypeDPad,
            EControllerElementType::k_EControllerElementTypeButtonA,
            EControllerElementType::k_EControllerElementTypeButtonB,
            EControllerElementType::k_EControllerElementTypeButtonX,
            EControllerElementType::k_EControllerElementTypeButtonY,
            EControllerElementType::k_EControllerElementTypeButtonSelect,
            EControllerElementType::k_EControllerElementTypeButtonStart,
            EControllerElementType::k_EControllerElementTypeButtonTriggerLeft,
            EControllerElementType::k_EControllerElementTypeButtonTriggerRight,
            EControllerElementType::k_EControllerElementTypeButtonBumperLeft,
            EControllerElementType::k_EControllerElementTypeButtonBumperRight,
            EControllerElementType::k_EControllerElementTypeButtonMacro0,
            EControllerElementType::k_EControllerElementTypeButtonMacro1,
            EControllerElementType::k_EControllerElementTypeButtonMacro2,
            EControllerElementType::k_EControllerElementTypeButtonMacro3,
            EControllerElementType::k_EControllerElementTypeButtonMacro4,
            EControllerElementType::k_EControllerElementTypeButtonMacro5,
            EControllerElementType::k_EControllerElementTypeButtonMacro6,
            EControllerElementType::k_EControllerElementTypeButtonMacro7,
            EControllerElementType::k_EControllerElementTypeTrackpadCenter,
            EControllerElementType::k_EControllerElementTypeTrackpadLeft,
            EControllerElementType::k_EControllerElementTypeTrackpadRight,
            EControllerElementType::k_EControllerElementTypeKeyboard,
            EControllerElementType::k_EControllerElementTypeMax,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EControllerElementType>("EControllerElementType", file_descriptor_proto())
        })
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EControllerElementType {
    fn default() -> Self {
        EControllerElementType::k_EControllerElementTypeNone
    }
}

impl ::protobuf::reflect::ProtobufValue for EControllerElementType {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%steammessages_virtualcontroller.proto\"\xf6\x01\n\x19CVirtualControll\
    erElement\x12I\n\x04type\x18\x01\x20\x01(\x0e2\x17.EControllerElementTyp\
    e:\x1ck_EControllerElementTypeNoneR\x04type\x12\x18\n\x07visible\x18\x02\
    \x20\x01(\x08R\x07visible\x12\x1d\n\nx_position\x18\x03\x20\x01(\x02R\tx\
    Position\x12\x1d\n\ny_position\x18\x04\x20\x01(\x02R\tyPosition\x12\x1a\
    \n\x07x_scale\x18\x05\x20\x01(\x02:\x011R\x06xScale\x12\x1a\n\x07y_scale\
    \x18\x06\x20\x01(\x02:\x011R\x06yScale\"]\n\x17CVirtualControllerColor\
    \x12\x0f\n\x01r\x18\x01\x20\x01(\x02:\x011R\x01r\x12\x0f\n\x01g\x18\x02\
    \x20\x01(\x02:\x011R\x01g\x12\x0f\n\x01b\x18\x03\x20\x01(\x02:\x011R\x01\
    b\x12\x0f\n\x01a\x18\x04\x20\x01(\x02:\x011R\x01a\"\xcc\x01\n\x18CVirtua\
    lControllerLayout\x12%\n\x0elayout_version\x18\x01\x20\x01(\x05R\rlayout\
    Version\x12!\n\x0cactionset_id\x18\x02\x20\x01(\x05R\x0bactionsetId\x126\
    \n\x08elements\x18\x04\x20\x03(\x0b2\x1a.CVirtualControllerElementR\x08e\
    lements\x12.\n\x05color\x18\x05\x20\x01(\x0b2\x18.CVirtualControllerColo\
    rR\x05color\"\xd5\x01\n\x19CVirtualControllerLayouts\x123\n\x07layouts\
    \x18\x01\x20\x03(\x0b2\x19.CVirtualControllerLayoutR\x07layouts\x12B\n\n\
    input_mode\x18\x02\x20\x01(\x0e2\x0b.EInputMode:\x16k_EInputModeControll\
    erR\tinputMode\x12?\n\nmouse_mode\x18\x03\x20\x01(\x0e2\x0b.EMouseMode:\
    \x13k_EMouseModeUnknownR\tmouseMode\"\xd5\x05\n\x18CVirtualControllerCon\
    fig\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12C\n\nactionsets\x18\
    \x02\x20\x03(\x0b2#.CVirtualControllerConfig.ActionSetR\nactionsets\x12O\
    \n\x12default_mouse_mode\x18\x03\x20\x01(\x0e2\x0b.EMouseMode:\x14k_EMou\
    seModeRelativeR\x10defaultMouseMode\x1a\x80\x03\n\x07Control\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04icon\x18\x02\x20\x01(\
    \tR\x04icon\x12!\n\x0cinput_source\x18\x03\x20\x01(\x05R\x0binputSource\
    \x12\x1d\n\ninput_mode\x18\x04\x20\x01(\x05R\tinputMode\x12#\n\rinput_el\
    ement\x18\x05\x20\x01(\x05R\x0cinputElement\x12%\n\x0eoutput_gamepad\x18\
    \x06\x20\x01(\x05R\routputGamepad\x12'\n\x0foutput_keyboard\x18\x07\x20\
    \x01(\x05R\x0eoutputKeyboard\x12!\n\x0coutput_mouse\x18\x08\x20\x01(\x05\
    R\x0boutputMouse\x12'\n\x0ficon_foreground\x18\t\x20\x01(\tR\x0eiconFore\
    ground\x12'\n\x0ficon_background\x18\n\x20\x01(\tR\x0eiconBackground\x12\
    !\n\x0cinput_toggle\x18\x0b\x20\x01(\x08R\x0binputToggle\x1a\x8b\x01\n\t\
    ActionSet\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x1b\n\tparent_\
    id\x18\x02\x20\x01(\x05R\x08parentId\x12\x12\n\x04name\x18\x03\x20\x01(\
    \tR\x04name\x12=\n\x08controls\x18\x04\x20\x03(\x0b2!.CVirtualController\
    Config.ControlR\x08controls\"\xbc\x01\n\x1fCVirtualControllerLayoutPacka\
    ge\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1a\n\x08revision\
    \x18\x02\x20\x01(\rR\x08revision\x121\n\x06config\x18\x03\x20\x01(\x0b2\
    \x19.CVirtualControllerConfigR\x06config\x124\n\x07layouts\x18\x04\x20\
    \x01(\x0b2\x1a.CVirtualControllerLayoutsR\x07layouts*|\n\nEInputMode\x12\
    \x17\n\x13k_EInputModeUnknown\x10\0\x12\x15\n\x11k_EInputModeMouse\x10\
    \x01\x12\x1a\n\x16k_EInputModeController\x10\x02\x12\"\n\x1ek_EInputMode\
    MouseAndController\x10\x03*\x96\x01\n\nEMouseMode\x12\x17\n\x13k_EMouseM\
    odeUnknown\x10\0\x12\x1e\n\x1ak_EMouseModeRelativeCursor\x10\x01\x12\x1e\
    \n\x1ak_EMouseModeAbsoluteCursor\x10\x02\x12\x15\n\x11k_EMouseModeTouch\
    \x10\x03\x12\x18\n\x14k_EMouseModeRelative\x10\x04*\xa2\n\n\x16EControll\
    erElementType\x12)\n\x1ck_EControllerElementTypeNone\x10\xff\xff\xff\xff\
    \xff\xff\xff\xff\xff\x01\x12!\n\x1dk_EControllerElementTypeThumb\x10\0\
    \x12'\n#k_EControllerElementTypeButtonSteam\x10\x01\x12(\n$k_EController\
    ElementTypeJoystickLeft\x10\x02\x12.\n*k_EControllerElementTypeButtonJoy\
    stickLeft\x10\x03\x12)\n%k_EControllerElementTypeJoystickRight\x10\x04\
    \x12/\n+k_EControllerElementTypeButtonJoystickRight\x10\x05\x12\x20\n\
    \x1ck_EControllerElementTypeDPad\x10\x06\x12#\n\x1fk_EControllerElementT\
    ypeButtonA\x10\x07\x12#\n\x1fk_EControllerElementTypeButtonB\x10\x08\x12\
    #\n\x1fk_EControllerElementTypeButtonX\x10\t\x12#\n\x1fk_EControllerElem\
    entTypeButtonY\x10\n\x12(\n$k_EControllerElementTypeButtonSelect\x10\x0b\
    \x12'\n#k_EControllerElementTypeButtonStart\x10\x0c\x12-\n)k_EController\
    ElementTypeButtonTriggerLeft\x10\r\x12.\n*k_EControllerElementTypeButton\
    TriggerRight\x10\x0e\x12,\n(k_EControllerElementTypeButtonBumperLeft\x10\
    \x0f\x12-\n)k_EControllerElementTypeButtonBumperRight\x10\x10\x12(\n$k_E\
    ControllerElementTypeButtonMacro0\x10\x11\x12(\n$k_EControllerElementTyp\
    eButtonMacro1\x10\x12\x12(\n$k_EControllerElementTypeButtonMacro2\x10\
    \x13\x12(\n$k_EControllerElementTypeButtonMacro3\x10\x14\x12(\n$k_EContr\
    ollerElementTypeButtonMacro4\x10\x15\x12(\n$k_EControllerElementTypeButt\
    onMacro5\x10\x16\x12(\n$k_EControllerElementTypeButtonMacro6\x10\x17\x12\
    (\n$k_EControllerElementTypeButtonMacro7\x10\x18\x12*\n&k_EControllerEle\
    mentTypeTrackpadCenter\x10\x19\x12(\n$k_EControllerElementTypeTrackpadLe\
    ft\x10\x1a\x12)\n%k_EControllerElementTypeTrackpadRight\x10\x1b\x12$\n\
    \x20k_EControllerElementTypeKeyboard\x10\x1c\x12\x1f\n\x1bk_EControllerE\
    lementTypeMax\x10\x1d\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
