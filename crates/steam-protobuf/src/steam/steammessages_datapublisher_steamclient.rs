// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_datapublisher.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct CDataPublisher_ClientContentCorruptionReport_Notification {
    // message fields
    appid: ::std::option::Option<u32>,
    depotid: ::std::option::Option<u32>,
    download_source: ::protobuf::SingularField<::std::string::String>,
    objectid: ::protobuf::SingularField<::std::string::String>,
    cellid: ::std::option::Option<u32>,
    is_manifest: ::std::option::Option<bool>,
    object_size: ::std::option::Option<u64>,
    corruption_type: ::std::option::Option<u32>,
    used_https: ::std::option::Option<bool>,
    oc_proxy_detected: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_ClientContentCorruptionReport_Notification {
    fn default() -> &'a CDataPublisher_ClientContentCorruptionReport_Notification {
        <CDataPublisher_ClientContentCorruptionReport_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_ClientContentCorruptionReport_Notification {
    pub fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;


    pub fn get_depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }
    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional string download_source = 3;


    pub fn get_download_source(&self) -> &str {
        match self.download_source.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_download_source(&mut self) {
        self.download_source.clear();
    }

    pub fn has_download_source(&self) -> bool {
        self.download_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_source(&mut self, v: ::std::string::String) {
        self.download_source = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_source(&mut self) -> &mut ::std::string::String {
        if self.download_source.is_none() {
            self.download_source.set_default();
        }
        self.download_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_source(&mut self) -> ::std::string::String {
        self.download_source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string objectid = 4;


    pub fn get_objectid(&self) -> &str {
        match self.objectid.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_objectid(&mut self) {
        self.objectid.clear();
    }

    pub fn has_objectid(&self) -> bool {
        self.objectid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_objectid(&mut self, v: ::std::string::String) {
        self.objectid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_objectid(&mut self) -> &mut ::std::string::String {
        if self.objectid.is_none() {
            self.objectid.set_default();
        }
        self.objectid.as_mut().unwrap()
    }

    // Take field
    pub fn take_objectid(&mut self) -> ::std::string::String {
        self.objectid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 cellid = 5;


    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }
    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional bool is_manifest = 6;


    pub fn get_is_manifest(&self) -> bool {
        self.is_manifest.unwrap_or(false)
    }
    pub fn clear_is_manifest(&mut self) {
        self.is_manifest = ::std::option::Option::None;
    }

    pub fn has_is_manifest(&self) -> bool {
        self.is_manifest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_manifest(&mut self, v: bool) {
        self.is_manifest = ::std::option::Option::Some(v);
    }

    // optional uint64 object_size = 7;


    pub fn get_object_size(&self) -> u64 {
        self.object_size.unwrap_or(0)
    }
    pub fn clear_object_size(&mut self) {
        self.object_size = ::std::option::Option::None;
    }

    pub fn has_object_size(&self) -> bool {
        self.object_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object_size(&mut self, v: u64) {
        self.object_size = ::std::option::Option::Some(v);
    }

    // optional uint32 corruption_type = 8;


    pub fn get_corruption_type(&self) -> u32 {
        self.corruption_type.unwrap_or(0)
    }
    pub fn clear_corruption_type(&mut self) {
        self.corruption_type = ::std::option::Option::None;
    }

    pub fn has_corruption_type(&self) -> bool {
        self.corruption_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_corruption_type(&mut self, v: u32) {
        self.corruption_type = ::std::option::Option::Some(v);
    }

    // optional bool used_https = 9;


    pub fn get_used_https(&self) -> bool {
        self.used_https.unwrap_or(false)
    }
    pub fn clear_used_https(&mut self) {
        self.used_https = ::std::option::Option::None;
    }

    pub fn has_used_https(&self) -> bool {
        self.used_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_https(&mut self, v: bool) {
        self.used_https = ::std::option::Option::Some(v);
    }

    // optional bool oc_proxy_detected = 10;


    pub fn get_oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.unwrap_or(false)
    }
    pub fn clear_oc_proxy_detected(&mut self) {
        self.oc_proxy_detected = ::std::option::Option::None;
    }

    pub fn has_oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oc_proxy_detected(&mut self, v: bool) {
        self.oc_proxy_detected = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.depotid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.download_source)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.objectid)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cellid = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_manifest = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.object_size = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.corruption_type = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.used_https = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.oc_proxy_detected = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.download_source.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.objectid.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_manifest {
            my_size += 2;
        }
        if let Some(v) = self.object_size {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.corruption_type {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.used_https {
            my_size += 2;
        }
        if let Some(v) = self.oc_proxy_detected {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.download_source.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.objectid.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.cellid {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.is_manifest {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.object_size {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.corruption_type {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.used_https {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.oc_proxy_detected {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        CDataPublisher_ClientContentCorruptionReport_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.appid },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "depotid",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.depotid },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.depotid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "download_source",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.download_source },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.download_source },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "objectid",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.objectid },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.objectid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cellid",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.cellid },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.cellid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_manifest",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.is_manifest },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.is_manifest },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "object_size",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.object_size },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.object_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "corruption_type",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.corruption_type },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.corruption_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "used_https",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.used_https },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.used_https },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "oc_proxy_detected",
                |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.oc_proxy_detected },
                |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.oc_proxy_detected },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CDataPublisher_ClientContentCorruptionReport_Notification>(
                "CDataPublisher_ClientContentCorruptionReport_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CDataPublisher_ClientContentCorruptionReport_Notification {
        static instance: ::protobuf::rt::LazyV2<CDataPublisher_ClientContentCorruptionReport_Notification> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CDataPublisher_ClientContentCorruptionReport_Notification::new)
    }
}

impl ::protobuf::Clear for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.download_source.clear();
        self.objectid.clear();
        self.cellid = ::std::option::Option::None;
        self.is_manifest = ::std::option::Option::None;
        self.object_size = ::std::option::Option::None;
        self.corruption_type = ::std::option::Option::None;
        self.used_https = ::std::option::Option::None;
        self.oc_proxy_detected = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CValveHWSurvey_GetSurveySchedule_Request {
    // message fields
    surveydatetoken: ::protobuf::SingularField<::std::string::String>,
    surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Request {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Request {
        <CValveHWSurvey_GetSurveySchedule_Request as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Request {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        ::std::default::Default::default()
    }

    // optional string surveydatetoken = 1;


    pub fn get_surveydatetoken(&self) -> &str {
        match self.surveydatetoken.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken.clear();
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: ::std::string::String) {
        self.surveydatetoken = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_surveydatetoken(&mut self) -> &mut ::std::string::String {
        if self.surveydatetoken.is_none() {
            self.surveydatetoken.set_default();
        }
        self.surveydatetoken.as_mut().unwrap()
    }

    // Take field
    pub fn take_surveydatetoken(&mut self) -> ::std::string::String {
        self.surveydatetoken.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 surveydatetokenversion = 2;


    pub fn get_surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }
    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.surveydatetoken)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.surveydatetokenversion = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.surveydatetoken.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.surveydatetoken.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        CValveHWSurvey_GetSurveySchedule_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "surveydatetoken",
                |m: &CValveHWSurvey_GetSurveySchedule_Request| { &m.surveydatetoken },
                |m: &mut CValveHWSurvey_GetSurveySchedule_Request| { &mut m.surveydatetoken },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "surveydatetokenversion",
                |m: &CValveHWSurvey_GetSurveySchedule_Request| { &m.surveydatetokenversion },
                |m: &mut CValveHWSurvey_GetSurveySchedule_Request| { &mut m.surveydatetokenversion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CValveHWSurvey_GetSurveySchedule_Request>(
                "CValveHWSurvey_GetSurveySchedule_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Request {
        static instance: ::protobuf::rt::LazyV2<CValveHWSurvey_GetSurveySchedule_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CValveHWSurvey_GetSurveySchedule_Request::new)
    }
}

impl ::protobuf::Clear for CValveHWSurvey_GetSurveySchedule_Request {
    fn clear(&mut self) {
        self.surveydatetoken.clear();
        self.surveydatetokenversion = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CValveHWSurvey_GetSurveySchedule_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CValveHWSurvey_GetSurveySchedule_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CValveHWSurvey_GetSurveySchedule_Response {
    // message fields
    surveydatetoken: ::std::option::Option<u32>,
    surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Response {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Response {
        <CValveHWSurvey_GetSurveySchedule_Response as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Response {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        ::std::default::Default::default()
    }

    // optional uint32 surveydatetoken = 1;


    pub fn get_surveydatetoken(&self) -> u32 {
        self.surveydatetoken.unwrap_or(0)
    }
    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: u32) {
        self.surveydatetoken = ::std::option::Option::Some(v);
    }

    // optional fixed64 surveydatetokenversion = 2;


    pub fn get_surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }
    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.surveydatetoken = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.surveydatetokenversion = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.surveydatetoken {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.surveydatetoken {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        CValveHWSurvey_GetSurveySchedule_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "surveydatetoken",
                |m: &CValveHWSurvey_GetSurveySchedule_Response| { &m.surveydatetoken },
                |m: &mut CValveHWSurvey_GetSurveySchedule_Response| { &mut m.surveydatetoken },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "surveydatetokenversion",
                |m: &CValveHWSurvey_GetSurveySchedule_Response| { &m.surveydatetokenversion },
                |m: &mut CValveHWSurvey_GetSurveySchedule_Response| { &mut m.surveydatetokenversion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CValveHWSurvey_GetSurveySchedule_Response>(
                "CValveHWSurvey_GetSurveySchedule_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Response {
        static instance: ::protobuf::rt::LazyV2<CValveHWSurvey_GetSurveySchedule_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CValveHWSurvey_GetSurveySchedule_Response::new)
    }
}

impl ::protobuf::Clear for CValveHWSurvey_GetSurveySchedule_Response {
    fn clear(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
        self.surveydatetokenversion = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CValveHWSurvey_GetSurveySchedule_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CValveHWSurvey_GetSurveySchedule_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-steammessages_datapublisher.steamclient.proto\x1a,steammessages_unifi\
    ed_base.steamclient.proto\"\xf3\x04\n9CDataPublisher_ClientContentCorrup\
    tionReport_Notification\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x18\n\x07depotid\x18\x02\x20\x01(\rR\x07depotid\x12I\n\x0fdownload_\
    source\x18\x03\x20\x01(\tR\x0edownloadSourceB\x20\x82\xb5\x18\x1chost\
    \x20name\x20of\x20download\x20source\x128\n\x08objectid\x18\x04\x20\x01(\
    \tR\x08objectidB\x1c\x82\xb5\x18\x18Chunk\x20SHA\x20or\x20Manifest\x20ID\
    \x12*\n\x06cellid\x18\x05\x20\x01(\rR\x06cellidB\x12\x82\xb5\x18\x0eClie\
    nt\x20Cell\x20ID\x12J\n\x0bis_manifest\x18\x06\x20\x01(\x08R\nisManifest\
    B)\x82\xb5\x18%The\x20object\x20is\x20a\x20manifest,\x20not\x20a\x20chun\
    k\x129\n\x0bobject_size\x18\x07\x20\x01(\x04R\nobjectSizeB\x18\x82\xb5\
    \x18\x14object\x20size\x20in\x20bytes\x12G\n\x0fcorruption_type\x18\x08\
    \x20\x01(\rR\x0ecorruptionTypeB\x1e\x82\xb5\x18\x1aSee\x20EContentCorrup\
    tionType\x128\n\nused_https\x18\t\x20\x01(\x08R\tusedHttpsB\x19\x82\xb5\
    \x18\x15the\x20request\x20was\x20HTTPS\x12K\n\x11oc_proxy_detected\x18\n\
    \x20\x01(\x08R\x0focProxyDetectedB\x1f\x82\xb5\x18\x1bdetected\x20an\x20\
    OpenCache\x20proxy\"\x8c\x01\n(CValveHWSurvey_GetSurveySchedule_Request\
    \x12(\n\x0fsurveydatetoken\x18\x01\x20\x01(\tR\x0fsurveydatetoken\x126\n\
    \x16surveydatetokenversion\x18\x02\x20\x01(\x06R\x16surveydatetokenversi\
    on\"\x8d\x01\n)CValveHWSurvey_GetSurveySchedule_Response\x12(\n\x0fsurve\
    ydatetoken\x18\x01\x20\x01(\rR\x0fsurveydatetoken\x126\n\x16surveydateto\
    kenversion\x18\x02\x20\x01(\x06R\x16surveydatetokenversion2\xa2\x01\n\rD\
    ataPublisher\x12h\n\x1dClientContentCorruptionReport\x12:.CDataPublisher\
    _ClientContentCorruptionReport_Notification\x1a\x0b.NoResponse\x1a'\x82\
    \xb5\x18#Data\x20Publisher\x20(DP)\x20server\x20services2\xac\x01\n\rVal\
    veHWSurvey\x12\x87\x01\n\x11GetSurveySchedule\x12).CValveHWSurvey_GetSur\
    veySchedule_Request\x1a*.CValveHWSurvey_GetSurveySchedule_Response\"\x1b\
    \x82\xb5\x18\x17Should\x20I\x20run\x20the\x20survey\x1a\x11\x82\xb5\x18\
    \rValveHWSurveyB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
