// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_clientlanp2p.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientLANP2PRequestChunks {
    // message fields
    pub chunk_keys: ::protobuf::RepeatedField<cmsg_client_lanp2prequest_chunks::ChunkKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunks {
    fn default() -> &'a CMsgClientLANP2PRequestChunks {
        <CMsgClientLANP2PRequestChunks as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunks {
    pub fn new() -> CMsgClientLANP2PRequestChunks {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientLANP2PRequestChunks {
    fn is_initialized(&self) -> bool {
        for v in &self.chunk_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.chunk_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.chunk_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.chunk_keys {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLANP2PRequestChunks {
        CMsgClientLANP2PRequestChunks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cmsg_client_lanp2prequest_chunks::ChunkKey>>(
                "chunk_keys",
                |m: &CMsgClientLANP2PRequestChunks| { &m.chunk_keys },
                |m: &mut CMsgClientLANP2PRequestChunks| { &mut m.chunk_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientLANP2PRequestChunks>(
                "CMsgClientLANP2PRequestChunks",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunks {
        static instance: ::protobuf::rt::Lazy<CMsgClientLANP2PRequestChunks> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientLANP2PRequestChunks::new)
    }
}

impl ::protobuf::Clear for CMsgClientLANP2PRequestChunks {
    fn clear(&mut self) {
        self.chunk_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLANP2PRequestChunks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLANP2PRequestChunks {
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunks`
pub mod cmsg_client_lanp2prequest_chunks {
    #[derive(PartialEq,Clone,Default)]
    pub struct ChunkKey {
        // message fields
        depot_id: ::std::option::Option<u32>,
        sha: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a ChunkKey {
        fn default() -> &'a ChunkKey {
            <ChunkKey as ::protobuf::Message>::default_instance()
        }
    }

    impl ChunkKey {
        pub fn new() -> ChunkKey {
            ::std::default::Default::default()
        }

        // optional uint32 depot_id = 1;

        pub fn get_depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 2;

        pub fn get_sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha.clear();
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha.set_default();
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for ChunkKey {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sha)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.depot_id {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.depot_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> ChunkKey {
            ChunkKey::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "depot_id",
                    |m: &ChunkKey| { &m.depot_id },
                    |m: &mut ChunkKey| { &mut m.depot_id },
                    ChunkKey::get_depot_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "sha",
                    |m: &ChunkKey| { &m.sha },
                    |m: &mut ChunkKey| { &mut m.sha },
                    ChunkKey::get_sha,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkKey>(
                    "CMsgClientLANP2PRequestChunks.ChunkKey",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static ChunkKey {
            static instance: ::protobuf::rt::Lazy<ChunkKey> = ::protobuf::rt::Lazy::INIT;
            instance.get(ChunkKey::new)
        }
    }

    impl ::protobuf::Clear for ChunkKey {
        fn clear(&mut self) {
            self.depot_id = ::std::option::Option::None;
            self.sha.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for ChunkKey {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChunkKey {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientLANP2PRequestChunksResponse {
    // message fields
    pub chunk_responses: ::protobuf::RepeatedField<cmsg_client_lanp2prequest_chunks_response::ChunkData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunksResponse {
    fn default() -> &'a CMsgClientLANP2PRequestChunksResponse {
        <CMsgClientLANP2PRequestChunksResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunksResponse {
    pub fn new() -> CMsgClientLANP2PRequestChunksResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientLANP2PRequestChunksResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.chunk_responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.chunk_responses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.chunk_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.chunk_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientLANP2PRequestChunksResponse {
        CMsgClientLANP2PRequestChunksResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cmsg_client_lanp2prequest_chunks_response::ChunkData>>(
                "chunk_responses",
                |m: &CMsgClientLANP2PRequestChunksResponse| { &m.chunk_responses },
                |m: &mut CMsgClientLANP2PRequestChunksResponse| { &mut m.chunk_responses },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientLANP2PRequestChunksResponse>(
                "CMsgClientLANP2PRequestChunksResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunksResponse {
        static instance: ::protobuf::rt::Lazy<CMsgClientLANP2PRequestChunksResponse> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientLANP2PRequestChunksResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientLANP2PRequestChunksResponse {
    fn clear(&mut self) {
        self.chunk_responses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientLANP2PRequestChunksResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLANP2PRequestChunksResponse {
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunksResponse`
pub mod cmsg_client_lanp2prequest_chunks_response {
    #[derive(PartialEq,Clone,Default)]
    pub struct ChunkData {
        // message fields
        result: ::std::option::Option<u32>,
        depot_id: ::std::option::Option<u32>,
        sha: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        chunk_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
        encrypted: ::std::option::Option<bool>,
        compressed: ::std::option::Option<bool>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a ChunkData {
        fn default() -> &'a ChunkData {
            <ChunkData as ::protobuf::Message>::default_instance()
        }
    }

    impl ChunkData {
        pub fn new() -> ChunkData {
            ::std::default::Default::default()
        }

        // optional uint32 result = 1;

        pub fn get_result(&self) -> u32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: u32) {
            self.result = ::std::option::Option::Some(v);
        }

        // optional uint32 depot_id = 2;

        pub fn get_depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 3;

        pub fn get_sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha.clear();
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha.set_default();
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes chunk_data = 4;

        pub fn get_chunk_data(&self) -> &[u8] {
            match self.chunk_data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_chunk_data(&mut self) {
            self.chunk_data.clear();
        }

        pub fn has_chunk_data(&self) -> bool {
            self.chunk_data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_chunk_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.chunk_data = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_chunk_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.chunk_data.is_none() {
                self.chunk_data.set_default();
            }
            self.chunk_data.as_mut().unwrap()
        }

        // Take field
        pub fn take_chunk_data(&mut self) -> ::std::vec::Vec<u8> {
            self.chunk_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bool encrypted = 5;

        pub fn get_encrypted(&self) -> bool {
            self.encrypted.unwrap_or(false)
        }

        pub fn clear_encrypted(&mut self) {
            self.encrypted = ::std::option::Option::None;
        }

        pub fn has_encrypted(&self) -> bool {
            self.encrypted.is_some()
        }

        // Param is passed by value, moved
        pub fn set_encrypted(&mut self, v: bool) {
            self.encrypted = ::std::option::Option::Some(v);
        }

        // optional bool compressed = 6;

        pub fn get_compressed(&self) -> bool {
            self.compressed.unwrap_or(false)
        }

        pub fn clear_compressed(&mut self) {
            self.compressed = ::std::option::Option::None;
        }

        pub fn has_compressed(&self) -> bool {
            self.compressed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_compressed(&mut self, v: bool) {
            self.compressed = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for ChunkData {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    3 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sha)?;
                    },
                    4 => {
                        ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.chunk_data)?;
                    },
                    5 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.encrypted = ::std::option::Option::Some(is.read_bool()?);
                    },
                    6 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.compressed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.result {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.depot_id {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.chunk_data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.encrypted {
                my_size += 2;
            }
            if let Some(v) = self.compressed {
                my_size += 2;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.result {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.depot_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.chunk_data.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.encrypted {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.compressed {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> ChunkData {
            ChunkData::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "result",
                    |m: &ChunkData| { &m.result },
                    |m: &mut ChunkData| { &mut m.result },
                    ChunkData::get_result,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "depot_id",
                    |m: &ChunkData| { &m.depot_id },
                    |m: &mut ChunkData| { &mut m.depot_id },
                    ChunkData::get_depot_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "sha",
                    |m: &ChunkData| { &m.sha },
                    |m: &mut ChunkData| { &mut m.sha },
                    ChunkData::get_sha,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                    "chunk_data",
                    |m: &ChunkData| { &m.chunk_data },
                    |m: &mut ChunkData| { &mut m.chunk_data },
                    ChunkData::get_chunk_data,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                    "encrypted",
                    |m: &ChunkData| { &m.encrypted },
                    |m: &mut ChunkData| { &mut m.encrypted },
                    ChunkData::get_encrypted,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                    "compressed",
                    |m: &ChunkData| { &m.compressed },
                    |m: &mut ChunkData| { &mut m.compressed },
                    ChunkData::get_compressed,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkData>(
                    "CMsgClientLANP2PRequestChunksResponse.ChunkData",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static ChunkData {
            static instance: ::protobuf::rt::Lazy<ChunkData> = ::protobuf::rt::Lazy::INIT;
            instance.get(ChunkData::new)
        }
    }

    impl ::protobuf::Clear for ChunkData {
        fn clear(&mut self) {
            self.result = ::std::option::Option::None;
            self.depot_id = ::std::option::Option::None;
            self.sha.clear();
            self.chunk_data.clear();
            self.encrypted = ::std::option::Option::None;
            self.compressed = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for ChunkData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChunkData {
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20steammessages_clientlanp2p.proto\x1a\x18steammessages_base.proto\"\
    \xa0\x01\n\x1dCMsgClientLANP2PRequestChunks\x12F\n\nchunk_keys\x18\x01\
    \x20\x03(\x0b2'.CMsgClientLANP2PRequestChunks.ChunkKeyR\tchunkKeys\x1a7\
    \n\x08ChunkKey\x12\x19\n\x08depot_id\x18\x01\x20\x01(\rR\x07depotId\x12\
    \x10\n\x03sha\x18\x02\x20\x01(\x0cR\x03sha\"\xb2\x02\n%CMsgClientLANP2PR\
    equestChunksResponse\x12Y\n\x0fchunk_responses\x18\x01\x20\x03(\x0b20.CM\
    sgClientLANP2PRequestChunksResponse.ChunkDataR\x0echunkResponses\x1a\xad\
    \x01\n\tChunkData\x12\x16\n\x06result\x18\x01\x20\x01(\rR\x06result\x12\
    \x19\n\x08depot_id\x18\x02\x20\x01(\rR\x07depotId\x12\x10\n\x03sha\x18\
    \x03\x20\x01(\x0cR\x03sha\x12\x1d\n\nchunk_data\x18\x04\x20\x01(\x0cR\tc\
    hunkData\x12\x1c\n\tencrypted\x18\x05\x20\x01(\x08R\tencrypted\x12\x1e\n\
    \ncompressed\x18\x06\x20\x01(\x08R\ncompressedB\x05H\x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
