// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_broadcast.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BeginBroadcastSession_Request {
    // message fields
    permission: ::std::option::Option<i32>,
    gameid: ::std::option::Option<u64>,
    client_instance_id: ::std::option::Option<u64>,
    title: ::protobuf::SingularField<::std::string::String>,
    cellid: ::std::option::Option<u32>,
    rtmp_token: ::std::option::Option<u64>,
    thumbnail_upload: ::std::option::Option<bool>,
    client_beta: ::protobuf::SingularField<::std::string::String>,
    sysid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BeginBroadcastSession_Request {
    fn default() -> &'a CBroadcast_BeginBroadcastSession_Request {
        <CBroadcast_BeginBroadcastSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BeginBroadcastSession_Request {
    pub fn new() -> CBroadcast_BeginBroadcastSession_Request {
        ::std::default::Default::default()
    }

    // optional int32 permission = 1;

    pub fn get_permission(&self) -> i32 {
        self.permission.unwrap_or(0)
    }

    pub fn clear_permission(&mut self) {
        self.permission = ::std::option::Option::None;
    }

    pub fn has_permission(&self) -> bool {
        self.permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: i32) {
        self.permission = ::std::option::Option::Some(v);
    }

    // optional uint64 gameid = 2;

    pub fn get_gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // optional uint64 client_instance_id = 3;

    pub fn get_client_instance_id(&self) -> u64 {
        self.client_instance_id.unwrap_or(0)
    }

    pub fn clear_client_instance_id(&mut self) {
        self.client_instance_id = ::std::option::Option::None;
    }

    pub fn has_client_instance_id(&self) -> bool {
        self.client_instance_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_instance_id(&mut self, v: u64) {
        self.client_instance_id = ::std::option::Option::Some(v);
    }

    // optional string title = 4;

    pub fn get_title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 cellid = 5;

    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional uint64 rtmp_token = 6;

    pub fn get_rtmp_token(&self) -> u64 {
        self.rtmp_token.unwrap_or(0)
    }

    pub fn clear_rtmp_token(&mut self) {
        self.rtmp_token = ::std::option::Option::None;
    }

    pub fn has_rtmp_token(&self) -> bool {
        self.rtmp_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtmp_token(&mut self, v: u64) {
        self.rtmp_token = ::std::option::Option::Some(v);
    }

    // optional bool thumbnail_upload = 7;

    pub fn get_thumbnail_upload(&self) -> bool {
        self.thumbnail_upload.unwrap_or(false)
    }

    pub fn clear_thumbnail_upload(&mut self) {
        self.thumbnail_upload = ::std::option::Option::None;
    }

    pub fn has_thumbnail_upload(&self) -> bool {
        self.thumbnail_upload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_upload(&mut self, v: bool) {
        self.thumbnail_upload = ::std::option::Option::Some(v);
    }

    // optional string client_beta = 8;

    pub fn get_client_beta(&self) -> &str {
        match self.client_beta.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_client_beta(&mut self) {
        self.client_beta.clear();
    }

    pub fn has_client_beta(&self) -> bool {
        self.client_beta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_beta(&mut self, v: ::std::string::String) {
        self.client_beta = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_beta(&mut self) -> &mut ::std::string::String {
        if self.client_beta.is_none() {
            self.client_beta.set_default();
        }
        self.client_beta.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_beta(&mut self) -> ::std::string::String {
        self.client_beta.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 sysid = 9;

    pub fn get_sysid(&self) -> u32 {
        self.sysid.unwrap_or(0)
    }

    pub fn clear_sysid(&mut self) {
        self.sysid = ::std::option::Option::None;
    }

    pub fn has_sysid(&self) -> bool {
        self.sysid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sysid(&mut self, v: u32) {
        self.sysid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_BeginBroadcastSession_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.permission = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_instance_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rtmp_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_upload = ::std::option::Option::Some(is.read_bool()?);
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_beta)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sysid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.permission {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gameid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_instance_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.rtmp_token {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thumbnail_upload {
            my_size += 2;
        }
        if let Some(v) = self.client_beta.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.sysid {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.permission {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.gameid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.client_instance_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.cellid {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.rtmp_token {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.thumbnail_upload {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.client_beta.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.sysid {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BeginBroadcastSession_Request {
        CBroadcast_BeginBroadcastSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "permission",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.permission },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.permission },
                CBroadcast_BeginBroadcastSession_Request::get_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "gameid",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.gameid },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.gameid },
                CBroadcast_BeginBroadcastSession_Request::get_gameid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "client_instance_id",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.client_instance_id },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.client_instance_id },
                CBroadcast_BeginBroadcastSession_Request::get_client_instance_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "title",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.title },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.title },
                CBroadcast_BeginBroadcastSession_Request::get_title,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "cellid",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.cellid },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.cellid },
                CBroadcast_BeginBroadcastSession_Request::get_cellid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "rtmp_token",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.rtmp_token },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.rtmp_token },
                CBroadcast_BeginBroadcastSession_Request::get_rtmp_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "thumbnail_upload",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.thumbnail_upload },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.thumbnail_upload },
                CBroadcast_BeginBroadcastSession_Request::get_thumbnail_upload,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "client_beta",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.client_beta },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.client_beta },
                CBroadcast_BeginBroadcastSession_Request::get_client_beta,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "sysid",
                |m: &CBroadcast_BeginBroadcastSession_Request| { &m.sysid },
                |m: &mut CBroadcast_BeginBroadcastSession_Request| { &mut m.sysid },
                CBroadcast_BeginBroadcastSession_Request::get_sysid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BeginBroadcastSession_Request>(
                "CBroadcast_BeginBroadcastSession_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BeginBroadcastSession_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BeginBroadcastSession_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BeginBroadcastSession_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BeginBroadcastSession_Request {
    fn clear(&mut self) {
        self.permission = ::std::option::Option::None;
        self.gameid = ::std::option::Option::None;
        self.client_instance_id = ::std::option::Option::None;
        self.title.clear();
        self.cellid = ::std::option::Option::None;
        self.rtmp_token = ::std::option::Option::None;
        self.thumbnail_upload = ::std::option::Option::None;
        self.client_beta.clear();
        self.sysid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BeginBroadcastSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BeginBroadcastSession_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BeginBroadcastSession_Response {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    thumbnail_upload_address: ::protobuf::SingularField<::std::string::String>,
    thumbnail_upload_token: ::protobuf::SingularField<::std::string::String>,
    thumbnail_interval_seconds: ::std::option::Option<u32>,
    heartbeat_interval_seconds: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BeginBroadcastSession_Response {
    fn default() -> &'a CBroadcast_BeginBroadcastSession_Response {
        <CBroadcast_BeginBroadcastSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BeginBroadcastSession_Response {
    pub fn new() -> CBroadcast_BeginBroadcastSession_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional string thumbnail_upload_address = 2;

    pub fn get_thumbnail_upload_address(&self) -> &str {
        match self.thumbnail_upload_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_upload_address(&mut self) {
        self.thumbnail_upload_address.clear();
    }

    pub fn has_thumbnail_upload_address(&self) -> bool {
        self.thumbnail_upload_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_upload_address(&mut self, v: ::std::string::String) {
        self.thumbnail_upload_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_upload_address(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_upload_address.is_none() {
            self.thumbnail_upload_address.set_default();
        }
        self.thumbnail_upload_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_upload_address(&mut self) -> ::std::string::String {
        self.thumbnail_upload_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string thumbnail_upload_token = 3;

    pub fn get_thumbnail_upload_token(&self) -> &str {
        match self.thumbnail_upload_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_upload_token(&mut self) {
        self.thumbnail_upload_token.clear();
    }

    pub fn has_thumbnail_upload_token(&self) -> bool {
        self.thumbnail_upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_upload_token(&mut self, v: ::std::string::String) {
        self.thumbnail_upload_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_upload_token(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_upload_token.is_none() {
            self.thumbnail_upload_token.set_default();
        }
        self.thumbnail_upload_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_upload_token(&mut self) -> ::std::string::String {
        self.thumbnail_upload_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 thumbnail_interval_seconds = 4;

    pub fn get_thumbnail_interval_seconds(&self) -> u32 {
        self.thumbnail_interval_seconds.unwrap_or(0)
    }

    pub fn clear_thumbnail_interval_seconds(&mut self) {
        self.thumbnail_interval_seconds = ::std::option::Option::None;
    }

    pub fn has_thumbnail_interval_seconds(&self) -> bool {
        self.thumbnail_interval_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_interval_seconds(&mut self, v: u32) {
        self.thumbnail_interval_seconds = ::std::option::Option::Some(v);
    }

    // optional uint32 heartbeat_interval_seconds = 5;

    pub fn get_heartbeat_interval_seconds(&self) -> u32 {
        self.heartbeat_interval_seconds.unwrap_or(0)
    }

    pub fn clear_heartbeat_interval_seconds(&mut self) {
        self.heartbeat_interval_seconds = ::std::option::Option::None;
    }

    pub fn has_heartbeat_interval_seconds(&self) -> bool {
        self.heartbeat_interval_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_interval_seconds(&mut self, v: u32) {
        self.heartbeat_interval_seconds = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_BeginBroadcastSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_upload_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_upload_token)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_interval_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.heartbeat_interval_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.thumbnail_upload_address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.thumbnail_upload_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.thumbnail_interval_seconds {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.heartbeat_interval_seconds {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.thumbnail_upload_address.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.thumbnail_upload_token.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.thumbnail_interval_seconds {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.heartbeat_interval_seconds {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BeginBroadcastSession_Response {
        CBroadcast_BeginBroadcastSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_BeginBroadcastSession_Response| { &m.broadcast_id },
                |m: &mut CBroadcast_BeginBroadcastSession_Response| { &mut m.broadcast_id },
                CBroadcast_BeginBroadcastSession_Response::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_upload_address",
                |m: &CBroadcast_BeginBroadcastSession_Response| { &m.thumbnail_upload_address },
                |m: &mut CBroadcast_BeginBroadcastSession_Response| { &mut m.thumbnail_upload_address },
                CBroadcast_BeginBroadcastSession_Response::get_thumbnail_upload_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_upload_token",
                |m: &CBroadcast_BeginBroadcastSession_Response| { &m.thumbnail_upload_token },
                |m: &mut CBroadcast_BeginBroadcastSession_Response| { &mut m.thumbnail_upload_token },
                CBroadcast_BeginBroadcastSession_Response::get_thumbnail_upload_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "thumbnail_interval_seconds",
                |m: &CBroadcast_BeginBroadcastSession_Response| { &m.thumbnail_interval_seconds },
                |m: &mut CBroadcast_BeginBroadcastSession_Response| { &mut m.thumbnail_interval_seconds },
                CBroadcast_BeginBroadcastSession_Response::get_thumbnail_interval_seconds,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "heartbeat_interval_seconds",
                |m: &CBroadcast_BeginBroadcastSession_Response| { &m.heartbeat_interval_seconds },
                |m: &mut CBroadcast_BeginBroadcastSession_Response| { &mut m.heartbeat_interval_seconds },
                CBroadcast_BeginBroadcastSession_Response::get_heartbeat_interval_seconds,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BeginBroadcastSession_Response>(
                "CBroadcast_BeginBroadcastSession_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BeginBroadcastSession_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BeginBroadcastSession_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BeginBroadcastSession_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BeginBroadcastSession_Response {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.thumbnail_upload_address.clear();
        self.thumbnail_upload_token.clear();
        self.thumbnail_interval_seconds = ::std::option::Option::None;
        self.heartbeat_interval_seconds = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BeginBroadcastSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BeginBroadcastSession_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_EndBroadcastSession_Request {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_EndBroadcastSession_Request {
    fn default() -> &'a CBroadcast_EndBroadcastSession_Request {
        <CBroadcast_EndBroadcastSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_EndBroadcastSession_Request {
    pub fn new() -> CBroadcast_EndBroadcastSession_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_EndBroadcastSession_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_EndBroadcastSession_Request {
        CBroadcast_EndBroadcastSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_EndBroadcastSession_Request| { &m.broadcast_id },
                |m: &mut CBroadcast_EndBroadcastSession_Request| { &mut m.broadcast_id },
                CBroadcast_EndBroadcastSession_Request::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_EndBroadcastSession_Request>(
                "CBroadcast_EndBroadcastSession_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_EndBroadcastSession_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_EndBroadcastSession_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_EndBroadcastSession_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_EndBroadcastSession_Request {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_EndBroadcastSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_EndBroadcastSession_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_EndBroadcastSession_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_EndBroadcastSession_Response {
    fn default() -> &'a CBroadcast_EndBroadcastSession_Response {
        <CBroadcast_EndBroadcastSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_EndBroadcastSession_Response {
    pub fn new() -> CBroadcast_EndBroadcastSession_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_EndBroadcastSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_EndBroadcastSession_Response {
        CBroadcast_EndBroadcastSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_EndBroadcastSession_Response>(
                "CBroadcast_EndBroadcastSession_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_EndBroadcastSession_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_EndBroadcastSession_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_EndBroadcastSession_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_EndBroadcastSession_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_EndBroadcastSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_EndBroadcastSession_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StartBroadcastUpload_Request {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    cellid: ::std::option::Option<u32>,
    as_rtmp: ::std::option::Option<bool>,
    delay_seconds: ::std::option::Option<u32>,
    rtmp_token: ::std::option::Option<u64>,
    upload_ip_address: ::std::option::Option<u32>,
    is_replay: ::std::option::Option<bool>,
    sysid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StartBroadcastUpload_Request {
    fn default() -> &'a CBroadcast_StartBroadcastUpload_Request {
        <CBroadcast_StartBroadcastUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StartBroadcastUpload_Request {
    pub fn new() -> CBroadcast_StartBroadcastUpload_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional uint32 cellid = 2;

    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional bool as_rtmp = 3;

    pub fn get_as_rtmp(&self) -> bool {
        self.as_rtmp.unwrap_or(false)
    }

    pub fn clear_as_rtmp(&mut self) {
        self.as_rtmp = ::std::option::Option::None;
    }

    pub fn has_as_rtmp(&self) -> bool {
        self.as_rtmp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_as_rtmp(&mut self, v: bool) {
        self.as_rtmp = ::std::option::Option::Some(v);
    }

    // optional uint32 delay_seconds = 4;

    pub fn get_delay_seconds(&self) -> u32 {
        self.delay_seconds.unwrap_or(0)
    }

    pub fn clear_delay_seconds(&mut self) {
        self.delay_seconds = ::std::option::Option::None;
    }

    pub fn has_delay_seconds(&self) -> bool {
        self.delay_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay_seconds(&mut self, v: u32) {
        self.delay_seconds = ::std::option::Option::Some(v);
    }

    // optional uint64 rtmp_token = 5;

    pub fn get_rtmp_token(&self) -> u64 {
        self.rtmp_token.unwrap_or(0u64)
    }

    pub fn clear_rtmp_token(&mut self) {
        self.rtmp_token = ::std::option::Option::None;
    }

    pub fn has_rtmp_token(&self) -> bool {
        self.rtmp_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtmp_token(&mut self, v: u64) {
        self.rtmp_token = ::std::option::Option::Some(v);
    }

    // optional uint32 upload_ip_address = 6;

    pub fn get_upload_ip_address(&self) -> u32 {
        self.upload_ip_address.unwrap_or(0)
    }

    pub fn clear_upload_ip_address(&mut self) {
        self.upload_ip_address = ::std::option::Option::None;
    }

    pub fn has_upload_ip_address(&self) -> bool {
        self.upload_ip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_ip_address(&mut self, v: u32) {
        self.upload_ip_address = ::std::option::Option::Some(v);
    }

    // optional bool is_replay = 7;

    pub fn get_is_replay(&self) -> bool {
        self.is_replay.unwrap_or(false)
    }

    pub fn clear_is_replay(&mut self) {
        self.is_replay = ::std::option::Option::None;
    }

    pub fn has_is_replay(&self) -> bool {
        self.is_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_replay(&mut self, v: bool) {
        self.is_replay = ::std::option::Option::Some(v);
    }

    // optional uint32 sysid = 8;

    pub fn get_sysid(&self) -> u32 {
        self.sysid.unwrap_or(0)
    }

    pub fn clear_sysid(&mut self) {
        self.sysid = ::std::option::Option::None;
    }

    pub fn has_sysid(&self) -> bool {
        self.sysid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sysid(&mut self, v: u32) {
        self.sysid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_StartBroadcastUpload_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.as_rtmp = ::std::option::Option::Some(is.read_bool()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.delay_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rtmp_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upload_ip_address = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sysid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.as_rtmp {
            my_size += 2;
        }
        if let Some(v) = self.delay_seconds {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.rtmp_token {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.upload_ip_address {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_replay {
            my_size += 2;
        }
        if let Some(v) = self.sysid {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.cellid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.as_rtmp {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.delay_seconds {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.rtmp_token {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.upload_ip_address {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.is_replay {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.sysid {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StartBroadcastUpload_Request {
        CBroadcast_StartBroadcastUpload_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.broadcast_id },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.broadcast_id },
                CBroadcast_StartBroadcastUpload_Request::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "cellid",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.cellid },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.cellid },
                CBroadcast_StartBroadcastUpload_Request::get_cellid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "as_rtmp",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.as_rtmp },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.as_rtmp },
                CBroadcast_StartBroadcastUpload_Request::get_as_rtmp,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "delay_seconds",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.delay_seconds },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.delay_seconds },
                CBroadcast_StartBroadcastUpload_Request::get_delay_seconds,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "rtmp_token",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.rtmp_token },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.rtmp_token },
                CBroadcast_StartBroadcastUpload_Request::get_rtmp_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "upload_ip_address",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.upload_ip_address },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.upload_ip_address },
                CBroadcast_StartBroadcastUpload_Request::get_upload_ip_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_replay",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.is_replay },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.is_replay },
                CBroadcast_StartBroadcastUpload_Request::get_is_replay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "sysid",
                |m: &CBroadcast_StartBroadcastUpload_Request| { &m.sysid },
                |m: &mut CBroadcast_StartBroadcastUpload_Request| { &mut m.sysid },
                CBroadcast_StartBroadcastUpload_Request::get_sysid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StartBroadcastUpload_Request>(
                "CBroadcast_StartBroadcastUpload_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StartBroadcastUpload_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StartBroadcastUpload_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StartBroadcastUpload_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StartBroadcastUpload_Request {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.cellid = ::std::option::Option::None;
        self.as_rtmp = ::std::option::Option::None;
        self.delay_seconds = ::std::option::Option::None;
        self.rtmp_token = ::std::option::Option::None;
        self.upload_ip_address = ::std::option::Option::None;
        self.is_replay = ::std::option::Option::None;
        self.sysid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StartBroadcastUpload_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StartBroadcastUpload_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StartBroadcastUpload_Response {
    // message fields
    upload_token: ::protobuf::SingularField<::std::string::String>,
    upload_address: ::protobuf::SingularField<::std::string::String>,
    broadcast_upload_id: ::std::option::Option<u64>,
    enable_replay: ::std::option::Option<bool>,
    http_address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StartBroadcastUpload_Response {
    fn default() -> &'a CBroadcast_StartBroadcastUpload_Response {
        <CBroadcast_StartBroadcastUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StartBroadcastUpload_Response {
    pub fn new() -> CBroadcast_StartBroadcastUpload_Response {
        ::std::default::Default::default()
    }

    // optional string upload_token = 1;

    pub fn get_upload_token(&self) -> &str {
        match self.upload_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token.clear();
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: ::std::string::String) {
        self.upload_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upload_token(&mut self) -> &mut ::std::string::String {
        if self.upload_token.is_none() {
            self.upload_token.set_default();
        }
        self.upload_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_upload_token(&mut self) -> ::std::string::String {
        self.upload_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string upload_address = 2;

    pub fn get_upload_address(&self) -> &str {
        match self.upload_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_upload_address(&mut self) {
        self.upload_address.clear();
    }

    pub fn has_upload_address(&self) -> bool {
        self.upload_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_address(&mut self, v: ::std::string::String) {
        self.upload_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upload_address(&mut self) -> &mut ::std::string::String {
        if self.upload_address.is_none() {
            self.upload_address.set_default();
        }
        self.upload_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_upload_address(&mut self) -> ::std::string::String {
        self.upload_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 broadcast_upload_id = 3;

    pub fn get_broadcast_upload_id(&self) -> u64 {
        self.broadcast_upload_id.unwrap_or(0)
    }

    pub fn clear_broadcast_upload_id(&mut self) {
        self.broadcast_upload_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_upload_id(&self) -> bool {
        self.broadcast_upload_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_upload_id(&mut self, v: u64) {
        self.broadcast_upload_id = ::std::option::Option::Some(v);
    }

    // optional bool enable_replay = 6;

    pub fn get_enable_replay(&self) -> bool {
        self.enable_replay.unwrap_or(false)
    }

    pub fn clear_enable_replay(&mut self) {
        self.enable_replay = ::std::option::Option::None;
    }

    pub fn has_enable_replay(&self) -> bool {
        self.enable_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable_replay(&mut self, v: bool) {
        self.enable_replay = ::std::option::Option::Some(v);
    }

    // optional string http_address = 7;

    pub fn get_http_address(&self) -> &str {
        match self.http_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_address(&mut self) {
        self.http_address.clear();
    }

    pub fn has_http_address(&self) -> bool {
        self.http_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_address(&mut self, v: ::std::string::String) {
        self.http_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_address(&mut self) -> &mut ::std::string::String {
        if self.http_address.is_none() {
            self.http_address.set_default();
        }
        self.http_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_address(&mut self) -> ::std::string::String {
        self.http_address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_StartBroadcastUpload_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.upload_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.upload_address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_upload_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enable_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.http_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.upload_address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.broadcast_upload_id {
            my_size += 9;
        }
        if let Some(v) = self.enable_replay {
            my_size += 2;
        }
        if let Some(v) = self.http_address.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.upload_address.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.broadcast_upload_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.enable_replay {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.http_address.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StartBroadcastUpload_Response {
        CBroadcast_StartBroadcastUpload_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "upload_token",
                |m: &CBroadcast_StartBroadcastUpload_Response| { &m.upload_token },
                |m: &mut CBroadcast_StartBroadcastUpload_Response| { &mut m.upload_token },
                CBroadcast_StartBroadcastUpload_Response::get_upload_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "upload_address",
                |m: &CBroadcast_StartBroadcastUpload_Response| { &m.upload_address },
                |m: &mut CBroadcast_StartBroadcastUpload_Response| { &mut m.upload_address },
                CBroadcast_StartBroadcastUpload_Response::get_upload_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_upload_id",
                |m: &CBroadcast_StartBroadcastUpload_Response| { &m.broadcast_upload_id },
                |m: &mut CBroadcast_StartBroadcastUpload_Response| { &mut m.broadcast_upload_id },
                CBroadcast_StartBroadcastUpload_Response::get_broadcast_upload_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "enable_replay",
                |m: &CBroadcast_StartBroadcastUpload_Response| { &m.enable_replay },
                |m: &mut CBroadcast_StartBroadcastUpload_Response| { &mut m.enable_replay },
                CBroadcast_StartBroadcastUpload_Response::get_enable_replay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "http_address",
                |m: &CBroadcast_StartBroadcastUpload_Response| { &m.http_address },
                |m: &mut CBroadcast_StartBroadcastUpload_Response| { &mut m.http_address },
                CBroadcast_StartBroadcastUpload_Response::get_http_address,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StartBroadcastUpload_Response>(
                "CBroadcast_StartBroadcastUpload_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StartBroadcastUpload_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StartBroadcastUpload_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StartBroadcastUpload_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StartBroadcastUpload_Response {
    fn clear(&mut self) {
        self.upload_token.clear();
        self.upload_address.clear();
        self.broadcast_upload_id = ::std::option::Option::None;
        self.enable_replay = ::std::option::Option::None;
        self.http_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StartBroadcastUpload_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StartBroadcastUpload_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_NotifyBroadcastUploadStop_Notification {
    // message fields
    broadcast_upload_id: ::std::option::Option<u64>,
    upload_result: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_NotifyBroadcastUploadStop_Notification {
    fn default() -> &'a CBroadcast_NotifyBroadcastUploadStop_Notification {
        <CBroadcast_NotifyBroadcastUploadStop_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_NotifyBroadcastUploadStop_Notification {
    pub fn new() -> CBroadcast_NotifyBroadcastUploadStop_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_upload_id = 1;

    pub fn get_broadcast_upload_id(&self) -> u64 {
        self.broadcast_upload_id.unwrap_or(0)
    }

    pub fn clear_broadcast_upload_id(&mut self) {
        self.broadcast_upload_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_upload_id(&self) -> bool {
        self.broadcast_upload_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_upload_id(&mut self, v: u64) {
        self.broadcast_upload_id = ::std::option::Option::Some(v);
    }

    // optional uint32 upload_result = 2;

    pub fn get_upload_result(&self) -> u32 {
        self.upload_result.unwrap_or(0)
    }

    pub fn clear_upload_result(&mut self) {
        self.upload_result = ::std::option::Option::None;
    }

    pub fn has_upload_result(&self) -> bool {
        self.upload_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_result(&mut self, v: u32) {
        self.upload_result = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_NotifyBroadcastUploadStop_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_upload_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upload_result = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_upload_id {
            my_size += 9;
        }
        if let Some(v) = self.upload_result {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_upload_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.upload_result {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_NotifyBroadcastUploadStop_Notification {
        CBroadcast_NotifyBroadcastUploadStop_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_upload_id",
                |m: &CBroadcast_NotifyBroadcastUploadStop_Notification| { &m.broadcast_upload_id },
                |m: &mut CBroadcast_NotifyBroadcastUploadStop_Notification| { &mut m.broadcast_upload_id },
                CBroadcast_NotifyBroadcastUploadStop_Notification::get_broadcast_upload_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "upload_result",
                |m: &CBroadcast_NotifyBroadcastUploadStop_Notification| { &m.upload_result },
                |m: &mut CBroadcast_NotifyBroadcastUploadStop_Notification| { &mut m.upload_result },
                CBroadcast_NotifyBroadcastUploadStop_Notification::get_upload_result,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_NotifyBroadcastUploadStop_Notification>(
                "CBroadcast_NotifyBroadcastUploadStop_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_NotifyBroadcastUploadStop_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_NotifyBroadcastUploadStop_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_NotifyBroadcastUploadStop_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_NotifyBroadcastUploadStop_Notification {
    fn clear(&mut self) {
        self.broadcast_upload_id = ::std::option::Option::None;
        self.upload_result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_NotifyBroadcastUploadStop_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_NotifyBroadcastUploadStop_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WatchBroadcast_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    existing_broadcast_id: ::std::option::Option<u64>,
    viewer_token: ::std::option::Option<u64>,
    client_ip: ::std::option::Option<u32>,
    client_cell: ::std::option::Option<u32>,
    watch_location: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EBroadcastWatchLocation>>,
    is_webrtc: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WatchBroadcast_Request {
    fn default() -> &'a CBroadcast_WatchBroadcast_Request {
        <CBroadcast_WatchBroadcast_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WatchBroadcast_Request {
    pub fn new() -> CBroadcast_WatchBroadcast_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 existing_broadcast_id = 2;

    pub fn get_existing_broadcast_id(&self) -> u64 {
        self.existing_broadcast_id.unwrap_or(0)
    }

    pub fn clear_existing_broadcast_id(&mut self) {
        self.existing_broadcast_id = ::std::option::Option::None;
    }

    pub fn has_existing_broadcast_id(&self) -> bool {
        self.existing_broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existing_broadcast_id(&mut self, v: u64) {
        self.existing_broadcast_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_token = 3;

    pub fn get_viewer_token(&self) -> u64 {
        self.viewer_token.unwrap_or(0)
    }

    pub fn clear_viewer_token(&mut self) {
        self.viewer_token = ::std::option::Option::None;
    }

    pub fn has_viewer_token(&self) -> bool {
        self.viewer_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_token(&mut self, v: u64) {
        self.viewer_token = ::std::option::Option::Some(v);
    }

    // optional uint32 client_ip = 4;

    pub fn get_client_ip(&self) -> u32 {
        self.client_ip.unwrap_or(0)
    }

    pub fn clear_client_ip(&mut self) {
        self.client_ip = ::std::option::Option::None;
    }

    pub fn has_client_ip(&self) -> bool {
        self.client_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_ip(&mut self, v: u32) {
        self.client_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 client_cell = 5;

    pub fn get_client_cell(&self) -> u32 {
        self.client_cell.unwrap_or(0)
    }

    pub fn clear_client_cell(&mut self) {
        self.client_cell = ::std::option::Option::None;
    }

    pub fn has_client_cell(&self) -> bool {
        self.client_cell.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_cell(&mut self, v: u32) {
        self.client_cell = ::std::option::Option::Some(v);
    }

    // optional .EBroadcastWatchLocation watch_location = 6;

    pub fn get_watch_location(&self) -> EBroadcastWatchLocation {
        match self.watch_location {
            Some(e) => e.enum_value_or(EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid),
            None => EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid,
        }
    }

    pub fn clear_watch_location(&mut self) {
        self.watch_location = ::std::option::Option::None;
    }

    pub fn has_watch_location(&self) -> bool {
        self.watch_location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_location(&mut self, v: EBroadcastWatchLocation) {
        self.watch_location = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional bool is_webrtc = 7;

    pub fn get_is_webrtc(&self) -> bool {
        self.is_webrtc.unwrap_or(false)
    }

    pub fn clear_is_webrtc(&mut self) {
        self.is_webrtc = ::std::option::Option::None;
    }

    pub fn has_is_webrtc(&self) -> bool {
        self.is_webrtc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_webrtc(&mut self, v: bool) {
        self.is_webrtc = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WatchBroadcast_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.existing_broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_cell = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.watch_location = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_webrtc = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.existing_broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.viewer_token {
            my_size += 9;
        }
        if let Some(v) = self.client_ip {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_cell {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.watch_location {
            my_size += ::protobuf::rt::enum_or_unknown_size(6, v);
        }
        if let Some(v) = self.is_webrtc {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.existing_broadcast_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.viewer_token {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.client_ip {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.client_cell {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.watch_location {
            os.write_enum(6, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_webrtc {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WatchBroadcast_Request {
        CBroadcast_WatchBroadcast_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.steamid },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.steamid },
                CBroadcast_WatchBroadcast_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "existing_broadcast_id",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.existing_broadcast_id },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.existing_broadcast_id },
                CBroadcast_WatchBroadcast_Request::get_existing_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_token",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.viewer_token },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.viewer_token },
                CBroadcast_WatchBroadcast_Request::get_viewer_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "client_ip",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.client_ip },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.client_ip },
                CBroadcast_WatchBroadcast_Request::get_client_ip,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "client_cell",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.client_cell },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.client_cell },
                CBroadcast_WatchBroadcast_Request::get_client_cell,
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EBroadcastWatchLocation>(
                "watch_location",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.watch_location },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.watch_location },
                EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_webrtc",
                |m: &CBroadcast_WatchBroadcast_Request| { &m.is_webrtc },
                |m: &mut CBroadcast_WatchBroadcast_Request| { &mut m.is_webrtc },
                CBroadcast_WatchBroadcast_Request::get_is_webrtc,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WatchBroadcast_Request>(
                "CBroadcast_WatchBroadcast_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WatchBroadcast_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WatchBroadcast_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WatchBroadcast_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WatchBroadcast_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.existing_broadcast_id = ::std::option::Option::None;
        self.viewer_token = ::std::option::Option::None;
        self.client_ip = ::std::option::Option::None;
        self.client_cell = ::std::option::Option::None;
        self.watch_location = ::std::option::Option::None;
        self.is_webrtc = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WatchBroadcast_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WatchBroadcast_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WatchBroadcast_Response {
    // message fields
    response: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<cbroadcast_watch_broadcast_response::EWatchResponse>>,
    mpd_url: ::protobuf::SingularField<::std::string::String>,
    broadcast_id: ::std::option::Option<u64>,
    gameid: ::std::option::Option<u64>,
    title: ::protobuf::SingularField<::std::string::String>,
    num_viewers: ::std::option::Option<u32>,
    permission: ::std::option::Option<i32>,
    is_rtmp: ::std::option::Option<bool>,
    seconds_delay: ::std::option::Option<i32>,
    viewer_token: ::std::option::Option<u64>,
    hls_m3u8_master_url: ::protobuf::SingularField<::std::string::String>,
    heartbeat_interval: ::std::option::Option<i32>,
    thumbnail_url: ::protobuf::SingularField<::std::string::String>,
    is_webrtc: ::std::option::Option<bool>,
    webrtc_session_id: ::std::option::Option<u64>,
    webrtc_offer_sdp: ::protobuf::SingularField<::std::string::String>,
    webrtc_turn_server: ::protobuf::SingularField<::std::string::String>,
    is_replay: ::std::option::Option<bool>,
    duration: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WatchBroadcast_Response {
    fn default() -> &'a CBroadcast_WatchBroadcast_Response {
        <CBroadcast_WatchBroadcast_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WatchBroadcast_Response {
    pub fn new() -> CBroadcast_WatchBroadcast_Response {
        ::std::default::Default::default()
    }

    // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1;

    pub fn get_response(&self) -> cbroadcast_watch_broadcast_response::EWatchResponse {
        match self.response {
            Some(e) => e.enum_value_or(cbroadcast_watch_broadcast_response::EWatchResponse::k_EWatchResponseReady),
            None => cbroadcast_watch_broadcast_response::EWatchResponse::k_EWatchResponseReady,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cbroadcast_watch_broadcast_response::EWatchResponse) {
        self.response = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional string mpd_url = 2;

    pub fn get_mpd_url(&self) -> &str {
        match self.mpd_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mpd_url(&mut self) {
        self.mpd_url.clear();
    }

    pub fn has_mpd_url(&self) -> bool {
        self.mpd_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mpd_url(&mut self, v: ::std::string::String) {
        self.mpd_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mpd_url(&mut self) -> &mut ::std::string::String {
        if self.mpd_url.is_none() {
            self.mpd_url.set_default();
        }
        self.mpd_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_mpd_url(&mut self) -> ::std::string::String {
        self.mpd_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 broadcast_id = 3;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional uint64 gameid = 4;

    pub fn get_gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // optional string title = 5;

    pub fn get_title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 num_viewers = 6;

    pub fn get_num_viewers(&self) -> u32 {
        self.num_viewers.unwrap_or(0)
    }

    pub fn clear_num_viewers(&mut self) {
        self.num_viewers = ::std::option::Option::None;
    }

    pub fn has_num_viewers(&self) -> bool {
        self.num_viewers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_viewers(&mut self, v: u32) {
        self.num_viewers = ::std::option::Option::Some(v);
    }

    // optional int32 permission = 7;

    pub fn get_permission(&self) -> i32 {
        self.permission.unwrap_or(0)
    }

    pub fn clear_permission(&mut self) {
        self.permission = ::std::option::Option::None;
    }

    pub fn has_permission(&self) -> bool {
        self.permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: i32) {
        self.permission = ::std::option::Option::Some(v);
    }

    // optional bool is_rtmp = 8;

    pub fn get_is_rtmp(&self) -> bool {
        self.is_rtmp.unwrap_or(false)
    }

    pub fn clear_is_rtmp(&mut self) {
        self.is_rtmp = ::std::option::Option::None;
    }

    pub fn has_is_rtmp(&self) -> bool {
        self.is_rtmp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_rtmp(&mut self, v: bool) {
        self.is_rtmp = ::std::option::Option::Some(v);
    }

    // optional int32 seconds_delay = 9;

    pub fn get_seconds_delay(&self) -> i32 {
        self.seconds_delay.unwrap_or(0)
    }

    pub fn clear_seconds_delay(&mut self) {
        self.seconds_delay = ::std::option::Option::None;
    }

    pub fn has_seconds_delay(&self) -> bool {
        self.seconds_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_delay(&mut self, v: i32) {
        self.seconds_delay = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_token = 10;

    pub fn get_viewer_token(&self) -> u64 {
        self.viewer_token.unwrap_or(0)
    }

    pub fn clear_viewer_token(&mut self) {
        self.viewer_token = ::std::option::Option::None;
    }

    pub fn has_viewer_token(&self) -> bool {
        self.viewer_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_token(&mut self, v: u64) {
        self.viewer_token = ::std::option::Option::Some(v);
    }

    // optional string hls_m3u8_master_url = 11;

    pub fn get_hls_m3u8_master_url(&self) -> &str {
        match self.hls_m3u8_master_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hls_m3u8_master_url(&mut self) {
        self.hls_m3u8_master_url.clear();
    }

    pub fn has_hls_m3u8_master_url(&self) -> bool {
        self.hls_m3u8_master_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hls_m3u8_master_url(&mut self, v: ::std::string::String) {
        self.hls_m3u8_master_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hls_m3u8_master_url(&mut self) -> &mut ::std::string::String {
        if self.hls_m3u8_master_url.is_none() {
            self.hls_m3u8_master_url.set_default();
        }
        self.hls_m3u8_master_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_hls_m3u8_master_url(&mut self) -> ::std::string::String {
        self.hls_m3u8_master_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 heartbeat_interval = 12;

    pub fn get_heartbeat_interval(&self) -> i32 {
        self.heartbeat_interval.unwrap_or(0)
    }

    pub fn clear_heartbeat_interval(&mut self) {
        self.heartbeat_interval = ::std::option::Option::None;
    }

    pub fn has_heartbeat_interval(&self) -> bool {
        self.heartbeat_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_interval(&mut self, v: i32) {
        self.heartbeat_interval = ::std::option::Option::Some(v);
    }

    // optional string thumbnail_url = 13;

    pub fn get_thumbnail_url(&self) -> &str {
        match self.thumbnail_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_url(&mut self) {
        self.thumbnail_url.clear();
    }

    pub fn has_thumbnail_url(&self) -> bool {
        self.thumbnail_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_url(&mut self, v: ::std::string::String) {
        self.thumbnail_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_url(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_url.is_none() {
            self.thumbnail_url.set_default();
        }
        self.thumbnail_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_url(&mut self) -> ::std::string::String {
        self.thumbnail_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_webrtc = 14;

    pub fn get_is_webrtc(&self) -> bool {
        self.is_webrtc.unwrap_or(false)
    }

    pub fn clear_is_webrtc(&mut self) {
        self.is_webrtc = ::std::option::Option::None;
    }

    pub fn has_is_webrtc(&self) -> bool {
        self.is_webrtc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_webrtc(&mut self, v: bool) {
        self.is_webrtc = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 15;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional string webrtc_offer_sdp = 16;

    pub fn get_webrtc_offer_sdp(&self) -> &str {
        match self.webrtc_offer_sdp.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webrtc_offer_sdp(&mut self) {
        self.webrtc_offer_sdp.clear();
    }

    pub fn has_webrtc_offer_sdp(&self) -> bool {
        self.webrtc_offer_sdp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_offer_sdp(&mut self, v: ::std::string::String) {
        self.webrtc_offer_sdp = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webrtc_offer_sdp(&mut self) -> &mut ::std::string::String {
        if self.webrtc_offer_sdp.is_none() {
            self.webrtc_offer_sdp.set_default();
        }
        self.webrtc_offer_sdp.as_mut().unwrap()
    }

    // Take field
    pub fn take_webrtc_offer_sdp(&mut self) -> ::std::string::String {
        self.webrtc_offer_sdp.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string webrtc_turn_server = 17;

    pub fn get_webrtc_turn_server(&self) -> &str {
        match self.webrtc_turn_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webrtc_turn_server(&mut self) {
        self.webrtc_turn_server.clear();
    }

    pub fn has_webrtc_turn_server(&self) -> bool {
        self.webrtc_turn_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_turn_server(&mut self, v: ::std::string::String) {
        self.webrtc_turn_server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webrtc_turn_server(&mut self) -> &mut ::std::string::String {
        if self.webrtc_turn_server.is_none() {
            self.webrtc_turn_server.set_default();
        }
        self.webrtc_turn_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_webrtc_turn_server(&mut self) -> ::std::string::String {
        self.webrtc_turn_server.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_replay = 18;

    pub fn get_is_replay(&self) -> bool {
        self.is_replay.unwrap_or(false)
    }

    pub fn clear_is_replay(&mut self) {
        self.is_replay = ::std::option::Option::None;
    }

    pub fn has_is_replay(&self) -> bool {
        self.is_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_replay(&mut self, v: bool) {
        self.is_replay = ::std::option::Option::Some(v);
    }

    // optional int32 duration = 19;

    pub fn get_duration(&self) -> i32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: i32) {
        self.duration = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WatchBroadcast_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mpd_url)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.num_viewers = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.permission = ::std::option::Option::Some(is.read_int32()?);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_rtmp = ::std::option::Option::Some(is.read_bool()?);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.seconds_delay = ::std::option::Option::Some(is.read_int32()?);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.hls_m3u8_master_url)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.heartbeat_interval = ::std::option::Option::Some(is.read_int32()?);
                },
                13 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_url)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_webrtc = ::std::option::Option::Some(is.read_bool()?);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.webrtc_offer_sdp)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.webrtc_turn_server)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.duration = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, v);
        }
        if let Some(v) = self.mpd_url.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.gameid {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.num_viewers {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.permission {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_rtmp {
            my_size += 2;
        }
        if let Some(v) = self.seconds_delay {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.viewer_token {
            my_size += 9;
        }
        if let Some(v) = self.hls_m3u8_master_url.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.heartbeat_interval {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thumbnail_url.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.is_webrtc {
            my_size += 2;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_offer_sdp.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.webrtc_turn_server.as_ref() {
            my_size += ::protobuf::rt::string_size(17, &v);
        }
        if let Some(v) = self.is_replay {
            my_size += 3;
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::value_size(19, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.mpd_url.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.gameid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.num_viewers {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.permission {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.is_rtmp {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.seconds_delay {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.viewer_token {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.hls_m3u8_master_url.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.heartbeat_interval {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.thumbnail_url.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.is_webrtc {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(15, v)?;
        }
        if let Some(v) = self.webrtc_offer_sdp.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.webrtc_turn_server.as_ref() {
            os.write_string(17, v)?;
        }
        if let Some(v) = self.is_replay {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.duration {
            os.write_int32(19, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WatchBroadcast_Response {
        CBroadcast_WatchBroadcast_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, cbroadcast_watch_broadcast_response::EWatchResponse>(
                "response",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.response },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.response },
                cbroadcast_watch_broadcast_response::EWatchResponse::k_EWatchResponseReady,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "mpd_url",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.mpd_url },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.mpd_url },
                CBroadcast_WatchBroadcast_Response::get_mpd_url,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.broadcast_id },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.broadcast_id },
                CBroadcast_WatchBroadcast_Response::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "gameid",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.gameid },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.gameid },
                CBroadcast_WatchBroadcast_Response::get_gameid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "title",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.title },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.title },
                CBroadcast_WatchBroadcast_Response::get_title,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "num_viewers",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.num_viewers },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.num_viewers },
                CBroadcast_WatchBroadcast_Response::get_num_viewers,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "permission",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.permission },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.permission },
                CBroadcast_WatchBroadcast_Response::get_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_rtmp",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.is_rtmp },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.is_rtmp },
                CBroadcast_WatchBroadcast_Response::get_is_rtmp,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "seconds_delay",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.seconds_delay },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.seconds_delay },
                CBroadcast_WatchBroadcast_Response::get_seconds_delay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_token",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.viewer_token },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.viewer_token },
                CBroadcast_WatchBroadcast_Response::get_viewer_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "hls_m3u8_master_url",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.hls_m3u8_master_url },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.hls_m3u8_master_url },
                CBroadcast_WatchBroadcast_Response::get_hls_m3u8_master_url,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "heartbeat_interval",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.heartbeat_interval },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.heartbeat_interval },
                CBroadcast_WatchBroadcast_Response::get_heartbeat_interval,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_url",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.thumbnail_url },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.thumbnail_url },
                CBroadcast_WatchBroadcast_Response::get_thumbnail_url,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_webrtc",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.is_webrtc },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.is_webrtc },
                CBroadcast_WatchBroadcast_Response::get_is_webrtc,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.webrtc_session_id },
                CBroadcast_WatchBroadcast_Response::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "webrtc_offer_sdp",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.webrtc_offer_sdp },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.webrtc_offer_sdp },
                CBroadcast_WatchBroadcast_Response::get_webrtc_offer_sdp,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "webrtc_turn_server",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.webrtc_turn_server },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.webrtc_turn_server },
                CBroadcast_WatchBroadcast_Response::get_webrtc_turn_server,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_replay",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.is_replay },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.is_replay },
                CBroadcast_WatchBroadcast_Response::get_is_replay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "duration",
                |m: &CBroadcast_WatchBroadcast_Response| { &m.duration },
                |m: &mut CBroadcast_WatchBroadcast_Response| { &mut m.duration },
                CBroadcast_WatchBroadcast_Response::get_duration,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WatchBroadcast_Response>(
                "CBroadcast_WatchBroadcast_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WatchBroadcast_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WatchBroadcast_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WatchBroadcast_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WatchBroadcast_Response {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.mpd_url.clear();
        self.broadcast_id = ::std::option::Option::None;
        self.gameid = ::std::option::Option::None;
        self.title.clear();
        self.num_viewers = ::std::option::Option::None;
        self.permission = ::std::option::Option::None;
        self.is_rtmp = ::std::option::Option::None;
        self.seconds_delay = ::std::option::Option::None;
        self.viewer_token = ::std::option::Option::None;
        self.hls_m3u8_master_url.clear();
        self.heartbeat_interval = ::std::option::Option::None;
        self.thumbnail_url.clear();
        self.is_webrtc = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.webrtc_offer_sdp.clear();
        self.webrtc_turn_server.clear();
        self.is_replay = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WatchBroadcast_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WatchBroadcast_Response {
}

/// Nested message and enums of message `CBroadcast_WatchBroadcast_Response`
pub mod cbroadcast_watch_broadcast_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum EWatchResponse {
        k_EWatchResponseReady = 1,
        k_EWatchResponseNotAvailable = 2,
        k_EWatchResponseWaitingForApproval = 3,
        k_EWatchResponseWaitingForStart = 4,
        k_EWatchResponseInvalidSession = 5,
        k_EWatchResponseTooManyBroadcasts = 6,
        k_EWatchResponseWaitingForReconnect = 7,
        k_EWatchResponseSystemNotSupported = 8,
        k_EWatchResponseUserRestricted = 9,
        k_EWatchResponseClientOutOfDate = 10,
        k_EWatchResponsePoorUploadQuality = 11,
        k_EWatchResponseMissingSubscription = 12,
    }

    impl ::protobuf::ProtobufEnum for EWatchResponse {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EWatchResponse> {
            match value {
                1 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseReady),
                2 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseNotAvailable),
                3 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseWaitingForApproval),
                4 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseWaitingForStart),
                5 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseInvalidSession),
                6 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseTooManyBroadcasts),
                7 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseWaitingForReconnect),
                8 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseSystemNotSupported),
                9 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseUserRestricted),
                10 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseClientOutOfDate),
                11 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponsePoorUploadQuality),
                12 => ::std::option::Option::Some(EWatchResponse::k_EWatchResponseMissingSubscription),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [EWatchResponse] = &[
                EWatchResponse::k_EWatchResponseReady,
                EWatchResponse::k_EWatchResponseNotAvailable,
                EWatchResponse::k_EWatchResponseWaitingForApproval,
                EWatchResponse::k_EWatchResponseWaitingForStart,
                EWatchResponse::k_EWatchResponseInvalidSession,
                EWatchResponse::k_EWatchResponseTooManyBroadcasts,
                EWatchResponse::k_EWatchResponseWaitingForReconnect,
                EWatchResponse::k_EWatchResponseSystemNotSupported,
                EWatchResponse::k_EWatchResponseUserRestricted,
                EWatchResponse::k_EWatchResponseClientOutOfDate,
                EWatchResponse::k_EWatchResponsePoorUploadQuality,
                EWatchResponse::k_EWatchResponseMissingSubscription,
            ];
            values
        }

        fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new::<EWatchResponse>("CBroadcast_WatchBroadcast_Response.EWatchResponse", super::file_descriptor_proto())
            })
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for EWatchResponse {
        fn default() -> Self {
            EWatchResponse::k_EWatchResponseReady
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EWatchResponse {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_HeartbeatBroadcast_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_id: ::std::option::Option<u64>,
    viewer_token: ::std::option::Option<u64>,
    representation: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_HeartbeatBroadcast_Notification {
    fn default() -> &'a CBroadcast_HeartbeatBroadcast_Notification {
        <CBroadcast_HeartbeatBroadcast_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_HeartbeatBroadcast_Notification {
    pub fn new() -> CBroadcast_HeartbeatBroadcast_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_id = 2;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_token = 3;

    pub fn get_viewer_token(&self) -> u64 {
        self.viewer_token.unwrap_or(0)
    }

    pub fn clear_viewer_token(&mut self) {
        self.viewer_token = ::std::option::Option::None;
    }

    pub fn has_viewer_token(&self) -> bool {
        self.viewer_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_token(&mut self, v: u64) {
        self.viewer_token = ::std::option::Option::Some(v);
    }

    // optional uint32 representation = 4;

    pub fn get_representation(&self) -> u32 {
        self.representation.unwrap_or(0)
    }

    pub fn clear_representation(&mut self) {
        self.representation = ::std::option::Option::None;
    }

    pub fn has_representation(&self) -> bool {
        self.representation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_representation(&mut self, v: u32) {
        self.representation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_HeartbeatBroadcast_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.representation = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.viewer_token {
            my_size += 9;
        }
        if let Some(v) = self.representation {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.viewer_token {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.representation {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_HeartbeatBroadcast_Notification {
        CBroadcast_HeartbeatBroadcast_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_HeartbeatBroadcast_Notification| { &m.steamid },
                |m: &mut CBroadcast_HeartbeatBroadcast_Notification| { &mut m.steamid },
                CBroadcast_HeartbeatBroadcast_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_HeartbeatBroadcast_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_HeartbeatBroadcast_Notification| { &mut m.broadcast_id },
                CBroadcast_HeartbeatBroadcast_Notification::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_token",
                |m: &CBroadcast_HeartbeatBroadcast_Notification| { &m.viewer_token },
                |m: &mut CBroadcast_HeartbeatBroadcast_Notification| { &mut m.viewer_token },
                CBroadcast_HeartbeatBroadcast_Notification::get_viewer_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "representation",
                |m: &CBroadcast_HeartbeatBroadcast_Notification| { &m.representation },
                |m: &mut CBroadcast_HeartbeatBroadcast_Notification| { &mut m.representation },
                CBroadcast_HeartbeatBroadcast_Notification::get_representation,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_HeartbeatBroadcast_Notification>(
                "CBroadcast_HeartbeatBroadcast_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_HeartbeatBroadcast_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_HeartbeatBroadcast_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_HeartbeatBroadcast_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_HeartbeatBroadcast_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_id = ::std::option::Option::None;
        self.viewer_token = ::std::option::Option::None;
        self.representation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_HeartbeatBroadcast_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_HeartbeatBroadcast_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StopWatchingBroadcast_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_id: ::std::option::Option<u64>,
    viewer_token: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StopWatchingBroadcast_Notification {
    fn default() -> &'a CBroadcast_StopWatchingBroadcast_Notification {
        <CBroadcast_StopWatchingBroadcast_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StopWatchingBroadcast_Notification {
    pub fn new() -> CBroadcast_StopWatchingBroadcast_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_id = 2;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_token = 3;

    pub fn get_viewer_token(&self) -> u64 {
        self.viewer_token.unwrap_or(0)
    }

    pub fn clear_viewer_token(&mut self) {
        self.viewer_token = ::std::option::Option::None;
    }

    pub fn has_viewer_token(&self) -> bool {
        self.viewer_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_token(&mut self, v: u64) {
        self.viewer_token = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_StopWatchingBroadcast_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.viewer_token {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.viewer_token {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StopWatchingBroadcast_Notification {
        CBroadcast_StopWatchingBroadcast_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_StopWatchingBroadcast_Notification| { &m.steamid },
                |m: &mut CBroadcast_StopWatchingBroadcast_Notification| { &mut m.steamid },
                CBroadcast_StopWatchingBroadcast_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_StopWatchingBroadcast_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_StopWatchingBroadcast_Notification| { &mut m.broadcast_id },
                CBroadcast_StopWatchingBroadcast_Notification::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_token",
                |m: &CBroadcast_StopWatchingBroadcast_Notification| { &m.viewer_token },
                |m: &mut CBroadcast_StopWatchingBroadcast_Notification| { &mut m.viewer_token },
                CBroadcast_StopWatchingBroadcast_Notification::get_viewer_token,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StopWatchingBroadcast_Notification>(
                "CBroadcast_StopWatchingBroadcast_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StopWatchingBroadcast_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StopWatchingBroadcast_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StopWatchingBroadcast_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StopWatchingBroadcast_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_id = ::std::option::Option::None;
        self.viewer_token = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StopWatchingBroadcast_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StopWatchingBroadcast_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastStatus_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastStatus_Request {
    fn default() -> &'a CBroadcast_GetBroadcastStatus_Request {
        <CBroadcast_GetBroadcastStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastStatus_Request {
    pub fn new() -> CBroadcast_GetBroadcastStatus_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_id = 2;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastStatus_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastStatus_Request {
        CBroadcast_GetBroadcastStatus_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetBroadcastStatus_Request| { &m.steamid },
                |m: &mut CBroadcast_GetBroadcastStatus_Request| { &mut m.steamid },
                CBroadcast_GetBroadcastStatus_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_GetBroadcastStatus_Request| { &m.broadcast_id },
                |m: &mut CBroadcast_GetBroadcastStatus_Request| { &mut m.broadcast_id },
                CBroadcast_GetBroadcastStatus_Request::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastStatus_Request>(
                "CBroadcast_GetBroadcastStatus_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastStatus_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastStatus_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastStatus_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastStatus_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastStatus_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastStatus_Response {
    // message fields
    gameid: ::std::option::Option<u64>,
    title: ::protobuf::SingularField<::std::string::String>,
    num_viewers: ::std::option::Option<u32>,
    permission: ::std::option::Option<i32>,
    is_rtmp: ::std::option::Option<bool>,
    seconds_delay: ::std::option::Option<i32>,
    is_publisher: ::std::option::Option<bool>,
    thumbnail_url: ::protobuf::SingularField<::std::string::String>,
    update_interval: ::std::option::Option<i32>,
    is_uploading: ::std::option::Option<bool>,
    duration: ::std::option::Option<u32>,
    is_replay: ::std::option::Option<bool>,
    is_capturing_vod: ::std::option::Option<bool>,
    is_store_whitelisted: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastStatus_Response {
    fn default() -> &'a CBroadcast_GetBroadcastStatus_Response {
        <CBroadcast_GetBroadcastStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastStatus_Response {
    pub fn new() -> CBroadcast_GetBroadcastStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint64 gameid = 1;

    pub fn get_gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // optional string title = 2;

    pub fn get_title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 num_viewers = 3;

    pub fn get_num_viewers(&self) -> u32 {
        self.num_viewers.unwrap_or(0)
    }

    pub fn clear_num_viewers(&mut self) {
        self.num_viewers = ::std::option::Option::None;
    }

    pub fn has_num_viewers(&self) -> bool {
        self.num_viewers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_viewers(&mut self, v: u32) {
        self.num_viewers = ::std::option::Option::Some(v);
    }

    // optional int32 permission = 4;

    pub fn get_permission(&self) -> i32 {
        self.permission.unwrap_or(0)
    }

    pub fn clear_permission(&mut self) {
        self.permission = ::std::option::Option::None;
    }

    pub fn has_permission(&self) -> bool {
        self.permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: i32) {
        self.permission = ::std::option::Option::Some(v);
    }

    // optional bool is_rtmp = 5;

    pub fn get_is_rtmp(&self) -> bool {
        self.is_rtmp.unwrap_or(false)
    }

    pub fn clear_is_rtmp(&mut self) {
        self.is_rtmp = ::std::option::Option::None;
    }

    pub fn has_is_rtmp(&self) -> bool {
        self.is_rtmp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_rtmp(&mut self, v: bool) {
        self.is_rtmp = ::std::option::Option::Some(v);
    }

    // optional int32 seconds_delay = 6;

    pub fn get_seconds_delay(&self) -> i32 {
        self.seconds_delay.unwrap_or(0)
    }

    pub fn clear_seconds_delay(&mut self) {
        self.seconds_delay = ::std::option::Option::None;
    }

    pub fn has_seconds_delay(&self) -> bool {
        self.seconds_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_delay(&mut self, v: i32) {
        self.seconds_delay = ::std::option::Option::Some(v);
    }

    // optional bool is_publisher = 7;

    pub fn get_is_publisher(&self) -> bool {
        self.is_publisher.unwrap_or(false)
    }

    pub fn clear_is_publisher(&mut self) {
        self.is_publisher = ::std::option::Option::None;
    }

    pub fn has_is_publisher(&self) -> bool {
        self.is_publisher.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_publisher(&mut self, v: bool) {
        self.is_publisher = ::std::option::Option::Some(v);
    }

    // optional string thumbnail_url = 8;

    pub fn get_thumbnail_url(&self) -> &str {
        match self.thumbnail_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_url(&mut self) {
        self.thumbnail_url.clear();
    }

    pub fn has_thumbnail_url(&self) -> bool {
        self.thumbnail_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_url(&mut self, v: ::std::string::String) {
        self.thumbnail_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_url(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_url.is_none() {
            self.thumbnail_url.set_default();
        }
        self.thumbnail_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_url(&mut self) -> ::std::string::String {
        self.thumbnail_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 update_interval = 9;

    pub fn get_update_interval(&self) -> i32 {
        self.update_interval.unwrap_or(0)
    }

    pub fn clear_update_interval(&mut self) {
        self.update_interval = ::std::option::Option::None;
    }

    pub fn has_update_interval(&self) -> bool {
        self.update_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_interval(&mut self, v: i32) {
        self.update_interval = ::std::option::Option::Some(v);
    }

    // optional bool is_uploading = 10;

    pub fn get_is_uploading(&self) -> bool {
        self.is_uploading.unwrap_or(false)
    }

    pub fn clear_is_uploading(&mut self) {
        self.is_uploading = ::std::option::Option::None;
    }

    pub fn has_is_uploading(&self) -> bool {
        self.is_uploading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_uploading(&mut self, v: bool) {
        self.is_uploading = ::std::option::Option::Some(v);
    }

    // optional uint32 duration = 11;

    pub fn get_duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional bool is_replay = 12;

    pub fn get_is_replay(&self) -> bool {
        self.is_replay.unwrap_or(false)
    }

    pub fn clear_is_replay(&mut self) {
        self.is_replay = ::std::option::Option::None;
    }

    pub fn has_is_replay(&self) -> bool {
        self.is_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_replay(&mut self, v: bool) {
        self.is_replay = ::std::option::Option::Some(v);
    }

    // optional bool is_capturing_vod = 13;

    pub fn get_is_capturing_vod(&self) -> bool {
        self.is_capturing_vod.unwrap_or(false)
    }

    pub fn clear_is_capturing_vod(&mut self) {
        self.is_capturing_vod = ::std::option::Option::None;
    }

    pub fn has_is_capturing_vod(&self) -> bool {
        self.is_capturing_vod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_capturing_vod(&mut self, v: bool) {
        self.is_capturing_vod = ::std::option::Option::Some(v);
    }

    // optional bool is_store_whitelisted = 14;

    pub fn get_is_store_whitelisted(&self) -> bool {
        self.is_store_whitelisted.unwrap_or(false)
    }

    pub fn clear_is_store_whitelisted(&mut self) {
        self.is_store_whitelisted = ::std::option::Option::None;
    }

    pub fn has_is_store_whitelisted(&self) -> bool {
        self.is_store_whitelisted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_store_whitelisted(&mut self, v: bool) {
        self.is_store_whitelisted = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastStatus_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.num_viewers = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.permission = ::std::option::Option::Some(is.read_int32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_rtmp = ::std::option::Option::Some(is.read_bool()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.seconds_delay = ::std::option::Option::Some(is.read_int32()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_publisher = ::std::option::Option::Some(is.read_bool()?);
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_url)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.update_interval = ::std::option::Option::Some(is.read_int32()?);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_uploading = ::std::option::Option::Some(is.read_bool()?);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_capturing_vod = ::std::option::Option::Some(is.read_bool()?);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_store_whitelisted = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gameid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.num_viewers {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.permission {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_rtmp {
            my_size += 2;
        }
        if let Some(v) = self.seconds_delay {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_publisher {
            my_size += 2;
        }
        if let Some(v) = self.thumbnail_url.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.update_interval {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_uploading {
            my_size += 2;
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_replay {
            my_size += 2;
        }
        if let Some(v) = self.is_capturing_vod {
            my_size += 2;
        }
        if let Some(v) = self.is_store_whitelisted {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gameid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.num_viewers {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.permission {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.is_rtmp {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.seconds_delay {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.is_publisher {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.thumbnail_url.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.update_interval {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.is_uploading {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.is_replay {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.is_capturing_vod {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.is_store_whitelisted {
            os.write_bool(14, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastStatus_Response {
        CBroadcast_GetBroadcastStatus_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "gameid",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.gameid },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.gameid },
                CBroadcast_GetBroadcastStatus_Response::get_gameid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "title",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.title },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.title },
                CBroadcast_GetBroadcastStatus_Response::get_title,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "num_viewers",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.num_viewers },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.num_viewers },
                CBroadcast_GetBroadcastStatus_Response::get_num_viewers,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "permission",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.permission },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.permission },
                CBroadcast_GetBroadcastStatus_Response::get_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_rtmp",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_rtmp },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_rtmp },
                CBroadcast_GetBroadcastStatus_Response::get_is_rtmp,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "seconds_delay",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.seconds_delay },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.seconds_delay },
                CBroadcast_GetBroadcastStatus_Response::get_seconds_delay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_publisher",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_publisher },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_publisher },
                CBroadcast_GetBroadcastStatus_Response::get_is_publisher,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_url",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.thumbnail_url },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.thumbnail_url },
                CBroadcast_GetBroadcastStatus_Response::get_thumbnail_url,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "update_interval",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.update_interval },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.update_interval },
                CBroadcast_GetBroadcastStatus_Response::get_update_interval,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_uploading",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_uploading },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_uploading },
                CBroadcast_GetBroadcastStatus_Response::get_is_uploading,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "duration",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.duration },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.duration },
                CBroadcast_GetBroadcastStatus_Response::get_duration,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_replay",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_replay },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_replay },
                CBroadcast_GetBroadcastStatus_Response::get_is_replay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_capturing_vod",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_capturing_vod },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_capturing_vod },
                CBroadcast_GetBroadcastStatus_Response::get_is_capturing_vod,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_store_whitelisted",
                |m: &CBroadcast_GetBroadcastStatus_Response| { &m.is_store_whitelisted },
                |m: &mut CBroadcast_GetBroadcastStatus_Response| { &mut m.is_store_whitelisted },
                CBroadcast_GetBroadcastStatus_Response::get_is_store_whitelisted,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastStatus_Response>(
                "CBroadcast_GetBroadcastStatus_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastStatus_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastStatus_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastStatus_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastStatus_Response {
    fn clear(&mut self) {
        self.gameid = ::std::option::Option::None;
        self.title.clear();
        self.num_viewers = ::std::option::Option::None;
        self.permission = ::std::option::Option::None;
        self.is_rtmp = ::std::option::Option::None;
        self.seconds_delay = ::std::option::Option::None;
        self.is_publisher = ::std::option::Option::None;
        self.thumbnail_url.clear();
        self.update_interval = ::std::option::Option::None;
        self.is_uploading = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.is_replay = ::std::option::Option::None;
        self.is_capturing_vod = ::std::option::Option::None;
        self.is_store_whitelisted = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastStatus_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastThumbnail_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastThumbnail_Request {
    fn default() -> &'a CBroadcast_GetBroadcastThumbnail_Request {
        <CBroadcast_GetBroadcastThumbnail_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastThumbnail_Request {
    pub fn new() -> CBroadcast_GetBroadcastThumbnail_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_id = 2;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastThumbnail_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastThumbnail_Request {
        CBroadcast_GetBroadcastThumbnail_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetBroadcastThumbnail_Request| { &m.steamid },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Request| { &mut m.steamid },
                CBroadcast_GetBroadcastThumbnail_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_GetBroadcastThumbnail_Request| { &m.broadcast_id },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Request| { &mut m.broadcast_id },
                CBroadcast_GetBroadcastThumbnail_Request::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastThumbnail_Request>(
                "CBroadcast_GetBroadcastThumbnail_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastThumbnail_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastThumbnail_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastThumbnail_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastThumbnail_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastThumbnail_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastThumbnail_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastThumbnail_Response {
    // message fields
    thumbnail_url: ::protobuf::SingularField<::std::string::String>,
    update_interval: ::std::option::Option<i32>,
    num_viewers: ::std::option::Option<i32>,
    duration: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastThumbnail_Response {
    fn default() -> &'a CBroadcast_GetBroadcastThumbnail_Response {
        <CBroadcast_GetBroadcastThumbnail_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastThumbnail_Response {
    pub fn new() -> CBroadcast_GetBroadcastThumbnail_Response {
        ::std::default::Default::default()
    }

    // optional string thumbnail_url = 1;

    pub fn get_thumbnail_url(&self) -> &str {
        match self.thumbnail_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_url(&mut self) {
        self.thumbnail_url.clear();
    }

    pub fn has_thumbnail_url(&self) -> bool {
        self.thumbnail_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_url(&mut self, v: ::std::string::String) {
        self.thumbnail_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_url(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_url.is_none() {
            self.thumbnail_url.set_default();
        }
        self.thumbnail_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_url(&mut self) -> ::std::string::String {
        self.thumbnail_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 update_interval = 2;

    pub fn get_update_interval(&self) -> i32 {
        self.update_interval.unwrap_or(0)
    }

    pub fn clear_update_interval(&mut self) {
        self.update_interval = ::std::option::Option::None;
    }

    pub fn has_update_interval(&self) -> bool {
        self.update_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_interval(&mut self, v: i32) {
        self.update_interval = ::std::option::Option::Some(v);
    }

    // optional int32 num_viewers = 3;

    pub fn get_num_viewers(&self) -> i32 {
        self.num_viewers.unwrap_or(0)
    }

    pub fn clear_num_viewers(&mut self) {
        self.num_viewers = ::std::option::Option::None;
    }

    pub fn has_num_viewers(&self) -> bool {
        self.num_viewers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_viewers(&mut self, v: i32) {
        self.num_viewers = ::std::option::Option::Some(v);
    }

    // optional int32 duration = 4;

    pub fn get_duration(&self) -> i32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: i32) {
        self.duration = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastThumbnail_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.update_interval = ::std::option::Option::Some(is.read_int32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.num_viewers = ::std::option::Option::Some(is.read_int32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.duration = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.thumbnail_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.update_interval {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.num_viewers {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.thumbnail_url.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.update_interval {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.num_viewers {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.duration {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastThumbnail_Response {
        CBroadcast_GetBroadcastThumbnail_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_url",
                |m: &CBroadcast_GetBroadcastThumbnail_Response| { &m.thumbnail_url },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Response| { &mut m.thumbnail_url },
                CBroadcast_GetBroadcastThumbnail_Response::get_thumbnail_url,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "update_interval",
                |m: &CBroadcast_GetBroadcastThumbnail_Response| { &m.update_interval },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Response| { &mut m.update_interval },
                CBroadcast_GetBroadcastThumbnail_Response::get_update_interval,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "num_viewers",
                |m: &CBroadcast_GetBroadcastThumbnail_Response| { &m.num_viewers },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Response| { &mut m.num_viewers },
                CBroadcast_GetBroadcastThumbnail_Response::get_num_viewers,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "duration",
                |m: &CBroadcast_GetBroadcastThumbnail_Response| { &m.duration },
                |m: &mut CBroadcast_GetBroadcastThumbnail_Response| { &mut m.duration },
                CBroadcast_GetBroadcastThumbnail_Response::get_duration,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastThumbnail_Response>(
                "CBroadcast_GetBroadcastThumbnail_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastThumbnail_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastThumbnail_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastThumbnail_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastThumbnail_Response {
    fn clear(&mut self) {
        self.thumbnail_url.clear();
        self.update_interval = ::std::option::Option::None;
        self.num_viewers = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastThumbnail_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastThumbnail_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_InviteToBroadcast_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    approval_response: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_InviteToBroadcast_Request {
    fn default() -> &'a CBroadcast_InviteToBroadcast_Request {
        <CBroadcast_InviteToBroadcast_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_InviteToBroadcast_Request {
    pub fn new() -> CBroadcast_InviteToBroadcast_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool approval_response = 2;

    pub fn get_approval_response(&self) -> bool {
        self.approval_response.unwrap_or(false)
    }

    pub fn clear_approval_response(&mut self) {
        self.approval_response = ::std::option::Option::None;
    }

    pub fn has_approval_response(&self) -> bool {
        self.approval_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approval_response(&mut self, v: bool) {
        self.approval_response = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_InviteToBroadcast_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.approval_response = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.approval_response {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.approval_response {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_InviteToBroadcast_Request {
        CBroadcast_InviteToBroadcast_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_InviteToBroadcast_Request| { &m.steamid },
                |m: &mut CBroadcast_InviteToBroadcast_Request| { &mut m.steamid },
                CBroadcast_InviteToBroadcast_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "approval_response",
                |m: &CBroadcast_InviteToBroadcast_Request| { &m.approval_response },
                |m: &mut CBroadcast_InviteToBroadcast_Request| { &mut m.approval_response },
                CBroadcast_InviteToBroadcast_Request::get_approval_response,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_InviteToBroadcast_Request>(
                "CBroadcast_InviteToBroadcast_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_InviteToBroadcast_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_InviteToBroadcast_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_InviteToBroadcast_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_InviteToBroadcast_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.approval_response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_InviteToBroadcast_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_InviteToBroadcast_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_InviteToBroadcast_Response {
    // message fields
    success: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_InviteToBroadcast_Response {
    fn default() -> &'a CBroadcast_InviteToBroadcast_Response {
        <CBroadcast_InviteToBroadcast_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_InviteToBroadcast_Response {
    pub fn new() -> CBroadcast_InviteToBroadcast_Response {
        ::std::default::Default::default()
    }

    // optional bool success = 1;

    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_InviteToBroadcast_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_InviteToBroadcast_Response {
        CBroadcast_InviteToBroadcast_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "success",
                |m: &CBroadcast_InviteToBroadcast_Response| { &m.success },
                |m: &mut CBroadcast_InviteToBroadcast_Response| { &mut m.success },
                CBroadcast_InviteToBroadcast_Response::get_success,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_InviteToBroadcast_Response>(
                "CBroadcast_InviteToBroadcast_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_InviteToBroadcast_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_InviteToBroadcast_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_InviteToBroadcast_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_InviteToBroadcast_Response {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_InviteToBroadcast_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_InviteToBroadcast_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SendBroadcastStateToServer_Request {
    // message fields
    permission: ::std::option::Option<i32>,
    gameid: ::std::option::Option<u64>,
    title: ::protobuf::SingularField<::std::string::String>,
    game_data_config: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SendBroadcastStateToServer_Request {
    fn default() -> &'a CBroadcast_SendBroadcastStateToServer_Request {
        <CBroadcast_SendBroadcastStateToServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SendBroadcastStateToServer_Request {
    pub fn new() -> CBroadcast_SendBroadcastStateToServer_Request {
        ::std::default::Default::default()
    }

    // optional int32 permission = 1;

    pub fn get_permission(&self) -> i32 {
        self.permission.unwrap_or(0)
    }

    pub fn clear_permission(&mut self) {
        self.permission = ::std::option::Option::None;
    }

    pub fn has_permission(&self) -> bool {
        self.permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: i32) {
        self.permission = ::std::option::Option::Some(v);
    }

    // optional uint64 gameid = 2;

    pub fn get_gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // optional string title = 3;

    pub fn get_title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string game_data_config = 4;

    pub fn get_game_data_config(&self) -> &str {
        match self.game_data_config.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_game_data_config(&mut self) {
        self.game_data_config.clear();
    }

    pub fn has_game_data_config(&self) -> bool {
        self.game_data_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_data_config(&mut self, v: ::std::string::String) {
        self.game_data_config = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_game_data_config(&mut self) -> &mut ::std::string::String {
        if self.game_data_config.is_none() {
            self.game_data_config.set_default();
        }
        self.game_data_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_game_data_config(&mut self) -> ::std::string::String {
        self.game_data_config.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_SendBroadcastStateToServer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.permission = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.game_data_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.permission {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gameid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.game_data_config.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.permission {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.gameid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.game_data_config.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SendBroadcastStateToServer_Request {
        CBroadcast_SendBroadcastStateToServer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "permission",
                |m: &CBroadcast_SendBroadcastStateToServer_Request| { &m.permission },
                |m: &mut CBroadcast_SendBroadcastStateToServer_Request| { &mut m.permission },
                CBroadcast_SendBroadcastStateToServer_Request::get_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "gameid",
                |m: &CBroadcast_SendBroadcastStateToServer_Request| { &m.gameid },
                |m: &mut CBroadcast_SendBroadcastStateToServer_Request| { &mut m.gameid },
                CBroadcast_SendBroadcastStateToServer_Request::get_gameid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "title",
                |m: &CBroadcast_SendBroadcastStateToServer_Request| { &m.title },
                |m: &mut CBroadcast_SendBroadcastStateToServer_Request| { &mut m.title },
                CBroadcast_SendBroadcastStateToServer_Request::get_title,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "game_data_config",
                |m: &CBroadcast_SendBroadcastStateToServer_Request| { &m.game_data_config },
                |m: &mut CBroadcast_SendBroadcastStateToServer_Request| { &mut m.game_data_config },
                CBroadcast_SendBroadcastStateToServer_Request::get_game_data_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SendBroadcastStateToServer_Request>(
                "CBroadcast_SendBroadcastStateToServer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SendBroadcastStateToServer_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SendBroadcastStateToServer_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SendBroadcastStateToServer_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SendBroadcastStateToServer_Request {
    fn clear(&mut self) {
        self.permission = ::std::option::Option::None;
        self.gameid = ::std::option::Option::None;
        self.title.clear();
        self.game_data_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SendBroadcastStateToServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SendBroadcastStateToServer_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SendBroadcastStateToServer_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SendBroadcastStateToServer_Response {
    fn default() -> &'a CBroadcast_SendBroadcastStateToServer_Response {
        <CBroadcast_SendBroadcastStateToServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SendBroadcastStateToServer_Response {
    pub fn new() -> CBroadcast_SendBroadcastStateToServer_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_SendBroadcastStateToServer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SendBroadcastStateToServer_Response {
        CBroadcast_SendBroadcastStateToServer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SendBroadcastStateToServer_Response>(
                "CBroadcast_SendBroadcastStateToServer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SendBroadcastStateToServer_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SendBroadcastStateToServer_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SendBroadcastStateToServer_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SendBroadcastStateToServer_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SendBroadcastStateToServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SendBroadcastStateToServer_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    fn default() -> &'a CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
        <CBroadcast_NotifyBroadcastSessionHeartbeat_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    pub fn new() -> CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
        CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_NotifyBroadcastSessionHeartbeat_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_NotifyBroadcastSessionHeartbeat_Notification| { &mut m.broadcast_id },
                CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(
                "CBroadcast_NotifyBroadcastSessionHeartbeat_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastChatInfo_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_id: ::std::option::Option<u64>,
    client_ip: ::std::option::Option<u32>,
    client_cell: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastChatInfo_Request {
    fn default() -> &'a CBroadcast_GetBroadcastChatInfo_Request {
        <CBroadcast_GetBroadcastChatInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastChatInfo_Request {
    pub fn new() -> CBroadcast_GetBroadcastChatInfo_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_id = 2;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_ip = 3;

    pub fn get_client_ip(&self) -> u32 {
        self.client_ip.unwrap_or(0)
    }

    pub fn clear_client_ip(&mut self) {
        self.client_ip = ::std::option::Option::None;
    }

    pub fn has_client_ip(&self) -> bool {
        self.client_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_ip(&mut self, v: u32) {
        self.client_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 client_cell = 4;

    pub fn get_client_cell(&self) -> u32 {
        self.client_cell.unwrap_or(0)
    }

    pub fn clear_client_cell(&mut self) {
        self.client_cell = ::std::option::Option::None;
    }

    pub fn has_client_cell(&self) -> bool {
        self.client_cell.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_cell(&mut self, v: u32) {
        self.client_cell = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastChatInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.client_cell = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.client_ip {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_cell {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_ip {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.client_cell {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastChatInfo_Request {
        CBroadcast_GetBroadcastChatInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetBroadcastChatInfo_Request| { &m.steamid },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Request| { &mut m.steamid },
                CBroadcast_GetBroadcastChatInfo_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_GetBroadcastChatInfo_Request| { &m.broadcast_id },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Request| { &mut m.broadcast_id },
                CBroadcast_GetBroadcastChatInfo_Request::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "client_ip",
                |m: &CBroadcast_GetBroadcastChatInfo_Request| { &m.client_ip },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Request| { &mut m.client_ip },
                CBroadcast_GetBroadcastChatInfo_Request::get_client_ip,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "client_cell",
                |m: &CBroadcast_GetBroadcastChatInfo_Request| { &m.client_cell },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Request| { &mut m.client_cell },
                CBroadcast_GetBroadcastChatInfo_Request::get_client_cell,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastChatInfo_Request>(
                "CBroadcast_GetBroadcastChatInfo_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastChatInfo_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastChatInfo_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastChatInfo_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastChatInfo_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_id = ::std::option::Option::None;
        self.client_ip = ::std::option::Option::None;
        self.client_cell = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastChatInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastChatInfo_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastChatInfo_Response {
    // message fields
    chat_id: ::std::option::Option<u64>,
    view_url_template: ::protobuf::SingularField<::std::string::String>,
    pub flair_group_ids: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastChatInfo_Response {
    fn default() -> &'a CBroadcast_GetBroadcastChatInfo_Response {
        <CBroadcast_GetBroadcastChatInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastChatInfo_Response {
    pub fn new() -> CBroadcast_GetBroadcastChatInfo_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional string view_url_template = 3;

    pub fn get_view_url_template(&self) -> &str {
        match self.view_url_template.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_view_url_template(&mut self) {
        self.view_url_template.clear();
    }

    pub fn has_view_url_template(&self) -> bool {
        self.view_url_template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_view_url_template(&mut self, v: ::std::string::String) {
        self.view_url_template = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_url_template(&mut self) -> &mut ::std::string::String {
        if self.view_url_template.is_none() {
            self.view_url_template.set_default();
        }
        self.view_url_template.as_mut().unwrap()
    }

    // Take field
    pub fn take_view_url_template(&mut self) -> ::std::string::String {
        self.view_url_template.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastChatInfo_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.view_url_template)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.flair_group_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.view_url_template.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.flair_group_ids {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.view_url_template.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.flair_group_ids {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastChatInfo_Response {
        CBroadcast_GetBroadcastChatInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_GetBroadcastChatInfo_Response| { &m.chat_id },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Response| { &mut m.chat_id },
                CBroadcast_GetBroadcastChatInfo_Response::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "view_url_template",
                |m: &CBroadcast_GetBroadcastChatInfo_Response| { &m.view_url_template },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Response| { &mut m.view_url_template },
                CBroadcast_GetBroadcastChatInfo_Response::get_view_url_template,
            ));
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32>(
                "flair_group_ids",
                |m: &CBroadcast_GetBroadcastChatInfo_Response| { &m.flair_group_ids },
                |m: &mut CBroadcast_GetBroadcastChatInfo_Response| { &mut m.flair_group_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastChatInfo_Response>(
                "CBroadcast_GetBroadcastChatInfo_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastChatInfo_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastChatInfo_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastChatInfo_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastChatInfo_Response {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.view_url_template.clear();
        self.flair_group_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastChatInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastChatInfo_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_PostChatMessage_Request {
    // message fields
    chat_id: ::std::option::Option<u64>,
    message: ::protobuf::SingularField<::std::string::String>,
    instance_id: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_PostChatMessage_Request {
    fn default() -> &'a CBroadcast_PostChatMessage_Request {
        <CBroadcast_PostChatMessage_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_PostChatMessage_Request {
    pub fn new() -> CBroadcast_PostChatMessage_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional string message = 2;

    pub fn get_message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 instance_id = 3;

    pub fn get_instance_id(&self) -> u32 {
        self.instance_id.unwrap_or(0)
    }

    pub fn clear_instance_id(&mut self) {
        self.instance_id = ::std::option::Option::None;
    }

    pub fn has_instance_id(&self) -> bool {
        self.instance_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: u32) {
        self.instance_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_PostChatMessage_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.instance_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.instance_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.instance_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_PostChatMessage_Request {
        CBroadcast_PostChatMessage_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_PostChatMessage_Request| { &m.chat_id },
                |m: &mut CBroadcast_PostChatMessage_Request| { &mut m.chat_id },
                CBroadcast_PostChatMessage_Request::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "message",
                |m: &CBroadcast_PostChatMessage_Request| { &m.message },
                |m: &mut CBroadcast_PostChatMessage_Request| { &mut m.message },
                CBroadcast_PostChatMessage_Request::get_message,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "instance_id",
                |m: &CBroadcast_PostChatMessage_Request| { &m.instance_id },
                |m: &mut CBroadcast_PostChatMessage_Request| { &mut m.instance_id },
                CBroadcast_PostChatMessage_Request::get_instance_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_PostChatMessage_Request>(
                "CBroadcast_PostChatMessage_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_PostChatMessage_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_PostChatMessage_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_PostChatMessage_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_PostChatMessage_Request {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.message.clear();
        self.instance_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_PostChatMessage_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_PostChatMessage_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_PostChatMessage_Response {
    // message fields
    persona_name: ::protobuf::SingularField<::std::string::String>,
    in_game: ::std::option::Option<bool>,
    result: ::std::option::Option<i32>,
    cooldown_time_seconds: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_PostChatMessage_Response {
    fn default() -> &'a CBroadcast_PostChatMessage_Response {
        <CBroadcast_PostChatMessage_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_PostChatMessage_Response {
    pub fn new() -> CBroadcast_PostChatMessage_Response {
        ::std::default::Default::default()
    }

    // optional string persona_name = 1;

    pub fn get_persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name.clear();
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name.set_default();
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool in_game = 2;

    pub fn get_in_game(&self) -> bool {
        self.in_game.unwrap_or(false)
    }

    pub fn clear_in_game(&mut self) {
        self.in_game = ::std::option::Option::None;
    }

    pub fn has_in_game(&self) -> bool {
        self.in_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_game(&mut self, v: bool) {
        self.in_game = ::std::option::Option::Some(v);
    }

    // optional int32 result = 3;

    pub fn get_result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional int32 cooldown_time_seconds = 4;

    pub fn get_cooldown_time_seconds(&self) -> i32 {
        self.cooldown_time_seconds.unwrap_or(0)
    }

    pub fn clear_cooldown_time_seconds(&mut self) {
        self.cooldown_time_seconds = ::std::option::Option::None;
    }

    pub fn has_cooldown_time_seconds(&self) -> bool {
        self.cooldown_time_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cooldown_time_seconds(&mut self, v: i32) {
        self.cooldown_time_seconds = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_PostChatMessage_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.persona_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.in_game = ::std::option::Option::Some(is.read_bool()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cooldown_time_seconds = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.in_game {
            my_size += 2;
        }
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cooldown_time_seconds {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.in_game {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.result {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.cooldown_time_seconds {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_PostChatMessage_Response {
        CBroadcast_PostChatMessage_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "persona_name",
                |m: &CBroadcast_PostChatMessage_Response| { &m.persona_name },
                |m: &mut CBroadcast_PostChatMessage_Response| { &mut m.persona_name },
                CBroadcast_PostChatMessage_Response::get_persona_name,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "in_game",
                |m: &CBroadcast_PostChatMessage_Response| { &m.in_game },
                |m: &mut CBroadcast_PostChatMessage_Response| { &mut m.in_game },
                CBroadcast_PostChatMessage_Response::get_in_game,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "result",
                |m: &CBroadcast_PostChatMessage_Response| { &m.result },
                |m: &mut CBroadcast_PostChatMessage_Response| { &mut m.result },
                CBroadcast_PostChatMessage_Response::get_result,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "cooldown_time_seconds",
                |m: &CBroadcast_PostChatMessage_Response| { &m.cooldown_time_seconds },
                |m: &mut CBroadcast_PostChatMessage_Response| { &mut m.cooldown_time_seconds },
                CBroadcast_PostChatMessage_Response::get_cooldown_time_seconds,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_PostChatMessage_Response>(
                "CBroadcast_PostChatMessage_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_PostChatMessage_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_PostChatMessage_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_PostChatMessage_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_PostChatMessage_Response {
    fn clear(&mut self) {
        self.persona_name.clear();
        self.in_game = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.cooldown_time_seconds = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_PostChatMessage_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_PostChatMessage_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_UpdateChatMessageFlair_Request {
    // message fields
    chat_id: ::std::option::Option<u64>,
    flair: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_UpdateChatMessageFlair_Request {
    fn default() -> &'a CBroadcast_UpdateChatMessageFlair_Request {
        <CBroadcast_UpdateChatMessageFlair_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_UpdateChatMessageFlair_Request {
    pub fn new() -> CBroadcast_UpdateChatMessageFlair_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional string flair = 2;

    pub fn get_flair(&self) -> &str {
        match self.flair.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_flair(&mut self) {
        self.flair.clear();
    }

    pub fn has_flair(&self) -> bool {
        self.flair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flair(&mut self, v: ::std::string::String) {
        self.flair = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flair(&mut self) -> &mut ::std::string::String {
        if self.flair.is_none() {
            self.flair.set_default();
        }
        self.flair.as_mut().unwrap()
    }

    // Take field
    pub fn take_flair(&mut self) -> ::std::string::String {
        self.flair.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_UpdateChatMessageFlair_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.flair)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.flair.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.flair.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_UpdateChatMessageFlair_Request {
        CBroadcast_UpdateChatMessageFlair_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_UpdateChatMessageFlair_Request| { &m.chat_id },
                |m: &mut CBroadcast_UpdateChatMessageFlair_Request| { &mut m.chat_id },
                CBroadcast_UpdateChatMessageFlair_Request::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "flair",
                |m: &CBroadcast_UpdateChatMessageFlair_Request| { &m.flair },
                |m: &mut CBroadcast_UpdateChatMessageFlair_Request| { &mut m.flair },
                CBroadcast_UpdateChatMessageFlair_Request::get_flair,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_UpdateChatMessageFlair_Request>(
                "CBroadcast_UpdateChatMessageFlair_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_UpdateChatMessageFlair_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_UpdateChatMessageFlair_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_UpdateChatMessageFlair_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_UpdateChatMessageFlair_Request {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.flair.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_UpdateChatMessageFlair_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_UpdateChatMessageFlair_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_UpdateChatMessageFlair_Response {
    // message fields
    result: ::std::option::Option<i32>,
    chat_id: ::std::option::Option<u64>,
    flair: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_UpdateChatMessageFlair_Response {
    fn default() -> &'a CBroadcast_UpdateChatMessageFlair_Response {
        <CBroadcast_UpdateChatMessageFlair_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_UpdateChatMessageFlair_Response {
    pub fn new() -> CBroadcast_UpdateChatMessageFlair_Response {
        ::std::default::Default::default()
    }

    // optional int32 result = 1;

    pub fn get_result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional fixed64 chat_id = 2;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional string flair = 3;

    pub fn get_flair(&self) -> &str {
        match self.flair.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_flair(&mut self) {
        self.flair.clear();
    }

    pub fn has_flair(&self) -> bool {
        self.flair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flair(&mut self, v: ::std::string::String) {
        self.flair = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flair(&mut self) -> &mut ::std::string::String {
        if self.flair.is_none() {
            self.flair.set_default();
        }
        self.flair.as_mut().unwrap()
    }

    // Take field
    pub fn take_flair(&mut self) -> ::std::string::String {
        self.flair.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_UpdateChatMessageFlair_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.flair)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.flair.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.chat_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.flair.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_UpdateChatMessageFlair_Response {
        CBroadcast_UpdateChatMessageFlair_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "result",
                |m: &CBroadcast_UpdateChatMessageFlair_Response| { &m.result },
                |m: &mut CBroadcast_UpdateChatMessageFlair_Response| { &mut m.result },
                CBroadcast_UpdateChatMessageFlair_Response::get_result,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_UpdateChatMessageFlair_Response| { &m.chat_id },
                |m: &mut CBroadcast_UpdateChatMessageFlair_Response| { &mut m.chat_id },
                CBroadcast_UpdateChatMessageFlair_Response::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "flair",
                |m: &CBroadcast_UpdateChatMessageFlair_Response| { &m.flair },
                |m: &mut CBroadcast_UpdateChatMessageFlair_Response| { &mut m.flair },
                CBroadcast_UpdateChatMessageFlair_Response::get_flair,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_UpdateChatMessageFlair_Response>(
                "CBroadcast_UpdateChatMessageFlair_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_UpdateChatMessageFlair_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_UpdateChatMessageFlair_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_UpdateChatMessageFlair_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_UpdateChatMessageFlair_Response {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.chat_id = ::std::option::Option::None;
        self.flair.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_UpdateChatMessageFlair_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_UpdateChatMessageFlair_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_MuteBroadcastChatUser_Request {
    // message fields
    chat_id: ::std::option::Option<u64>,
    user_steamid: ::std::option::Option<u64>,
    muted: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_MuteBroadcastChatUser_Request {
    fn default() -> &'a CBroadcast_MuteBroadcastChatUser_Request {
        <CBroadcast_MuteBroadcastChatUser_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_MuteBroadcastChatUser_Request {
    pub fn new() -> CBroadcast_MuteBroadcastChatUser_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn get_user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }

    // optional bool muted = 3;

    pub fn get_muted(&self) -> bool {
        self.muted.unwrap_or(false)
    }

    pub fn clear_muted(&mut self) {
        self.muted = ::std::option::Option::None;
    }

    pub fn has_muted(&self) -> bool {
        self.muted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_muted(&mut self, v: bool) {
        self.muted = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_MuteBroadcastChatUser_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.muted = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.user_steamid {
            my_size += 9;
        }
        if let Some(v) = self.muted {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.muted {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_MuteBroadcastChatUser_Request {
        CBroadcast_MuteBroadcastChatUser_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_MuteBroadcastChatUser_Request| { &m.chat_id },
                |m: &mut CBroadcast_MuteBroadcastChatUser_Request| { &mut m.chat_id },
                CBroadcast_MuteBroadcastChatUser_Request::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "user_steamid",
                |m: &CBroadcast_MuteBroadcastChatUser_Request| { &m.user_steamid },
                |m: &mut CBroadcast_MuteBroadcastChatUser_Request| { &mut m.user_steamid },
                CBroadcast_MuteBroadcastChatUser_Request::get_user_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "muted",
                |m: &CBroadcast_MuteBroadcastChatUser_Request| { &m.muted },
                |m: &mut CBroadcast_MuteBroadcastChatUser_Request| { &mut m.muted },
                CBroadcast_MuteBroadcastChatUser_Request::get_muted,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_MuteBroadcastChatUser_Request>(
                "CBroadcast_MuteBroadcastChatUser_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_MuteBroadcastChatUser_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_MuteBroadcastChatUser_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_MuteBroadcastChatUser_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_MuteBroadcastChatUser_Request {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.muted = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_MuteBroadcastChatUser_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_MuteBroadcastChatUser_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_MuteBroadcastChatUser_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_MuteBroadcastChatUser_Response {
    fn default() -> &'a CBroadcast_MuteBroadcastChatUser_Response {
        <CBroadcast_MuteBroadcastChatUser_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_MuteBroadcastChatUser_Response {
    pub fn new() -> CBroadcast_MuteBroadcastChatUser_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_MuteBroadcastChatUser_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_MuteBroadcastChatUser_Response {
        CBroadcast_MuteBroadcastChatUser_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_MuteBroadcastChatUser_Response>(
                "CBroadcast_MuteBroadcastChatUser_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_MuteBroadcastChatUser_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_MuteBroadcastChatUser_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_MuteBroadcastChatUser_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_MuteBroadcastChatUser_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_MuteBroadcastChatUser_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_MuteBroadcastChatUser_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_RemoveUserChatText_Request {
    // message fields
    chat_id: ::std::option::Option<u64>,
    user_steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_RemoveUserChatText_Request {
    fn default() -> &'a CBroadcast_RemoveUserChatText_Request {
        <CBroadcast_RemoveUserChatText_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_RemoveUserChatText_Request {
    pub fn new() -> CBroadcast_RemoveUserChatText_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn get_user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_RemoveUserChatText_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        if let Some(v) = self.user_steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_RemoveUserChatText_Request {
        CBroadcast_RemoveUserChatText_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_RemoveUserChatText_Request| { &m.chat_id },
                |m: &mut CBroadcast_RemoveUserChatText_Request| { &mut m.chat_id },
                CBroadcast_RemoveUserChatText_Request::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "user_steamid",
                |m: &CBroadcast_RemoveUserChatText_Request| { &m.user_steamid },
                |m: &mut CBroadcast_RemoveUserChatText_Request| { &mut m.user_steamid },
                CBroadcast_RemoveUserChatText_Request::get_user_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_RemoveUserChatText_Request>(
                "CBroadcast_RemoveUserChatText_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_RemoveUserChatText_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_RemoveUserChatText_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_RemoveUserChatText_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_RemoveUserChatText_Request {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_RemoveUserChatText_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_RemoveUserChatText_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_RemoveUserChatText_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_RemoveUserChatText_Response {
    fn default() -> &'a CBroadcast_RemoveUserChatText_Response {
        <CBroadcast_RemoveUserChatText_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_RemoveUserChatText_Response {
    pub fn new() -> CBroadcast_RemoveUserChatText_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_RemoveUserChatText_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_RemoveUserChatText_Response {
        CBroadcast_RemoveUserChatText_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_RemoveUserChatText_Response>(
                "CBroadcast_RemoveUserChatText_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_RemoveUserChatText_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_RemoveUserChatText_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_RemoveUserChatText_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_RemoveUserChatText_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_RemoveUserChatText_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_RemoveUserChatText_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastChatUserNames_Request {
    // message fields
    chat_id: ::std::option::Option<u64>,
    pub user_steamid: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastChatUserNames_Request {
    fn default() -> &'a CBroadcast_GetBroadcastChatUserNames_Request {
        <CBroadcast_GetBroadcastChatUserNames_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastChatUserNames_Request {
    pub fn new() -> CBroadcast_GetBroadcastChatUserNames_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 chat_id = 1;

    pub fn get_chat_id(&self) -> u64 {
        self.chat_id.unwrap_or(0)
    }

    pub fn clear_chat_id(&mut self) {
        self.chat_id = ::std::option::Option::None;
    }

    pub fn has_chat_id(&self) -> bool {
        self.chat_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_id(&mut self, v: u64) {
        self.chat_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastChatUserNames_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_repeated_fixed64_into(wire_type, is, &mut self.user_steamid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.chat_id {
            my_size += 9;
        }
        my_size += 9 * self.user_steamid.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.chat_id {
            os.write_fixed64(1, v)?;
        }
        for v in &self.user_steamid {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastChatUserNames_Request {
        CBroadcast_GetBroadcastChatUserNames_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "chat_id",
                |m: &CBroadcast_GetBroadcastChatUserNames_Request| { &m.chat_id },
                |m: &mut CBroadcast_GetBroadcastChatUserNames_Request| { &mut m.chat_id },
                CBroadcast_GetBroadcastChatUserNames_Request::get_chat_id,
            ));
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64>(
                "user_steamid",
                |m: &CBroadcast_GetBroadcastChatUserNames_Request| { &m.user_steamid },
                |m: &mut CBroadcast_GetBroadcastChatUserNames_Request| { &mut m.user_steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastChatUserNames_Request>(
                "CBroadcast_GetBroadcastChatUserNames_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastChatUserNames_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastChatUserNames_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastChatUserNames_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastChatUserNames_Request {
    fn clear(&mut self) {
        self.chat_id = ::std::option::Option::None;
        self.user_steamid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastChatUserNames_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastChatUserNames_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastChatUserNames_Response {
    // message fields
    pub persona_names: ::protobuf::RepeatedField<cbroadcast_get_broadcast_chat_user_names_response::PersonaName>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastChatUserNames_Response {
    fn default() -> &'a CBroadcast_GetBroadcastChatUserNames_Response {
        <CBroadcast_GetBroadcastChatUserNames_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastChatUserNames_Response {
    pub fn new() -> CBroadcast_GetBroadcastChatUserNames_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastChatUserNames_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.persona_names {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.persona_names)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.persona_names {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.persona_names {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastChatUserNames_Response {
        CBroadcast_GetBroadcastChatUserNames_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cbroadcast_get_broadcast_chat_user_names_response::PersonaName>>(
                "persona_names",
                |m: &CBroadcast_GetBroadcastChatUserNames_Response| { &m.persona_names },
                |m: &mut CBroadcast_GetBroadcastChatUserNames_Response| { &mut m.persona_names },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastChatUserNames_Response>(
                "CBroadcast_GetBroadcastChatUserNames_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastChatUserNames_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastChatUserNames_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastChatUserNames_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastChatUserNames_Response {
    fn clear(&mut self) {
        self.persona_names.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastChatUserNames_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastChatUserNames_Response {
}

/// Nested message and enums of message `CBroadcast_GetBroadcastChatUserNames_Response`
pub mod cbroadcast_get_broadcast_chat_user_names_response {
    #[derive(PartialEq,Clone,Default)]
    pub struct PersonaName {
        // message fields
        steam_id: ::std::option::Option<u64>,
        persona: ::protobuf::SingularField<::std::string::String>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a PersonaName {
        fn default() -> &'a PersonaName {
            <PersonaName as ::protobuf::Message>::default_instance()
        }
    }

    impl PersonaName {
        pub fn new() -> PersonaName {
            ::std::default::Default::default()
        }

        // optional fixed64 steam_id = 1;

        pub fn get_steam_id(&self) -> u64 {
            self.steam_id.unwrap_or(0)
        }

        pub fn clear_steam_id(&mut self) {
            self.steam_id = ::std::option::Option::None;
        }

        pub fn has_steam_id(&self) -> bool {
            self.steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_id(&mut self, v: u64) {
            self.steam_id = ::std::option::Option::Some(v);
        }

        // optional string persona = 2;

        pub fn get_persona(&self) -> &str {
            match self.persona.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona(&mut self) {
            self.persona.clear();
        }

        pub fn has_persona(&self) -> bool {
            self.persona.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona(&mut self, v: ::std::string::String) {
            self.persona = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona(&mut self) -> &mut ::std::string::String {
            if self.persona.is_none() {
                self.persona.set_default();
            }
            self.persona.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona(&mut self) -> ::std::string::String {
            self.persona.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for PersonaName {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    2 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.persona)?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.steam_id {
                my_size += 9;
            }
            if let Some(v) = self.persona.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.steam_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.persona.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> PersonaName {
            PersonaName::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                    "steam_id",
                    |m: &PersonaName| { &m.steam_id },
                    |m: &mut PersonaName| { &mut m.steam_id },
                    PersonaName::get_steam_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "persona",
                    |m: &PersonaName| { &m.persona },
                    |m: &mut PersonaName| { &mut m.persona },
                    PersonaName::get_persona,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PersonaName>(
                    "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static PersonaName {
            static instance: ::protobuf::rt::Lazy<PersonaName> = ::protobuf::rt::Lazy::INIT;
            instance.get(PersonaName::new)
        }
    }

    impl ::protobuf::Clear for PersonaName {
        fn clear(&mut self) {
            self.steam_id = ::std::option::Option::None;
            self.persona.clear();
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for PersonaName {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PersonaName {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StartBuildClip_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    broadcast_session_id: ::std::option::Option<u64>,
    first_segment: ::std::option::Option<i32>,
    num_segments: ::std::option::Option<i32>,
    clip_description: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StartBuildClip_Request {
    fn default() -> &'a CBroadcast_StartBuildClip_Request {
        <CBroadcast_StartBuildClip_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StartBuildClip_Request {
    pub fn new() -> CBroadcast_StartBuildClip_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_session_id = 2;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional int32 first_segment = 3;

    pub fn get_first_segment(&self) -> i32 {
        self.first_segment.unwrap_or(0)
    }

    pub fn clear_first_segment(&mut self) {
        self.first_segment = ::std::option::Option::None;
    }

    pub fn has_first_segment(&self) -> bool {
        self.first_segment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_segment(&mut self, v: i32) {
        self.first_segment = ::std::option::Option::Some(v);
    }

    // optional int32 num_segments = 4;

    pub fn get_num_segments(&self) -> i32 {
        self.num_segments.unwrap_or(0)
    }

    pub fn clear_num_segments(&mut self) {
        self.num_segments = ::std::option::Option::None;
    }

    pub fn has_num_segments(&self) -> bool {
        self.num_segments.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_segments(&mut self, v: i32) {
        self.num_segments = ::std::option::Option::Some(v);
    }

    // optional string clip_description = 5;

    pub fn get_clip_description(&self) -> &str {
        match self.clip_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_clip_description(&mut self) {
        self.clip_description.clear();
    }

    pub fn has_clip_description(&self) -> bool {
        self.clip_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clip_description(&mut self, v: ::std::string::String) {
        self.clip_description = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clip_description(&mut self) -> &mut ::std::string::String {
        if self.clip_description.is_none() {
            self.clip_description.set_default();
        }
        self.clip_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_clip_description(&mut self) -> ::std::string::String {
        self.clip_description.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_StartBuildClip_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.first_segment = ::std::option::Option::Some(is.read_int32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.num_segments = ::std::option::Option::Some(is.read_int32()?);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.clip_description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.first_segment {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.num_segments {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.clip_description.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.first_segment {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.num_segments {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.clip_description.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StartBuildClip_Request {
        CBroadcast_StartBuildClip_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_StartBuildClip_Request| { &m.steamid },
                |m: &mut CBroadcast_StartBuildClip_Request| { &mut m.steamid },
                CBroadcast_StartBuildClip_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_StartBuildClip_Request| { &m.broadcast_session_id },
                |m: &mut CBroadcast_StartBuildClip_Request| { &mut m.broadcast_session_id },
                CBroadcast_StartBuildClip_Request::get_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "first_segment",
                |m: &CBroadcast_StartBuildClip_Request| { &m.first_segment },
                |m: &mut CBroadcast_StartBuildClip_Request| { &mut m.first_segment },
                CBroadcast_StartBuildClip_Request::get_first_segment,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "num_segments",
                |m: &CBroadcast_StartBuildClip_Request| { &m.num_segments },
                |m: &mut CBroadcast_StartBuildClip_Request| { &mut m.num_segments },
                CBroadcast_StartBuildClip_Request::get_num_segments,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "clip_description",
                |m: &CBroadcast_StartBuildClip_Request| { &m.clip_description },
                |m: &mut CBroadcast_StartBuildClip_Request| { &mut m.clip_description },
                CBroadcast_StartBuildClip_Request::get_clip_description,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StartBuildClip_Request>(
                "CBroadcast_StartBuildClip_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StartBuildClip_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StartBuildClip_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StartBuildClip_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StartBuildClip_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.broadcast_session_id = ::std::option::Option::None;
        self.first_segment = ::std::option::Option::None;
        self.num_segments = ::std::option::Option::None;
        self.clip_description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StartBuildClip_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StartBuildClip_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StartBuildClip_Response {
    // message fields
    broadcast_clip_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StartBuildClip_Response {
    fn default() -> &'a CBroadcast_StartBuildClip_Response {
        <CBroadcast_StartBuildClip_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StartBuildClip_Response {
    pub fn new() -> CBroadcast_StartBuildClip_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_clip_id = 1;

    pub fn get_broadcast_clip_id(&self) -> u64 {
        self.broadcast_clip_id.unwrap_or(0)
    }

    pub fn clear_broadcast_clip_id(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_clip_id(&self) -> bool {
        self.broadcast_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_clip_id(&mut self, v: u64) {
        self.broadcast_clip_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_StartBuildClip_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_clip_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_clip_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StartBuildClip_Response {
        CBroadcast_StartBuildClip_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_clip_id",
                |m: &CBroadcast_StartBuildClip_Response| { &m.broadcast_clip_id },
                |m: &mut CBroadcast_StartBuildClip_Response| { &mut m.broadcast_clip_id },
                CBroadcast_StartBuildClip_Response::get_broadcast_clip_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StartBuildClip_Response>(
                "CBroadcast_StartBuildClip_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StartBuildClip_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StartBuildClip_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StartBuildClip_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StartBuildClip_Response {
    fn clear(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StartBuildClip_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StartBuildClip_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBuildClipStatus_Request {
    // message fields
    broadcast_clip_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBuildClipStatus_Request {
    fn default() -> &'a CBroadcast_GetBuildClipStatus_Request {
        <CBroadcast_GetBuildClipStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBuildClipStatus_Request {
    pub fn new() -> CBroadcast_GetBuildClipStatus_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_clip_id = 1;

    pub fn get_broadcast_clip_id(&self) -> u64 {
        self.broadcast_clip_id.unwrap_or(0)
    }

    pub fn clear_broadcast_clip_id(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_clip_id(&self) -> bool {
        self.broadcast_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_clip_id(&mut self, v: u64) {
        self.broadcast_clip_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBuildClipStatus_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_clip_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_clip_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBuildClipStatus_Request {
        CBroadcast_GetBuildClipStatus_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_clip_id",
                |m: &CBroadcast_GetBuildClipStatus_Request| { &m.broadcast_clip_id },
                |m: &mut CBroadcast_GetBuildClipStatus_Request| { &mut m.broadcast_clip_id },
                CBroadcast_GetBuildClipStatus_Request::get_broadcast_clip_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBuildClipStatus_Request>(
                "CBroadcast_GetBuildClipStatus_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBuildClipStatus_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBuildClipStatus_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBuildClipStatus_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBuildClipStatus_Request {
    fn clear(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBuildClipStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBuildClipStatus_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBuildClipStatus_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBuildClipStatus_Response {
    fn default() -> &'a CBroadcast_GetBuildClipStatus_Response {
        <CBroadcast_GetBuildClipStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBuildClipStatus_Response {
    pub fn new() -> CBroadcast_GetBuildClipStatus_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_GetBuildClipStatus_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBuildClipStatus_Response {
        CBroadcast_GetBuildClipStatus_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBuildClipStatus_Response>(
                "CBroadcast_GetBuildClipStatus_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBuildClipStatus_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBuildClipStatus_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBuildClipStatus_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBuildClipStatus_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBuildClipStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBuildClipStatus_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SetClipDetails_Request {
    // message fields
    broadcast_clip_id: ::std::option::Option<u64>,
    start_time: ::std::option::Option<u32>,
    end_time: ::std::option::Option<u32>,
    video_description: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SetClipDetails_Request {
    fn default() -> &'a CBroadcast_SetClipDetails_Request {
        <CBroadcast_SetClipDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SetClipDetails_Request {
    pub fn new() -> CBroadcast_SetClipDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint64 broadcast_clip_id = 1;

    pub fn get_broadcast_clip_id(&self) -> u64 {
        self.broadcast_clip_id.unwrap_or(0)
    }

    pub fn clear_broadcast_clip_id(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_clip_id(&self) -> bool {
        self.broadcast_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_clip_id(&mut self, v: u64) {
        self.broadcast_clip_id = ::std::option::Option::Some(v);
    }

    // optional uint32 start_time = 2;

    pub fn get_start_time(&self) -> u32 {
        self.start_time.unwrap_or(0)
    }

    pub fn clear_start_time(&mut self) {
        self.start_time = ::std::option::Option::None;
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u32) {
        self.start_time = ::std::option::Option::Some(v);
    }

    // optional uint32 end_time = 3;

    pub fn get_end_time(&self) -> u32 {
        self.end_time.unwrap_or(0)
    }

    pub fn clear_end_time(&mut self) {
        self.end_time = ::std::option::Option::None;
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: u32) {
        self.end_time = ::std::option::Option::Some(v);
    }

    // optional string video_description = 4;

    pub fn get_video_description(&self) -> &str {
        match self.video_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_video_description(&mut self) {
        self.video_description.clear();
    }

    pub fn has_video_description(&self) -> bool {
        self.video_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_description(&mut self, v: ::std::string::String) {
        self.video_description = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_video_description(&mut self) -> &mut ::std::string::String {
        if self.video_description.is_none() {
            self.video_description.set_default();
        }
        self.video_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_video_description(&mut self) -> ::std::string::String {
        self.video_description.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_SetClipDetails_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_clip_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.end_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.video_description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_clip_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.start_time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.end_time {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.video_description.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_clip_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.start_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.end_time {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.video_description.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SetClipDetails_Request {
        CBroadcast_SetClipDetails_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "broadcast_clip_id",
                |m: &CBroadcast_SetClipDetails_Request| { &m.broadcast_clip_id },
                |m: &mut CBroadcast_SetClipDetails_Request| { &mut m.broadcast_clip_id },
                CBroadcast_SetClipDetails_Request::get_broadcast_clip_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "start_time",
                |m: &CBroadcast_SetClipDetails_Request| { &m.start_time },
                |m: &mut CBroadcast_SetClipDetails_Request| { &mut m.start_time },
                CBroadcast_SetClipDetails_Request::get_start_time,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "end_time",
                |m: &CBroadcast_SetClipDetails_Request| { &m.end_time },
                |m: &mut CBroadcast_SetClipDetails_Request| { &mut m.end_time },
                CBroadcast_SetClipDetails_Request::get_end_time,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "video_description",
                |m: &CBroadcast_SetClipDetails_Request| { &m.video_description },
                |m: &mut CBroadcast_SetClipDetails_Request| { &mut m.video_description },
                CBroadcast_SetClipDetails_Request::get_video_description,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SetClipDetails_Request>(
                "CBroadcast_SetClipDetails_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SetClipDetails_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SetClipDetails_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SetClipDetails_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SetClipDetails_Request {
    fn clear(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
        self.start_time = ::std::option::Option::None;
        self.end_time = ::std::option::Option::None;
        self.video_description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SetClipDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SetClipDetails_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SetClipDetails_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SetClipDetails_Response {
    fn default() -> &'a CBroadcast_SetClipDetails_Response {
        <CBroadcast_SetClipDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SetClipDetails_Response {
    pub fn new() -> CBroadcast_SetClipDetails_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_SetClipDetails_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SetClipDetails_Response {
        CBroadcast_SetClipDetails_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SetClipDetails_Response>(
                "CBroadcast_SetClipDetails_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SetClipDetails_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SetClipDetails_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SetClipDetails_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SetClipDetails_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SetClipDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SetClipDetails_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetClipDetails_Request {
    // message fields
    broadcast_clip_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetClipDetails_Request {
    fn default() -> &'a CBroadcast_GetClipDetails_Request {
        <CBroadcast_GetClipDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetClipDetails_Request {
    pub fn new() -> CBroadcast_GetClipDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint64 broadcast_clip_id = 1;

    pub fn get_broadcast_clip_id(&self) -> u64 {
        self.broadcast_clip_id.unwrap_or(0)
    }

    pub fn clear_broadcast_clip_id(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_clip_id(&self) -> bool {
        self.broadcast_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_clip_id(&mut self, v: u64) {
        self.broadcast_clip_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetClipDetails_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_clip_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_clip_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_clip_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetClipDetails_Request {
        CBroadcast_GetClipDetails_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "broadcast_clip_id",
                |m: &CBroadcast_GetClipDetails_Request| { &m.broadcast_clip_id },
                |m: &mut CBroadcast_GetClipDetails_Request| { &mut m.broadcast_clip_id },
                CBroadcast_GetClipDetails_Request::get_broadcast_clip_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetClipDetails_Request>(
                "CBroadcast_GetClipDetails_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetClipDetails_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetClipDetails_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetClipDetails_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetClipDetails_Request {
    fn clear(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetClipDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetClipDetails_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetClipDetails_Response {
    // message fields
    broadcast_clip_id: ::std::option::Option<u64>,
    video_id: ::std::option::Option<u64>,
    channel_id: ::std::option::Option<u64>,
    app_id: ::std::option::Option<u32>,
    accountid_broadcaster: ::std::option::Option<u32>,
    accountid_clipmaker: ::std::option::Option<u32>,
    video_description: ::protobuf::SingularField<::std::string::String>,
    start_time: ::std::option::Option<u32>,
    length_milliseconds: ::std::option::Option<u32>,
    thumbnail_path: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetClipDetails_Response {
    fn default() -> &'a CBroadcast_GetClipDetails_Response {
        <CBroadcast_GetClipDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetClipDetails_Response {
    pub fn new() -> CBroadcast_GetClipDetails_Response {
        ::std::default::Default::default()
    }

    // optional uint64 broadcast_clip_id = 1;

    pub fn get_broadcast_clip_id(&self) -> u64 {
        self.broadcast_clip_id.unwrap_or(0)
    }

    pub fn clear_broadcast_clip_id(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_clip_id(&self) -> bool {
        self.broadcast_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_clip_id(&mut self, v: u64) {
        self.broadcast_clip_id = ::std::option::Option::Some(v);
    }

    // optional uint64 video_id = 2;

    pub fn get_video_id(&self) -> u64 {
        self.video_id.unwrap_or(0)
    }

    pub fn clear_video_id(&mut self) {
        self.video_id = ::std::option::Option::None;
    }

    pub fn has_video_id(&self) -> bool {
        self.video_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_id(&mut self, v: u64) {
        self.video_id = ::std::option::Option::Some(v);
    }

    // optional uint64 channel_id = 3;

    pub fn get_channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 4;

    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid_broadcaster = 5;

    pub fn get_accountid_broadcaster(&self) -> u32 {
        self.accountid_broadcaster.unwrap_or(0)
    }

    pub fn clear_accountid_broadcaster(&mut self) {
        self.accountid_broadcaster = ::std::option::Option::None;
    }

    pub fn has_accountid_broadcaster(&self) -> bool {
        self.accountid_broadcaster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid_broadcaster(&mut self, v: u32) {
        self.accountid_broadcaster = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid_clipmaker = 6;

    pub fn get_accountid_clipmaker(&self) -> u32 {
        self.accountid_clipmaker.unwrap_or(0)
    }

    pub fn clear_accountid_clipmaker(&mut self) {
        self.accountid_clipmaker = ::std::option::Option::None;
    }

    pub fn has_accountid_clipmaker(&self) -> bool {
        self.accountid_clipmaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid_clipmaker(&mut self, v: u32) {
        self.accountid_clipmaker = ::std::option::Option::Some(v);
    }

    // optional string video_description = 7;

    pub fn get_video_description(&self) -> &str {
        match self.video_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_video_description(&mut self) {
        self.video_description.clear();
    }

    pub fn has_video_description(&self) -> bool {
        self.video_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_description(&mut self, v: ::std::string::String) {
        self.video_description = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_video_description(&mut self) -> &mut ::std::string::String {
        if self.video_description.is_none() {
            self.video_description.set_default();
        }
        self.video_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_video_description(&mut self) -> ::std::string::String {
        self.video_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 start_time = 8;

    pub fn get_start_time(&self) -> u32 {
        self.start_time.unwrap_or(0)
    }

    pub fn clear_start_time(&mut self) {
        self.start_time = ::std::option::Option::None;
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u32) {
        self.start_time = ::std::option::Option::Some(v);
    }

    // optional uint32 length_milliseconds = 9;

    pub fn get_length_milliseconds(&self) -> u32 {
        self.length_milliseconds.unwrap_or(0)
    }

    pub fn clear_length_milliseconds(&mut self) {
        self.length_milliseconds = ::std::option::Option::None;
    }

    pub fn has_length_milliseconds(&self) -> bool {
        self.length_milliseconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length_milliseconds(&mut self, v: u32) {
        self.length_milliseconds = ::std::option::Option::Some(v);
    }

    // optional string thumbnail_path = 10;

    pub fn get_thumbnail_path(&self) -> &str {
        match self.thumbnail_path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_path(&mut self) {
        self.thumbnail_path.clear();
    }

    pub fn has_thumbnail_path(&self) -> bool {
        self.thumbnail_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_path(&mut self, v: ::std::string::String) {
        self.thumbnail_path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_path(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_path.is_none() {
            self.thumbnail_path.set_default();
        }
        self.thumbnail_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_path(&mut self) -> ::std::string::String {
        self.thumbnail_path.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_GetClipDetails_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_clip_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.video_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.accountid_broadcaster = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.accountid_clipmaker = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.video_description)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.length_milliseconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                10 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_clip_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.video_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.channel_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.accountid_broadcaster {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.accountid_clipmaker {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.video_description.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.start_time {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length_milliseconds {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thumbnail_path.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_clip_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.video_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.channel_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.accountid_broadcaster {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.accountid_clipmaker {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.video_description.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.start_time {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.length_milliseconds {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.thumbnail_path.as_ref() {
            os.write_string(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetClipDetails_Response {
        CBroadcast_GetClipDetails_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "broadcast_clip_id",
                |m: &CBroadcast_GetClipDetails_Response| { &m.broadcast_clip_id },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.broadcast_clip_id },
                CBroadcast_GetClipDetails_Response::get_broadcast_clip_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "video_id",
                |m: &CBroadcast_GetClipDetails_Response| { &m.video_id },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.video_id },
                CBroadcast_GetClipDetails_Response::get_video_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "channel_id",
                |m: &CBroadcast_GetClipDetails_Response| { &m.channel_id },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.channel_id },
                CBroadcast_GetClipDetails_Response::get_channel_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "app_id",
                |m: &CBroadcast_GetClipDetails_Response| { &m.app_id },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.app_id },
                CBroadcast_GetClipDetails_Response::get_app_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "accountid_broadcaster",
                |m: &CBroadcast_GetClipDetails_Response| { &m.accountid_broadcaster },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.accountid_broadcaster },
                CBroadcast_GetClipDetails_Response::get_accountid_broadcaster,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "accountid_clipmaker",
                |m: &CBroadcast_GetClipDetails_Response| { &m.accountid_clipmaker },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.accountid_clipmaker },
                CBroadcast_GetClipDetails_Response::get_accountid_clipmaker,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "video_description",
                |m: &CBroadcast_GetClipDetails_Response| { &m.video_description },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.video_description },
                CBroadcast_GetClipDetails_Response::get_video_description,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "start_time",
                |m: &CBroadcast_GetClipDetails_Response| { &m.start_time },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.start_time },
                CBroadcast_GetClipDetails_Response::get_start_time,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "length_milliseconds",
                |m: &CBroadcast_GetClipDetails_Response| { &m.length_milliseconds },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.length_milliseconds },
                CBroadcast_GetClipDetails_Response::get_length_milliseconds,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_path",
                |m: &CBroadcast_GetClipDetails_Response| { &m.thumbnail_path },
                |m: &mut CBroadcast_GetClipDetails_Response| { &mut m.thumbnail_path },
                CBroadcast_GetClipDetails_Response::get_thumbnail_path,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetClipDetails_Response>(
                "CBroadcast_GetClipDetails_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetClipDetails_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetClipDetails_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetClipDetails_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetClipDetails_Response {
    fn clear(&mut self) {
        self.broadcast_clip_id = ::std::option::Option::None;
        self.video_id = ::std::option::Option::None;
        self.channel_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.accountid_broadcaster = ::std::option::Option::None;
        self.accountid_clipmaker = ::std::option::Option::None;
        self.video_description.clear();
        self.start_time = ::std::option::Option::None;
        self.length_milliseconds = ::std::option::Option::None;
        self.thumbnail_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetClipDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetClipDetails_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SetRTMPInfo_Request {
    // message fields
    broadcast_permission: ::std::option::Option<i32>,
    update_token: ::std::option::Option<bool>,
    broadcast_delay: ::std::option::Option<i32>,
    app_id: ::std::option::Option<u32>,
    required_app_id: ::std::option::Option<u32>,
    broadcast_chat_permission: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EBroadcastChatPermission>>,
    broadcast_buffer: ::std::option::Option<i32>,
    steamid: ::std::option::Option<u64>,
    chat_rate_limit: ::std::option::Option<u32>,
    enable_replay: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SetRTMPInfo_Request {
    fn default() -> &'a CBroadcast_SetRTMPInfo_Request {
        <CBroadcast_SetRTMPInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SetRTMPInfo_Request {
    pub fn new() -> CBroadcast_SetRTMPInfo_Request {
        ::std::default::Default::default()
    }

    // optional int32 broadcast_permission = 1;

    pub fn get_broadcast_permission(&self) -> i32 {
        self.broadcast_permission.unwrap_or(0)
    }

    pub fn clear_broadcast_permission(&mut self) {
        self.broadcast_permission = ::std::option::Option::None;
    }

    pub fn has_broadcast_permission(&self) -> bool {
        self.broadcast_permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_permission(&mut self, v: i32) {
        self.broadcast_permission = ::std::option::Option::Some(v);
    }

    // optional bool update_token = 2;

    pub fn get_update_token(&self) -> bool {
        self.update_token.unwrap_or(false)
    }

    pub fn clear_update_token(&mut self) {
        self.update_token = ::std::option::Option::None;
    }

    pub fn has_update_token(&self) -> bool {
        self.update_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_token(&mut self, v: bool) {
        self.update_token = ::std::option::Option::Some(v);
    }

    // optional int32 broadcast_delay = 3;

    pub fn get_broadcast_delay(&self) -> i32 {
        self.broadcast_delay.unwrap_or(0)
    }

    pub fn clear_broadcast_delay(&mut self) {
        self.broadcast_delay = ::std::option::Option::None;
    }

    pub fn has_broadcast_delay(&self) -> bool {
        self.broadcast_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_delay(&mut self, v: i32) {
        self.broadcast_delay = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 4;

    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 required_app_id = 5;

    pub fn get_required_app_id(&self) -> u32 {
        self.required_app_id.unwrap_or(0)
    }

    pub fn clear_required_app_id(&mut self) {
        self.required_app_id = ::std::option::Option::None;
    }

    pub fn has_required_app_id(&self) -> bool {
        self.required_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_app_id(&mut self, v: u32) {
        self.required_app_id = ::std::option::Option::Some(v);
    }

    // optional .EBroadcastChatPermission broadcast_chat_permission = 6;

    pub fn get_broadcast_chat_permission(&self) -> EBroadcastChatPermission {
        match self.broadcast_chat_permission {
            Some(e) => e.enum_value_or(EBroadcastChatPermission::k_EBroadcastChatPermissionPublic),
            None => EBroadcastChatPermission::k_EBroadcastChatPermissionPublic,
        }
    }

    pub fn clear_broadcast_chat_permission(&mut self) {
        self.broadcast_chat_permission = ::std::option::Option::None;
    }

    pub fn has_broadcast_chat_permission(&self) -> bool {
        self.broadcast_chat_permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_chat_permission(&mut self, v: EBroadcastChatPermission) {
        self.broadcast_chat_permission = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional int32 broadcast_buffer = 7;

    pub fn get_broadcast_buffer(&self) -> i32 {
        self.broadcast_buffer.unwrap_or(0)
    }

    pub fn clear_broadcast_buffer(&mut self) {
        self.broadcast_buffer = ::std::option::Option::None;
    }

    pub fn has_broadcast_buffer(&self) -> bool {
        self.broadcast_buffer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_buffer(&mut self, v: i32) {
        self.broadcast_buffer = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 8;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 chat_rate_limit = 9;

    pub fn get_chat_rate_limit(&self) -> u32 {
        self.chat_rate_limit.unwrap_or(0)
    }

    pub fn clear_chat_rate_limit(&mut self) {
        self.chat_rate_limit = ::std::option::Option::None;
    }

    pub fn has_chat_rate_limit(&self) -> bool {
        self.chat_rate_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_rate_limit(&mut self, v: u32) {
        self.chat_rate_limit = ::std::option::Option::Some(v);
    }

    // optional bool enable_replay = 10;

    pub fn get_enable_replay(&self) -> bool {
        self.enable_replay.unwrap_or(false)
    }

    pub fn clear_enable_replay(&mut self) {
        self.enable_replay = ::std::option::Option::None;
    }

    pub fn has_enable_replay(&self) -> bool {
        self.enable_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable_replay(&mut self, v: bool) {
        self.enable_replay = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_SetRTMPInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_permission = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.update_token = ::std::option::Option::Some(is.read_bool()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_delay = ::std::option::Option::Some(is.read_int32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.required_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_chat_permission = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_buffer = ::std::option::Option::Some(is.read_int32()?);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_rate_limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enable_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_permission {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.update_token {
            my_size += 2;
        }
        if let Some(v) = self.broadcast_delay {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.required_app_id {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.broadcast_chat_permission {
            my_size += ::protobuf::rt::enum_or_unknown_size(6, v);
        }
        if let Some(v) = self.broadcast_buffer {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.chat_rate_limit {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.enable_replay {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_permission {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.update_token {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.broadcast_delay {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.required_app_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.broadcast_chat_permission {
            os.write_enum(6, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.broadcast_buffer {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(8, v)?;
        }
        if let Some(v) = self.chat_rate_limit {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.enable_replay {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SetRTMPInfo_Request {
        CBroadcast_SetRTMPInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_permission",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.broadcast_permission },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.broadcast_permission },
                CBroadcast_SetRTMPInfo_Request::get_broadcast_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "update_token",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.update_token },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.update_token },
                CBroadcast_SetRTMPInfo_Request::get_update_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_delay",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.broadcast_delay },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.broadcast_delay },
                CBroadcast_SetRTMPInfo_Request::get_broadcast_delay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "app_id",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.app_id },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.app_id },
                CBroadcast_SetRTMPInfo_Request::get_app_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "required_app_id",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.required_app_id },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.required_app_id },
                CBroadcast_SetRTMPInfo_Request::get_required_app_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EBroadcastChatPermission>(
                "broadcast_chat_permission",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.broadcast_chat_permission },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.broadcast_chat_permission },
                EBroadcastChatPermission::k_EBroadcastChatPermissionPublic,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_buffer",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.broadcast_buffer },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.broadcast_buffer },
                CBroadcast_SetRTMPInfo_Request::get_broadcast_buffer,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.steamid },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.steamid },
                CBroadcast_SetRTMPInfo_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "chat_rate_limit",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.chat_rate_limit },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.chat_rate_limit },
                CBroadcast_SetRTMPInfo_Request::get_chat_rate_limit,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "enable_replay",
                |m: &CBroadcast_SetRTMPInfo_Request| { &m.enable_replay },
                |m: &mut CBroadcast_SetRTMPInfo_Request| { &mut m.enable_replay },
                CBroadcast_SetRTMPInfo_Request::get_enable_replay,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SetRTMPInfo_Request>(
                "CBroadcast_SetRTMPInfo_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SetRTMPInfo_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SetRTMPInfo_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SetRTMPInfo_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SetRTMPInfo_Request {
    fn clear(&mut self) {
        self.broadcast_permission = ::std::option::Option::None;
        self.update_token = ::std::option::Option::None;
        self.broadcast_delay = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.required_app_id = ::std::option::Option::None;
        self.broadcast_chat_permission = ::std::option::Option::None;
        self.broadcast_buffer = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.chat_rate_limit = ::std::option::Option::None;
        self.enable_replay = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SetRTMPInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SetRTMPInfo_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SetRTMPInfo_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SetRTMPInfo_Response {
    fn default() -> &'a CBroadcast_SetRTMPInfo_Response {
        <CBroadcast_SetRTMPInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SetRTMPInfo_Response {
    pub fn new() -> CBroadcast_SetRTMPInfo_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_SetRTMPInfo_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SetRTMPInfo_Response {
        CBroadcast_SetRTMPInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SetRTMPInfo_Response>(
                "CBroadcast_SetRTMPInfo_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SetRTMPInfo_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SetRTMPInfo_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SetRTMPInfo_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SetRTMPInfo_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SetRTMPInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SetRTMPInfo_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetRTMPInfo_Request {
    // message fields
    ip: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetRTMPInfo_Request {
    fn default() -> &'a CBroadcast_GetRTMPInfo_Request {
        <CBroadcast_GetRTMPInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetRTMPInfo_Request {
    pub fn new() -> CBroadcast_GetRTMPInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 ip = 1;

    pub fn get_ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetRTMPInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.ip {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetRTMPInfo_Request {
        CBroadcast_GetRTMPInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "ip",
                |m: &CBroadcast_GetRTMPInfo_Request| { &m.ip },
                |m: &mut CBroadcast_GetRTMPInfo_Request| { &mut m.ip },
                CBroadcast_GetRTMPInfo_Request::get_ip,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetRTMPInfo_Request| { &m.steamid },
                |m: &mut CBroadcast_GetRTMPInfo_Request| { &mut m.steamid },
                CBroadcast_GetRTMPInfo_Request::get_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetRTMPInfo_Request>(
                "CBroadcast_GetRTMPInfo_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetRTMPInfo_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetRTMPInfo_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetRTMPInfo_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetRTMPInfo_Request {
    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetRTMPInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetRTMPInfo_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetRTMPInfo_Response {
    // message fields
    broadcast_permission: ::std::option::Option<i32>,
    rtmp_host: ::protobuf::SingularField<::std::string::String>,
    rtmp_token: ::protobuf::SingularField<::std::string::String>,
    broadcast_delay: ::std::option::Option<i32>,
    app_id: ::std::option::Option<u32>,
    required_app_id: ::std::option::Option<u32>,
    broadcast_chat_permission: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<EBroadcastChatPermission>>,
    broadcast_buffer: ::std::option::Option<i32>,
    steamid: ::std::option::Option<u64>,
    chat_rate_limit: ::std::option::Option<u32>,
    enable_replay: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetRTMPInfo_Response {
    fn default() -> &'a CBroadcast_GetRTMPInfo_Response {
        <CBroadcast_GetRTMPInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetRTMPInfo_Response {
    pub fn new() -> CBroadcast_GetRTMPInfo_Response {
        ::std::default::Default::default()
    }

    // optional int32 broadcast_permission = 1;

    pub fn get_broadcast_permission(&self) -> i32 {
        self.broadcast_permission.unwrap_or(0)
    }

    pub fn clear_broadcast_permission(&mut self) {
        self.broadcast_permission = ::std::option::Option::None;
    }

    pub fn has_broadcast_permission(&self) -> bool {
        self.broadcast_permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_permission(&mut self, v: i32) {
        self.broadcast_permission = ::std::option::Option::Some(v);
    }

    // optional string rtmp_host = 2;

    pub fn get_rtmp_host(&self) -> &str {
        match self.rtmp_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rtmp_host(&mut self) {
        self.rtmp_host.clear();
    }

    pub fn has_rtmp_host(&self) -> bool {
        self.rtmp_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtmp_host(&mut self, v: ::std::string::String) {
        self.rtmp_host = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rtmp_host(&mut self) -> &mut ::std::string::String {
        if self.rtmp_host.is_none() {
            self.rtmp_host.set_default();
        }
        self.rtmp_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_rtmp_host(&mut self) -> ::std::string::String {
        self.rtmp_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string rtmp_token = 3;

    pub fn get_rtmp_token(&self) -> &str {
        match self.rtmp_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rtmp_token(&mut self) {
        self.rtmp_token.clear();
    }

    pub fn has_rtmp_token(&self) -> bool {
        self.rtmp_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtmp_token(&mut self, v: ::std::string::String) {
        self.rtmp_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rtmp_token(&mut self) -> &mut ::std::string::String {
        if self.rtmp_token.is_none() {
            self.rtmp_token.set_default();
        }
        self.rtmp_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_rtmp_token(&mut self) -> ::std::string::String {
        self.rtmp_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 broadcast_delay = 4;

    pub fn get_broadcast_delay(&self) -> i32 {
        self.broadcast_delay.unwrap_or(0)
    }

    pub fn clear_broadcast_delay(&mut self) {
        self.broadcast_delay = ::std::option::Option::None;
    }

    pub fn has_broadcast_delay(&self) -> bool {
        self.broadcast_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_delay(&mut self, v: i32) {
        self.broadcast_delay = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 5;

    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 required_app_id = 6;

    pub fn get_required_app_id(&self) -> u32 {
        self.required_app_id.unwrap_or(0)
    }

    pub fn clear_required_app_id(&mut self) {
        self.required_app_id = ::std::option::Option::None;
    }

    pub fn has_required_app_id(&self) -> bool {
        self.required_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_app_id(&mut self, v: u32) {
        self.required_app_id = ::std::option::Option::Some(v);
    }

    // optional .EBroadcastChatPermission broadcast_chat_permission = 7;

    pub fn get_broadcast_chat_permission(&self) -> EBroadcastChatPermission {
        match self.broadcast_chat_permission {
            Some(e) => e.enum_value_or(EBroadcastChatPermission::k_EBroadcastChatPermissionPublic),
            None => EBroadcastChatPermission::k_EBroadcastChatPermissionPublic,
        }
    }

    pub fn clear_broadcast_chat_permission(&mut self) {
        self.broadcast_chat_permission = ::std::option::Option::None;
    }

    pub fn has_broadcast_chat_permission(&self) -> bool {
        self.broadcast_chat_permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_chat_permission(&mut self, v: EBroadcastChatPermission) {
        self.broadcast_chat_permission = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }

    // optional int32 broadcast_buffer = 8;

    pub fn get_broadcast_buffer(&self) -> i32 {
        self.broadcast_buffer.unwrap_or(0)
    }

    pub fn clear_broadcast_buffer(&mut self) {
        self.broadcast_buffer = ::std::option::Option::None;
    }

    pub fn has_broadcast_buffer(&self) -> bool {
        self.broadcast_buffer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_buffer(&mut self, v: i32) {
        self.broadcast_buffer = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 9;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 chat_rate_limit = 10;

    pub fn get_chat_rate_limit(&self) -> u32 {
        self.chat_rate_limit.unwrap_or(0)
    }

    pub fn clear_chat_rate_limit(&mut self) {
        self.chat_rate_limit = ::std::option::Option::None;
    }

    pub fn has_chat_rate_limit(&self) -> bool {
        self.chat_rate_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_rate_limit(&mut self, v: u32) {
        self.chat_rate_limit = ::std::option::Option::Some(v);
    }

    // optional bool enable_replay = 11;

    pub fn get_enable_replay(&self) -> bool {
        self.enable_replay.unwrap_or(false)
    }

    pub fn clear_enable_replay(&mut self) {
        self.enable_replay = ::std::option::Option::None;
    }

    pub fn has_enable_replay(&self) -> bool {
        self.enable_replay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable_replay(&mut self, v: bool) {
        self.enable_replay = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetRTMPInfo_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_permission = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rtmp_host)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rtmp_token)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_delay = ::std::option::Option::Some(is.read_int32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.required_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_chat_permission = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_buffer = ::std::option::Option::Some(is.read_int32()?);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chat_rate_limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enable_replay = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_permission {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.rtmp_host.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.rtmp_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.broadcast_delay {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.required_app_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.broadcast_chat_permission {
            my_size += ::protobuf::rt::enum_or_unknown_size(7, v);
        }
        if let Some(v) = self.broadcast_buffer {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.chat_rate_limit {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.enable_replay {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_permission {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.rtmp_host.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.rtmp_token.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.broadcast_delay {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.required_app_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.broadcast_chat_permission {
            os.write_enum(7, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.broadcast_buffer {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(9, v)?;
        }
        if let Some(v) = self.chat_rate_limit {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.enable_replay {
            os.write_bool(11, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetRTMPInfo_Response {
        CBroadcast_GetRTMPInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_permission",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.broadcast_permission },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.broadcast_permission },
                CBroadcast_GetRTMPInfo_Response::get_broadcast_permission,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "rtmp_host",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.rtmp_host },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.rtmp_host },
                CBroadcast_GetRTMPInfo_Response::get_rtmp_host,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "rtmp_token",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.rtmp_token },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.rtmp_token },
                CBroadcast_GetRTMPInfo_Response::get_rtmp_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_delay",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.broadcast_delay },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.broadcast_delay },
                CBroadcast_GetRTMPInfo_Response::get_broadcast_delay,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "app_id",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.app_id },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.app_id },
                CBroadcast_GetRTMPInfo_Response::get_app_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "required_app_id",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.required_app_id },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.required_app_id },
                CBroadcast_GetRTMPInfo_Response::get_required_app_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, EBroadcastChatPermission>(
                "broadcast_chat_permission",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.broadcast_chat_permission },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.broadcast_chat_permission },
                EBroadcastChatPermission::k_EBroadcastChatPermissionPublic,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "broadcast_buffer",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.broadcast_buffer },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.broadcast_buffer },
                CBroadcast_GetRTMPInfo_Response::get_broadcast_buffer,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.steamid },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.steamid },
                CBroadcast_GetRTMPInfo_Response::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "chat_rate_limit",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.chat_rate_limit },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.chat_rate_limit },
                CBroadcast_GetRTMPInfo_Response::get_chat_rate_limit,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "enable_replay",
                |m: &CBroadcast_GetRTMPInfo_Response| { &m.enable_replay },
                |m: &mut CBroadcast_GetRTMPInfo_Response| { &mut m.enable_replay },
                CBroadcast_GetRTMPInfo_Response::get_enable_replay,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetRTMPInfo_Response>(
                "CBroadcast_GetRTMPInfo_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetRTMPInfo_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetRTMPInfo_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetRTMPInfo_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetRTMPInfo_Response {
    fn clear(&mut self) {
        self.broadcast_permission = ::std::option::Option::None;
        self.rtmp_host.clear();
        self.rtmp_token.clear();
        self.broadcast_delay = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.required_app_id = ::std::option::Option::None;
        self.broadcast_chat_permission = ::std::option::Option::None;
        self.broadcast_buffer = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.chat_rate_limit = ::std::option::Option::None;
        self.enable_replay = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetRTMPInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetRTMPInfo_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCHaveTURNServer_Notification {
    // message fields
    broadcast_session_id: ::std::option::Option<u64>,
    turn_server: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCHaveTURNServer_Notification {
    fn default() -> &'a CBroadcast_WebRTCHaveTURNServer_Notification {
        <CBroadcast_WebRTCHaveTURNServer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCHaveTURNServer_Notification {
    pub fn new() -> CBroadcast_WebRTCHaveTURNServer_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_session_id = 1;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional string turn_server = 2;

    pub fn get_turn_server(&self) -> &str {
        match self.turn_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_turn_server(&mut self) {
        self.turn_server.clear();
    }

    pub fn has_turn_server(&self) -> bool {
        self.turn_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_turn_server(&mut self, v: ::std::string::String) {
        self.turn_server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_turn_server(&mut self) -> &mut ::std::string::String {
        if self.turn_server.is_none() {
            self.turn_server.set_default();
        }
        self.turn_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_turn_server(&mut self) -> ::std::string::String {
        self.turn_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCHaveTURNServer_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.turn_server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.turn_server.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.turn_server.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCHaveTURNServer_Notification {
        CBroadcast_WebRTCHaveTURNServer_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_WebRTCHaveTURNServer_Notification| { &m.broadcast_session_id },
                |m: &mut CBroadcast_WebRTCHaveTURNServer_Notification| { &mut m.broadcast_session_id },
                CBroadcast_WebRTCHaveTURNServer_Notification::get_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "turn_server",
                |m: &CBroadcast_WebRTCHaveTURNServer_Notification| { &m.turn_server },
                |m: &mut CBroadcast_WebRTCHaveTURNServer_Notification| { &mut m.turn_server },
                CBroadcast_WebRTCHaveTURNServer_Notification::get_turn_server,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCHaveTURNServer_Notification>(
                "CBroadcast_WebRTCHaveTURNServer_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCHaveTURNServer_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCHaveTURNServer_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCHaveTURNServer_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCHaveTURNServer_Notification {
    fn clear(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
        self.turn_server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCHaveTURNServer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCHaveTURNServer_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCStartResult_Request {
    // message fields
    webrtc_session_id: ::std::option::Option<u64>,
    started: ::std::option::Option<bool>,
    offer: ::protobuf::SingularField<::std::string::String>,
    resolution_x: ::std::option::Option<u32>,
    resolution_y: ::std::option::Option<u32>,
    fps: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCStartResult_Request {
    fn default() -> &'a CBroadcast_WebRTCStartResult_Request {
        <CBroadcast_WebRTCStartResult_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCStartResult_Request {
    pub fn new() -> CBroadcast_WebRTCStartResult_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 webrtc_session_id = 1;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional bool started = 2;

    pub fn get_started(&self) -> bool {
        self.started.unwrap_or(false)
    }

    pub fn clear_started(&mut self) {
        self.started = ::std::option::Option::None;
    }

    pub fn has_started(&self) -> bool {
        self.started.is_some()
    }

    // Param is passed by value, moved
    pub fn set_started(&mut self, v: bool) {
        self.started = ::std::option::Option::Some(v);
    }

    // optional string offer = 3;

    pub fn get_offer(&self) -> &str {
        match self.offer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_offer(&mut self) {
        self.offer.clear();
    }

    pub fn has_offer(&self) -> bool {
        self.offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offer(&mut self, v: ::std::string::String) {
        self.offer = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_offer(&mut self) -> &mut ::std::string::String {
        if self.offer.is_none() {
            self.offer.set_default();
        }
        self.offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_offer(&mut self) -> ::std::string::String {
        self.offer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 resolution_x = 4;

    pub fn get_resolution_x(&self) -> u32 {
        self.resolution_x.unwrap_or(0)
    }

    pub fn clear_resolution_x(&mut self) {
        self.resolution_x = ::std::option::Option::None;
    }

    pub fn has_resolution_x(&self) -> bool {
        self.resolution_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resolution_x(&mut self, v: u32) {
        self.resolution_x = ::std::option::Option::Some(v);
    }

    // optional uint32 resolution_y = 5;

    pub fn get_resolution_y(&self) -> u32 {
        self.resolution_y.unwrap_or(0)
    }

    pub fn clear_resolution_y(&mut self) {
        self.resolution_y = ::std::option::Option::None;
    }

    pub fn has_resolution_y(&self) -> bool {
        self.resolution_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resolution_y(&mut self, v: u32) {
        self.resolution_y = ::std::option::Option::Some(v);
    }

    // optional uint32 fps = 6;

    pub fn get_fps(&self) -> u32 {
        self.fps.unwrap_or(0)
    }

    pub fn clear_fps(&mut self) {
        self.fps = ::std::option::Option::None;
    }

    pub fn has_fps(&self) -> bool {
        self.fps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fps(&mut self, v: u32) {
        self.fps = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCStartResult_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.started = ::std::option::Option::Some(is.read_bool()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.offer)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resolution_x = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resolution_y = ::std::option::Option::Some(is.read_uint32()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fps = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.started {
            my_size += 2;
        }
        if let Some(v) = self.offer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.resolution_x {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.resolution_y {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.fps {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.started {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.offer.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.resolution_x {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.resolution_y {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.fps {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCStartResult_Request {
        CBroadcast_WebRTCStartResult_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCStartResult_Request::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "started",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.started },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.started },
                CBroadcast_WebRTCStartResult_Request::get_started,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "offer",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.offer },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.offer },
                CBroadcast_WebRTCStartResult_Request::get_offer,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "resolution_x",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.resolution_x },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.resolution_x },
                CBroadcast_WebRTCStartResult_Request::get_resolution_x,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "resolution_y",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.resolution_y },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.resolution_y },
                CBroadcast_WebRTCStartResult_Request::get_resolution_y,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "fps",
                |m: &CBroadcast_WebRTCStartResult_Request| { &m.fps },
                |m: &mut CBroadcast_WebRTCStartResult_Request| { &mut m.fps },
                CBroadcast_WebRTCStartResult_Request::get_fps,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCStartResult_Request>(
                "CBroadcast_WebRTCStartResult_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCStartResult_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCStartResult_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCStartResult_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCStartResult_Request {
    fn clear(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
        self.started = ::std::option::Option::None;
        self.offer.clear();
        self.resolution_x = ::std::option::Option::None;
        self.resolution_y = ::std::option::Option::None;
        self.fps = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCStartResult_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCStartResult_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCStartResult_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCStartResult_Response {
    fn default() -> &'a CBroadcast_WebRTCStartResult_Response {
        <CBroadcast_WebRTCStartResult_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCStartResult_Response {
    pub fn new() -> CBroadcast_WebRTCStartResult_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCStartResult_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCStartResult_Response {
        CBroadcast_WebRTCStartResult_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCStartResult_Response>(
                "CBroadcast_WebRTCStartResult_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCStartResult_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCStartResult_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCStartResult_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCStartResult_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCStartResult_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCStartResult_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCStopped_Request {
    // message fields
    webrtc_session_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCStopped_Request {
    fn default() -> &'a CBroadcast_WebRTCStopped_Request {
        <CBroadcast_WebRTCStopped_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCStopped_Request {
    pub fn new() -> CBroadcast_WebRTCStopped_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 webrtc_session_id = 1;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCStopped_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCStopped_Request {
        CBroadcast_WebRTCStopped_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCStopped_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCStopped_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCStopped_Request::get_webrtc_session_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCStopped_Request>(
                "CBroadcast_WebRTCStopped_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCStopped_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCStopped_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCStopped_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCStopped_Request {
    fn clear(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCStopped_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCStopped_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCStopped_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCStopped_Response {
    fn default() -> &'a CBroadcast_WebRTCStopped_Response {
        <CBroadcast_WebRTCStopped_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCStopped_Response {
    pub fn new() -> CBroadcast_WebRTCStopped_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCStopped_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCStopped_Response {
        CBroadcast_WebRTCStopped_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCStopped_Response>(
                "CBroadcast_WebRTCStopped_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCStopped_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCStopped_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCStopped_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCStopped_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCStopped_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCStopped_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCSetAnswer_Request {
    // message fields
    broadcaster_steamid: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    answer: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCSetAnswer_Request {
    fn default() -> &'a CBroadcast_WebRTCSetAnswer_Request {
        <CBroadcast_WebRTCSetAnswer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCSetAnswer_Request {
    pub fn new() -> CBroadcast_WebRTCSetAnswer_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcaster_steamid = 1;

    pub fn get_broadcaster_steamid(&self) -> u64 {
        self.broadcaster_steamid.unwrap_or(0)
    }

    pub fn clear_broadcaster_steamid(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
    }

    pub fn has_broadcaster_steamid(&self) -> bool {
        self.broadcaster_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcaster_steamid(&mut self, v: u64) {
        self.broadcaster_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional string answer = 3;

    pub fn get_answer(&self) -> &str {
        match self.answer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_answer(&mut self) {
        self.answer.clear();
    }

    pub fn has_answer(&self) -> bool {
        self.answer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_answer(&mut self, v: ::std::string::String) {
        self.answer = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer(&mut self) -> &mut ::std::string::String {
        if self.answer.is_none() {
            self.answer.set_default();
        }
        self.answer.as_mut().unwrap()
    }

    // Take field
    pub fn take_answer(&mut self) -> ::std::string::String {
        self.answer.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCSetAnswer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcaster_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.answer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcaster_steamid {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.answer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcaster_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.answer.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCSetAnswer_Request {
        CBroadcast_WebRTCSetAnswer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcaster_steamid",
                |m: &CBroadcast_WebRTCSetAnswer_Request| { &m.broadcaster_steamid },
                |m: &mut CBroadcast_WebRTCSetAnswer_Request| { &mut m.broadcaster_steamid },
                CBroadcast_WebRTCSetAnswer_Request::get_broadcaster_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCSetAnswer_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCSetAnswer_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCSetAnswer_Request::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "answer",
                |m: &CBroadcast_WebRTCSetAnswer_Request| { &m.answer },
                |m: &mut CBroadcast_WebRTCSetAnswer_Request| { &mut m.answer },
                CBroadcast_WebRTCSetAnswer_Request::get_answer,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCSetAnswer_Request>(
                "CBroadcast_WebRTCSetAnswer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCSetAnswer_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCSetAnswer_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCSetAnswer_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCSetAnswer_Request {
    fn clear(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.answer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCSetAnswer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCSetAnswer_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCSetAnswer_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCSetAnswer_Response {
    fn default() -> &'a CBroadcast_WebRTCSetAnswer_Response {
        <CBroadcast_WebRTCSetAnswer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCSetAnswer_Response {
    pub fn new() -> CBroadcast_WebRTCSetAnswer_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCSetAnswer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCSetAnswer_Response {
        CBroadcast_WebRTCSetAnswer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCSetAnswer_Response>(
                "CBroadcast_WebRTCSetAnswer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCSetAnswer_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCSetAnswer_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCSetAnswer_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCSetAnswer_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCSetAnswer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCSetAnswer_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCLookupTURNServer_Request {
    // message fields
    cellid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCLookupTURNServer_Request {
    fn default() -> &'a CBroadcast_WebRTCLookupTURNServer_Request {
        <CBroadcast_WebRTCLookupTURNServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCLookupTURNServer_Request {
    pub fn new() -> CBroadcast_WebRTCLookupTURNServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn get_cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCLookupTURNServer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCLookupTURNServer_Request {
        CBroadcast_WebRTCLookupTURNServer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "cellid",
                |m: &CBroadcast_WebRTCLookupTURNServer_Request| { &m.cellid },
                |m: &mut CBroadcast_WebRTCLookupTURNServer_Request| { &mut m.cellid },
                CBroadcast_WebRTCLookupTURNServer_Request::get_cellid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCLookupTURNServer_Request>(
                "CBroadcast_WebRTCLookupTURNServer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCLookupTURNServer_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCLookupTURNServer_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCLookupTURNServer_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCLookupTURNServer_Request {
    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCLookupTURNServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCLookupTURNServer_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCLookupTURNServer_Response {
    // message fields
    turn_server: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCLookupTURNServer_Response {
    fn default() -> &'a CBroadcast_WebRTCLookupTURNServer_Response {
        <CBroadcast_WebRTCLookupTURNServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCLookupTURNServer_Response {
    pub fn new() -> CBroadcast_WebRTCLookupTURNServer_Response {
        ::std::default::Default::default()
    }

    // optional string turn_server = 1;

    pub fn get_turn_server(&self) -> &str {
        match self.turn_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_turn_server(&mut self) {
        self.turn_server.clear();
    }

    pub fn has_turn_server(&self) -> bool {
        self.turn_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_turn_server(&mut self, v: ::std::string::String) {
        self.turn_server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_turn_server(&mut self) -> &mut ::std::string::String {
        if self.turn_server.is_none() {
            self.turn_server.set_default();
        }
        self.turn_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_turn_server(&mut self) -> ::std::string::String {
        self.turn_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCLookupTURNServer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.turn_server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.turn_server.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.turn_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCLookupTURNServer_Response {
        CBroadcast_WebRTCLookupTURNServer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "turn_server",
                |m: &CBroadcast_WebRTCLookupTURNServer_Response| { &m.turn_server },
                |m: &mut CBroadcast_WebRTCLookupTURNServer_Response| { &mut m.turn_server },
                CBroadcast_WebRTCLookupTURNServer_Response::get_turn_server,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCLookupTURNServer_Response>(
                "CBroadcast_WebRTCLookupTURNServer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCLookupTURNServer_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCLookupTURNServer_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCLookupTURNServer_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCLookupTURNServer_Response {
    fn clear(&mut self) {
        self.turn_server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCLookupTURNServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCLookupTURNServer_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTC_Candidate {
    // message fields
    sdp_mid: ::protobuf::SingularField<::std::string::String>,
    sdp_mline_index: ::std::option::Option<i32>,
    candidate: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTC_Candidate {
    fn default() -> &'a CBroadcast_WebRTC_Candidate {
        <CBroadcast_WebRTC_Candidate as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTC_Candidate {
    pub fn new() -> CBroadcast_WebRTC_Candidate {
        ::std::default::Default::default()
    }

    // optional string sdp_mid = 1;

    pub fn get_sdp_mid(&self) -> &str {
        match self.sdp_mid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sdp_mid(&mut self) {
        self.sdp_mid.clear();
    }

    pub fn has_sdp_mid(&self) -> bool {
        self.sdp_mid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sdp_mid(&mut self, v: ::std::string::String) {
        self.sdp_mid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sdp_mid(&mut self) -> &mut ::std::string::String {
        if self.sdp_mid.is_none() {
            self.sdp_mid.set_default();
        }
        self.sdp_mid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sdp_mid(&mut self) -> ::std::string::String {
        self.sdp_mid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 sdp_mline_index = 2;

    pub fn get_sdp_mline_index(&self) -> i32 {
        self.sdp_mline_index.unwrap_or(0)
    }

    pub fn clear_sdp_mline_index(&mut self) {
        self.sdp_mline_index = ::std::option::Option::None;
    }

    pub fn has_sdp_mline_index(&self) -> bool {
        self.sdp_mline_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sdp_mline_index(&mut self, v: i32) {
        self.sdp_mline_index = ::std::option::Option::Some(v);
    }

    // optional string candidate = 3;

    pub fn get_candidate(&self) -> &str {
        match self.candidate.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_candidate(&mut self) {
        self.candidate.clear();
    }

    pub fn has_candidate(&self) -> bool {
        self.candidate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candidate(&mut self, v: ::std::string::String) {
        self.candidate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_candidate(&mut self) -> &mut ::std::string::String {
        if self.candidate.is_none() {
            self.candidate.set_default();
        }
        self.candidate.as_mut().unwrap()
    }

    // Take field
    pub fn take_candidate(&mut self) -> ::std::string::String {
        self.candidate.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_WebRTC_Candidate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sdp_mid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sdp_mline_index = ::std::option::Option::Some(is.read_int32()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.candidate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sdp_mid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.sdp_mline_index {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.candidate.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sdp_mid.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.sdp_mline_index {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.candidate.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTC_Candidate {
        CBroadcast_WebRTC_Candidate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "sdp_mid",
                |m: &CBroadcast_WebRTC_Candidate| { &m.sdp_mid },
                |m: &mut CBroadcast_WebRTC_Candidate| { &mut m.sdp_mid },
                CBroadcast_WebRTC_Candidate::get_sdp_mid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "sdp_mline_index",
                |m: &CBroadcast_WebRTC_Candidate| { &m.sdp_mline_index },
                |m: &mut CBroadcast_WebRTC_Candidate| { &mut m.sdp_mline_index },
                CBroadcast_WebRTC_Candidate::get_sdp_mline_index,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "candidate",
                |m: &CBroadcast_WebRTC_Candidate| { &m.candidate },
                |m: &mut CBroadcast_WebRTC_Candidate| { &mut m.candidate },
                CBroadcast_WebRTC_Candidate::get_candidate,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTC_Candidate>(
                "CBroadcast_WebRTC_Candidate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTC_Candidate {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTC_Candidate> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTC_Candidate::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTC_Candidate {
    fn clear(&mut self) {
        self.sdp_mid.clear();
        self.sdp_mline_index = ::std::option::Option::None;
        self.candidate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTC_Candidate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTC_Candidate {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCAddHostCandidate_Request {
    // message fields
    webrtc_session_id: ::std::option::Option<u64>,
    pub candidate: ::protobuf::SingularPtrField<CBroadcast_WebRTC_Candidate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCAddHostCandidate_Request {
    fn default() -> &'a CBroadcast_WebRTCAddHostCandidate_Request {
        <CBroadcast_WebRTCAddHostCandidate_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCAddHostCandidate_Request {
    pub fn new() -> CBroadcast_WebRTCAddHostCandidate_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 webrtc_session_id = 1;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCAddHostCandidate_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.candidate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into::<CBroadcast_WebRTC_Candidate, _>(wire_type, is, &mut self.candidate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.candidate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.candidate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCAddHostCandidate_Request {
        CBroadcast_WebRTCAddHostCandidate_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCAddHostCandidate_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCAddHostCandidate_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCAddHostCandidate_Request::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CBroadcast_WebRTC_Candidate>, _>(
                "candidate",
                |m: &CBroadcast_WebRTCAddHostCandidate_Request| { &m.candidate },
                |m: &mut CBroadcast_WebRTCAddHostCandidate_Request| { &mut m.candidate },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCAddHostCandidate_Request>(
                "CBroadcast_WebRTCAddHostCandidate_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCAddHostCandidate_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCAddHostCandidate_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCAddHostCandidate_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCAddHostCandidate_Request {
    fn clear(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
        self.candidate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCAddHostCandidate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCAddHostCandidate_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCAddHostCandidate_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCAddHostCandidate_Response {
    fn default() -> &'a CBroadcast_WebRTCAddHostCandidate_Response {
        <CBroadcast_WebRTCAddHostCandidate_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCAddHostCandidate_Response {
    pub fn new() -> CBroadcast_WebRTCAddHostCandidate_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCAddHostCandidate_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCAddHostCandidate_Response {
        CBroadcast_WebRTCAddHostCandidate_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCAddHostCandidate_Response>(
                "CBroadcast_WebRTCAddHostCandidate_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCAddHostCandidate_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCAddHostCandidate_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCAddHostCandidate_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCAddHostCandidate_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCAddHostCandidate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCAddHostCandidate_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCAddViewerCandidate_Request {
    // message fields
    broadcaster_steamid: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    pub candidate: ::protobuf::SingularPtrField<CBroadcast_WebRTC_Candidate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCAddViewerCandidate_Request {
    fn default() -> &'a CBroadcast_WebRTCAddViewerCandidate_Request {
        <CBroadcast_WebRTCAddViewerCandidate_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCAddViewerCandidate_Request {
    pub fn new() -> CBroadcast_WebRTCAddViewerCandidate_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcaster_steamid = 1;

    pub fn get_broadcaster_steamid(&self) -> u64 {
        self.broadcaster_steamid.unwrap_or(0)
    }

    pub fn clear_broadcaster_steamid(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
    }

    pub fn has_broadcaster_steamid(&self) -> bool {
        self.broadcaster_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcaster_steamid(&mut self, v: u64) {
        self.broadcaster_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCAddViewerCandidate_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.candidate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcaster_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into::<CBroadcast_WebRTC_Candidate, _>(wire_type, is, &mut self.candidate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcaster_steamid {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.candidate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcaster_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.candidate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCAddViewerCandidate_Request {
        CBroadcast_WebRTCAddViewerCandidate_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcaster_steamid",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Request| { &m.broadcaster_steamid },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Request| { &mut m.broadcaster_steamid },
                CBroadcast_WebRTCAddViewerCandidate_Request::get_broadcaster_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCAddViewerCandidate_Request::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CBroadcast_WebRTC_Candidate>, _>(
                "candidate",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Request| { &m.candidate },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Request| { &mut m.candidate },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCAddViewerCandidate_Request>(
                "CBroadcast_WebRTCAddViewerCandidate_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCAddViewerCandidate_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCAddViewerCandidate_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCAddViewerCandidate_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCAddViewerCandidate_Request {
    fn clear(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.candidate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCAddViewerCandidate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCAddViewerCandidate_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCAddViewerCandidate_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCAddViewerCandidate_Response {
    fn default() -> &'a CBroadcast_WebRTCAddViewerCandidate_Response {
        <CBroadcast_WebRTCAddViewerCandidate_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCAddViewerCandidate_Response {
    pub fn new() -> CBroadcast_WebRTCAddViewerCandidate_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCAddViewerCandidate_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCAddViewerCandidate_Response {
        CBroadcast_WebRTCAddViewerCandidate_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCAddViewerCandidate_Response>(
                "CBroadcast_WebRTCAddViewerCandidate_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCAddViewerCandidate_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCAddViewerCandidate_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCAddViewerCandidate_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCAddViewerCandidate_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCAddViewerCandidate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCAddViewerCandidate_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCGetHostCandidates_Request {
    // message fields
    broadcaster_steamid: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    candidate_generation: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCGetHostCandidates_Request {
    fn default() -> &'a CBroadcast_WebRTCGetHostCandidates_Request {
        <CBroadcast_WebRTCGetHostCandidates_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCGetHostCandidates_Request {
    pub fn new() -> CBroadcast_WebRTCGetHostCandidates_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcaster_steamid = 1;

    pub fn get_broadcaster_steamid(&self) -> u64 {
        self.broadcaster_steamid.unwrap_or(0)
    }

    pub fn clear_broadcaster_steamid(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
    }

    pub fn has_broadcaster_steamid(&self) -> bool {
        self.broadcaster_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcaster_steamid(&mut self, v: u64) {
        self.broadcaster_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 candidate_generation = 3;

    pub fn get_candidate_generation(&self) -> u32 {
        self.candidate_generation.unwrap_or(0)
    }

    pub fn clear_candidate_generation(&mut self) {
        self.candidate_generation = ::std::option::Option::None;
    }

    pub fn has_candidate_generation(&self) -> bool {
        self.candidate_generation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candidate_generation(&mut self, v: u32) {
        self.candidate_generation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCGetHostCandidates_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcaster_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.candidate_generation = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcaster_steamid {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.candidate_generation {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcaster_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.candidate_generation {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCGetHostCandidates_Request {
        CBroadcast_WebRTCGetHostCandidates_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcaster_steamid",
                |m: &CBroadcast_WebRTCGetHostCandidates_Request| { &m.broadcaster_steamid },
                |m: &mut CBroadcast_WebRTCGetHostCandidates_Request| { &mut m.broadcaster_steamid },
                CBroadcast_WebRTCGetHostCandidates_Request::get_broadcaster_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCGetHostCandidates_Request| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCGetHostCandidates_Request| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCGetHostCandidates_Request::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "candidate_generation",
                |m: &CBroadcast_WebRTCGetHostCandidates_Request| { &m.candidate_generation },
                |m: &mut CBroadcast_WebRTCGetHostCandidates_Request| { &mut m.candidate_generation },
                CBroadcast_WebRTCGetHostCandidates_Request::get_candidate_generation,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCGetHostCandidates_Request>(
                "CBroadcast_WebRTCGetHostCandidates_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCGetHostCandidates_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCGetHostCandidates_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCGetHostCandidates_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCGetHostCandidates_Request {
    fn clear(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.candidate_generation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCGetHostCandidates_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCGetHostCandidates_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCGetHostCandidates_Response {
    // message fields
    candidate_generation: ::std::option::Option<u32>,
    pub candidates: ::protobuf::RepeatedField<CBroadcast_WebRTC_Candidate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCGetHostCandidates_Response {
    fn default() -> &'a CBroadcast_WebRTCGetHostCandidates_Response {
        <CBroadcast_WebRTCGetHostCandidates_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCGetHostCandidates_Response {
    pub fn new() -> CBroadcast_WebRTCGetHostCandidates_Response {
        ::std::default::Default::default()
    }

    // optional uint32 candidate_generation = 1;

    pub fn get_candidate_generation(&self) -> u32 {
        self.candidate_generation.unwrap_or(0)
    }

    pub fn clear_candidate_generation(&mut self) {
        self.candidate_generation = ::std::option::Option::None;
    }

    pub fn has_candidate_generation(&self) -> bool {
        self.candidate_generation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candidate_generation(&mut self, v: u32) {
        self.candidate_generation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCGetHostCandidates_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.candidates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.candidate_generation = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.candidates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.candidate_generation {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.candidates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.candidate_generation {
            os.write_uint32(1, v)?;
        }
        for v in &self.candidates {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCGetHostCandidates_Response {
        CBroadcast_WebRTCGetHostCandidates_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "candidate_generation",
                |m: &CBroadcast_WebRTCGetHostCandidates_Response| { &m.candidate_generation },
                |m: &mut CBroadcast_WebRTCGetHostCandidates_Response| { &mut m.candidate_generation },
                CBroadcast_WebRTCGetHostCandidates_Response::get_candidate_generation,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CBroadcast_WebRTC_Candidate>>(
                "candidates",
                |m: &CBroadcast_WebRTCGetHostCandidates_Response| { &m.candidates },
                |m: &mut CBroadcast_WebRTCGetHostCandidates_Response| { &mut m.candidates },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCGetHostCandidates_Response>(
                "CBroadcast_WebRTCGetHostCandidates_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCGetHostCandidates_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCGetHostCandidates_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCGetHostCandidates_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCGetHostCandidates_Response {
    fn clear(&mut self) {
        self.candidate_generation = ::std::option::Option::None;
        self.candidates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCGetHostCandidates_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCGetHostCandidates_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastUploadStats_Request {
    // message fields
    row_limit: ::std::option::Option<u32>,
    start_time: ::std::option::Option<u32>,
    upload_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    session_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastUploadStats_Request {
    fn default() -> &'a CBroadcast_GetBroadcastUploadStats_Request {
        <CBroadcast_GetBroadcastUploadStats_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastUploadStats_Request {
    pub fn new() -> CBroadcast_GetBroadcastUploadStats_Request {
        ::std::default::Default::default()
    }

    // optional uint32 row_limit = 1;

    pub fn get_row_limit(&self) -> u32 {
        self.row_limit.unwrap_or(100u32)
    }

    pub fn clear_row_limit(&mut self) {
        self.row_limit = ::std::option::Option::None;
    }

    pub fn has_row_limit(&self) -> bool {
        self.row_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_limit(&mut self, v: u32) {
        self.row_limit = ::std::option::Option::Some(v);
    }

    // optional uint32 start_time = 2;

    pub fn get_start_time(&self) -> u32 {
        self.start_time.unwrap_or(0u32)
    }

    pub fn clear_start_time(&mut self) {
        self.start_time = ::std::option::Option::None;
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u32) {
        self.start_time = ::std::option::Option::Some(v);
    }

    // optional uint64 upload_id = 3;

    pub fn get_upload_id(&self) -> u64 {
        self.upload_id.unwrap_or(0)
    }

    pub fn clear_upload_id(&mut self) {
        self.upload_id = ::std::option::Option::None;
    }

    pub fn has_upload_id(&self) -> bool {
        self.upload_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_id(&mut self, v: u64) {
        self.upload_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 4;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 session_id = 5;

    pub fn get_session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastUploadStats_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.row_limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upload_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.row_limit {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.start_time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.upload_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.session_id {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.row_limit {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.start_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.upload_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.session_id {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastUploadStats_Request {
        CBroadcast_GetBroadcastUploadStats_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "row_limit",
                |m: &CBroadcast_GetBroadcastUploadStats_Request| { &m.row_limit },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Request| { &mut m.row_limit },
                CBroadcast_GetBroadcastUploadStats_Request::get_row_limit,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "start_time",
                |m: &CBroadcast_GetBroadcastUploadStats_Request| { &m.start_time },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Request| { &mut m.start_time },
                CBroadcast_GetBroadcastUploadStats_Request::get_start_time,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "upload_id",
                |m: &CBroadcast_GetBroadcastUploadStats_Request| { &m.upload_id },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Request| { &mut m.upload_id },
                CBroadcast_GetBroadcastUploadStats_Request::get_upload_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetBroadcastUploadStats_Request| { &m.steamid },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Request| { &mut m.steamid },
                CBroadcast_GetBroadcastUploadStats_Request::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "session_id",
                |m: &CBroadcast_GetBroadcastUploadStats_Request| { &m.session_id },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Request| { &mut m.session_id },
                CBroadcast_GetBroadcastUploadStats_Request::get_session_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastUploadStats_Request>(
                "CBroadcast_GetBroadcastUploadStats_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastUploadStats_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastUploadStats_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastUploadStats_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastUploadStats_Request {
    fn clear(&mut self) {
        self.row_limit = ::std::option::Option::None;
        self.start_time = ::std::option::Option::None;
        self.upload_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.session_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastUploadStats_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastUploadStats_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastUploadStats_Response {
    // message fields
    pub upload_stats: ::protobuf::RepeatedField<cbroadcast_get_broadcast_upload_stats_response::UploadStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastUploadStats_Response {
    fn default() -> &'a CBroadcast_GetBroadcastUploadStats_Response {
        <CBroadcast_GetBroadcastUploadStats_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastUploadStats_Response {
    pub fn new() -> CBroadcast_GetBroadcastUploadStats_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastUploadStats_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.upload_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.upload_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.upload_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.upload_stats {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastUploadStats_Response {
        CBroadcast_GetBroadcastUploadStats_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cbroadcast_get_broadcast_upload_stats_response::UploadStats>>(
                "upload_stats",
                |m: &CBroadcast_GetBroadcastUploadStats_Response| { &m.upload_stats },
                |m: &mut CBroadcast_GetBroadcastUploadStats_Response| { &mut m.upload_stats },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastUploadStats_Response>(
                "CBroadcast_GetBroadcastUploadStats_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastUploadStats_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastUploadStats_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastUploadStats_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastUploadStats_Response {
    fn clear(&mut self) {
        self.upload_stats.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastUploadStats_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastUploadStats_Response {
}

/// Nested message and enums of message `CBroadcast_GetBroadcastUploadStats_Response`
pub mod cbroadcast_get_broadcast_upload_stats_response {
    #[derive(PartialEq,Clone,Default)]
    pub struct UploadStats {
        // message fields
        upload_result: ::std::option::Option<u32>,
        time_stopped: ::std::option::Option<u32>,
        seconds_uploaded: ::std::option::Option<u32>,
        max_viewers: ::std::option::Option<u32>,
        resolution_x: ::std::option::Option<u32>,
        resolution_y: ::std::option::Option<u32>,
        avg_bandwidth: ::std::option::Option<u32>,
        total_bytes: ::std::option::Option<u64>,
        app_id: ::std::option::Option<u32>,
        total_unique_viewers: ::std::option::Option<u32>,
        total_seconds_watched: ::std::option::Option<u64>,
        time_started: ::std::option::Option<u32>,
        upload_id: ::std::option::Option<u64>,
        local_address: ::protobuf::SingularField<::std::string::String>,
        remote_address: ::protobuf::SingularField<::std::string::String>,
        frames_per_second: ::std::option::Option<u32>,
        num_representations: ::std::option::Option<u32>,
        app_name: ::protobuf::SingularField<::std::string::String>,
        is_replay: ::std::option::Option<bool>,
        session_id: ::std::option::Option<u64>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a UploadStats {
        fn default() -> &'a UploadStats {
            <UploadStats as ::protobuf::Message>::default_instance()
        }
    }

    impl UploadStats {
        pub fn new() -> UploadStats {
            ::std::default::Default::default()
        }

        // optional uint32 upload_result = 1;

        pub fn get_upload_result(&self) -> u32 {
            self.upload_result.unwrap_or(0)
        }

        pub fn clear_upload_result(&mut self) {
            self.upload_result = ::std::option::Option::None;
        }

        pub fn has_upload_result(&self) -> bool {
            self.upload_result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_upload_result(&mut self, v: u32) {
            self.upload_result = ::std::option::Option::Some(v);
        }

        // optional uint32 time_stopped = 2;

        pub fn get_time_stopped(&self) -> u32 {
            self.time_stopped.unwrap_or(0)
        }

        pub fn clear_time_stopped(&mut self) {
            self.time_stopped = ::std::option::Option::None;
        }

        pub fn has_time_stopped(&self) -> bool {
            self.time_stopped.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_stopped(&mut self, v: u32) {
            self.time_stopped = ::std::option::Option::Some(v);
        }

        // optional uint32 seconds_uploaded = 3;

        pub fn get_seconds_uploaded(&self) -> u32 {
            self.seconds_uploaded.unwrap_or(0)
        }

        pub fn clear_seconds_uploaded(&mut self) {
            self.seconds_uploaded = ::std::option::Option::None;
        }

        pub fn has_seconds_uploaded(&self) -> bool {
            self.seconds_uploaded.is_some()
        }

        // Param is passed by value, moved
        pub fn set_seconds_uploaded(&mut self, v: u32) {
            self.seconds_uploaded = ::std::option::Option::Some(v);
        }

        // optional uint32 max_viewers = 4;

        pub fn get_max_viewers(&self) -> u32 {
            self.max_viewers.unwrap_or(0)
        }

        pub fn clear_max_viewers(&mut self) {
            self.max_viewers = ::std::option::Option::None;
        }

        pub fn has_max_viewers(&self) -> bool {
            self.max_viewers.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_viewers(&mut self, v: u32) {
            self.max_viewers = ::std::option::Option::Some(v);
        }

        // optional uint32 resolution_x = 5;

        pub fn get_resolution_x(&self) -> u32 {
            self.resolution_x.unwrap_or(0)
        }

        pub fn clear_resolution_x(&mut self) {
            self.resolution_x = ::std::option::Option::None;
        }

        pub fn has_resolution_x(&self) -> bool {
            self.resolution_x.is_some()
        }

        // Param is passed by value, moved
        pub fn set_resolution_x(&mut self, v: u32) {
            self.resolution_x = ::std::option::Option::Some(v);
        }

        // optional uint32 resolution_y = 6;

        pub fn get_resolution_y(&self) -> u32 {
            self.resolution_y.unwrap_or(0)
        }

        pub fn clear_resolution_y(&mut self) {
            self.resolution_y = ::std::option::Option::None;
        }

        pub fn has_resolution_y(&self) -> bool {
            self.resolution_y.is_some()
        }

        // Param is passed by value, moved
        pub fn set_resolution_y(&mut self, v: u32) {
            self.resolution_y = ::std::option::Option::Some(v);
        }

        // optional uint32 avg_bandwidth = 7;

        pub fn get_avg_bandwidth(&self) -> u32 {
            self.avg_bandwidth.unwrap_or(0)
        }

        pub fn clear_avg_bandwidth(&mut self) {
            self.avg_bandwidth = ::std::option::Option::None;
        }

        pub fn has_avg_bandwidth(&self) -> bool {
            self.avg_bandwidth.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avg_bandwidth(&mut self, v: u32) {
            self.avg_bandwidth = ::std::option::Option::Some(v);
        }

        // optional uint64 total_bytes = 8;

        pub fn get_total_bytes(&self) -> u64 {
            self.total_bytes.unwrap_or(0)
        }

        pub fn clear_total_bytes(&mut self) {
            self.total_bytes = ::std::option::Option::None;
        }

        pub fn has_total_bytes(&self) -> bool {
            self.total_bytes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total_bytes(&mut self, v: u64) {
            self.total_bytes = ::std::option::Option::Some(v);
        }

        // optional uint32 app_id = 9;

        pub fn get_app_id(&self) -> u32 {
            self.app_id.unwrap_or(0)
        }

        pub fn clear_app_id(&mut self) {
            self.app_id = ::std::option::Option::None;
        }

        pub fn has_app_id(&self) -> bool {
            self.app_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_id(&mut self, v: u32) {
            self.app_id = ::std::option::Option::Some(v);
        }

        // optional uint32 total_unique_viewers = 10;

        pub fn get_total_unique_viewers(&self) -> u32 {
            self.total_unique_viewers.unwrap_or(0)
        }

        pub fn clear_total_unique_viewers(&mut self) {
            self.total_unique_viewers = ::std::option::Option::None;
        }

        pub fn has_total_unique_viewers(&self) -> bool {
            self.total_unique_viewers.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total_unique_viewers(&mut self, v: u32) {
            self.total_unique_viewers = ::std::option::Option::Some(v);
        }

        // optional uint64 total_seconds_watched = 11;

        pub fn get_total_seconds_watched(&self) -> u64 {
            self.total_seconds_watched.unwrap_or(0)
        }

        pub fn clear_total_seconds_watched(&mut self) {
            self.total_seconds_watched = ::std::option::Option::None;
        }

        pub fn has_total_seconds_watched(&self) -> bool {
            self.total_seconds_watched.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total_seconds_watched(&mut self, v: u64) {
            self.total_seconds_watched = ::std::option::Option::Some(v);
        }

        // optional uint32 time_started = 12;

        pub fn get_time_started(&self) -> u32 {
            self.time_started.unwrap_or(0)
        }

        pub fn clear_time_started(&mut self) {
            self.time_started = ::std::option::Option::None;
        }

        pub fn has_time_started(&self) -> bool {
            self.time_started.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_started(&mut self, v: u32) {
            self.time_started = ::std::option::Option::Some(v);
        }

        // optional uint64 upload_id = 13;

        pub fn get_upload_id(&self) -> u64 {
            self.upload_id.unwrap_or(0)
        }

        pub fn clear_upload_id(&mut self) {
            self.upload_id = ::std::option::Option::None;
        }

        pub fn has_upload_id(&self) -> bool {
            self.upload_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_upload_id(&mut self, v: u64) {
            self.upload_id = ::std::option::Option::Some(v);
        }

        // optional string local_address = 14;

        pub fn get_local_address(&self) -> &str {
            match self.local_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_local_address(&mut self) {
            self.local_address.clear();
        }

        pub fn has_local_address(&self) -> bool {
            self.local_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_local_address(&mut self, v: ::std::string::String) {
            self.local_address = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_local_address(&mut self) -> &mut ::std::string::String {
            if self.local_address.is_none() {
                self.local_address.set_default();
            }
            self.local_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_local_address(&mut self) -> ::std::string::String {
            self.local_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string remote_address = 15;

        pub fn get_remote_address(&self) -> &str {
            match self.remote_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_remote_address(&mut self) {
            self.remote_address.clear();
        }

        pub fn has_remote_address(&self) -> bool {
            self.remote_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remote_address(&mut self, v: ::std::string::String) {
            self.remote_address = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_remote_address(&mut self) -> &mut ::std::string::String {
            if self.remote_address.is_none() {
                self.remote_address.set_default();
            }
            self.remote_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_remote_address(&mut self) -> ::std::string::String {
            self.remote_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 frames_per_second = 16;

        pub fn get_frames_per_second(&self) -> u32 {
            self.frames_per_second.unwrap_or(0)
        }

        pub fn clear_frames_per_second(&mut self) {
            self.frames_per_second = ::std::option::Option::None;
        }

        pub fn has_frames_per_second(&self) -> bool {
            self.frames_per_second.is_some()
        }

        // Param is passed by value, moved
        pub fn set_frames_per_second(&mut self, v: u32) {
            self.frames_per_second = ::std::option::Option::Some(v);
        }

        // optional uint32 num_representations = 17;

        pub fn get_num_representations(&self) -> u32 {
            self.num_representations.unwrap_or(0)
        }

        pub fn clear_num_representations(&mut self) {
            self.num_representations = ::std::option::Option::None;
        }

        pub fn has_num_representations(&self) -> bool {
            self.num_representations.is_some()
        }

        // Param is passed by value, moved
        pub fn set_num_representations(&mut self, v: u32) {
            self.num_representations = ::std::option::Option::Some(v);
        }

        // optional string app_name = 18;

        pub fn get_app_name(&self) -> &str {
            match self.app_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_app_name(&mut self) {
            self.app_name.clear();
        }

        pub fn has_app_name(&self) -> bool {
            self.app_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_name(&mut self, v: ::std::string::String) {
            self.app_name = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_app_name(&mut self) -> &mut ::std::string::String {
            if self.app_name.is_none() {
                self.app_name.set_default();
            }
            self.app_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_app_name(&mut self) -> ::std::string::String {
            self.app_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool is_replay = 19;

        pub fn get_is_replay(&self) -> bool {
            self.is_replay.unwrap_or(false)
        }

        pub fn clear_is_replay(&mut self) {
            self.is_replay = ::std::option::Option::None;
        }

        pub fn has_is_replay(&self) -> bool {
            self.is_replay.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_replay(&mut self, v: bool) {
            self.is_replay = ::std::option::Option::Some(v);
        }

        // optional uint64 session_id = 20;

        pub fn get_session_id(&self) -> u64 {
            self.session_id.unwrap_or(0)
        }

        pub fn clear_session_id(&mut self) {
            self.session_id = ::std::option::Option::None;
        }

        pub fn has_session_id(&self) -> bool {
            self.session_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_session_id(&mut self, v: u64) {
            self.session_id = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for UploadStats {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.upload_result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.time_stopped = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    3 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.seconds_uploaded = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    4 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.max_viewers = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    5 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.resolution_x = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    6 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.resolution_y = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    7 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.avg_bandwidth = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    8 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.total_bytes = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    9 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    10 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.total_unique_viewers = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    11 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.total_seconds_watched = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    12 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.time_started = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    13 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.upload_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    14 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.local_address)?;
                    },
                    15 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.remote_address)?;
                    },
                    16 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.frames_per_second = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    17 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.num_representations = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.app_name)?;
                    },
                    19 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.is_replay = ::std::option::Option::Some(is.read_bool()?);
                    },
                    20 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.session_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.upload_result {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.time_stopped {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.seconds_uploaded {
                my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.max_viewers {
                my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.resolution_x {
                my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.resolution_y {
                my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.avg_bandwidth {
                my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.total_bytes {
                my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.app_id {
                my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.total_unique_viewers {
                my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.total_seconds_watched {
                my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.time_started {
                my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.upload_id {
                my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.local_address.as_ref() {
                my_size += ::protobuf::rt::string_size(14, &v);
            }
            if let Some(v) = self.remote_address.as_ref() {
                my_size += ::protobuf::rt::string_size(15, &v);
            }
            if let Some(v) = self.frames_per_second {
                my_size += ::protobuf::rt::value_size(16, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.num_representations {
                my_size += ::protobuf::rt::value_size(17, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.app_name.as_ref() {
                my_size += ::protobuf::rt::string_size(18, &v);
            }
            if let Some(v) = self.is_replay {
                my_size += 3;
            }
            if let Some(v) = self.session_id {
                my_size += ::protobuf::rt::value_size(20, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.upload_result {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_stopped {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.seconds_uploaded {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.max_viewers {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.resolution_x {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.resolution_y {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.avg_bandwidth {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.total_bytes {
                os.write_uint64(8, v)?;
            }
            if let Some(v) = self.app_id {
                os.write_uint32(9, v)?;
            }
            if let Some(v) = self.total_unique_viewers {
                os.write_uint32(10, v)?;
            }
            if let Some(v) = self.total_seconds_watched {
                os.write_uint64(11, v)?;
            }
            if let Some(v) = self.time_started {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.upload_id {
                os.write_uint64(13, v)?;
            }
            if let Some(v) = self.local_address.as_ref() {
                os.write_string(14, v)?;
            }
            if let Some(v) = self.remote_address.as_ref() {
                os.write_string(15, v)?;
            }
            if let Some(v) = self.frames_per_second {
                os.write_uint32(16, v)?;
            }
            if let Some(v) = self.num_representations {
                os.write_uint32(17, v)?;
            }
            if let Some(v) = self.app_name.as_ref() {
                os.write_string(18, v)?;
            }
            if let Some(v) = self.is_replay {
                os.write_bool(19, v)?;
            }
            if let Some(v) = self.session_id {
                os.write_uint64(20, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> UploadStats {
            UploadStats::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "upload_result",
                    |m: &UploadStats| { &m.upload_result },
                    |m: &mut UploadStats| { &mut m.upload_result },
                    UploadStats::get_upload_result,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "time_stopped",
                    |m: &UploadStats| { &m.time_stopped },
                    |m: &mut UploadStats| { &mut m.time_stopped },
                    UploadStats::get_time_stopped,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "seconds_uploaded",
                    |m: &UploadStats| { &m.seconds_uploaded },
                    |m: &mut UploadStats| { &mut m.seconds_uploaded },
                    UploadStats::get_seconds_uploaded,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "max_viewers",
                    |m: &UploadStats| { &m.max_viewers },
                    |m: &mut UploadStats| { &mut m.max_viewers },
                    UploadStats::get_max_viewers,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "resolution_x",
                    |m: &UploadStats| { &m.resolution_x },
                    |m: &mut UploadStats| { &mut m.resolution_x },
                    UploadStats::get_resolution_x,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "resolution_y",
                    |m: &UploadStats| { &m.resolution_y },
                    |m: &mut UploadStats| { &mut m.resolution_y },
                    UploadStats::get_resolution_y,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "avg_bandwidth",
                    |m: &UploadStats| { &m.avg_bandwidth },
                    |m: &mut UploadStats| { &mut m.avg_bandwidth },
                    UploadStats::get_avg_bandwidth,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                    "total_bytes",
                    |m: &UploadStats| { &m.total_bytes },
                    |m: &mut UploadStats| { &mut m.total_bytes },
                    UploadStats::get_total_bytes,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "app_id",
                    |m: &UploadStats| { &m.app_id },
                    |m: &mut UploadStats| { &mut m.app_id },
                    UploadStats::get_app_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "total_unique_viewers",
                    |m: &UploadStats| { &m.total_unique_viewers },
                    |m: &mut UploadStats| { &mut m.total_unique_viewers },
                    UploadStats::get_total_unique_viewers,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                    "total_seconds_watched",
                    |m: &UploadStats| { &m.total_seconds_watched },
                    |m: &mut UploadStats| { &mut m.total_seconds_watched },
                    UploadStats::get_total_seconds_watched,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "time_started",
                    |m: &UploadStats| { &m.time_started },
                    |m: &mut UploadStats| { &mut m.time_started },
                    UploadStats::get_time_started,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                    "upload_id",
                    |m: &UploadStats| { &m.upload_id },
                    |m: &mut UploadStats| { &mut m.upload_id },
                    UploadStats::get_upload_id,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "local_address",
                    |m: &UploadStats| { &m.local_address },
                    |m: &mut UploadStats| { &mut m.local_address },
                    UploadStats::get_local_address,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "remote_address",
                    |m: &UploadStats| { &m.remote_address },
                    |m: &mut UploadStats| { &mut m.remote_address },
                    UploadStats::get_remote_address,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "frames_per_second",
                    |m: &UploadStats| { &m.frames_per_second },
                    |m: &mut UploadStats| { &mut m.frames_per_second },
                    UploadStats::get_frames_per_second,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "num_representations",
                    |m: &UploadStats| { &m.num_representations },
                    |m: &mut UploadStats| { &mut m.num_representations },
                    UploadStats::get_num_representations,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "app_name",
                    |m: &UploadStats| { &m.app_name },
                    |m: &mut UploadStats| { &mut m.app_name },
                    UploadStats::get_app_name,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                    "is_replay",
                    |m: &UploadStats| { &m.is_replay },
                    |m: &mut UploadStats| { &mut m.is_replay },
                    UploadStats::get_is_replay,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                    "session_id",
                    |m: &UploadStats| { &m.session_id },
                    |m: &mut UploadStats| { &mut m.session_id },
                    UploadStats::get_session_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UploadStats>(
                    "CBroadcast_GetBroadcastUploadStats_Response.UploadStats",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static UploadStats {
            static instance: ::protobuf::rt::Lazy<UploadStats> = ::protobuf::rt::Lazy::INIT;
            instance.get(UploadStats::new)
        }
    }

    impl ::protobuf::Clear for UploadStats {
        fn clear(&mut self) {
            self.upload_result = ::std::option::Option::None;
            self.time_stopped = ::std::option::Option::None;
            self.seconds_uploaded = ::std::option::Option::None;
            self.max_viewers = ::std::option::Option::None;
            self.resolution_x = ::std::option::Option::None;
            self.resolution_y = ::std::option::Option::None;
            self.avg_bandwidth = ::std::option::Option::None;
            self.total_bytes = ::std::option::Option::None;
            self.app_id = ::std::option::Option::None;
            self.total_unique_viewers = ::std::option::Option::None;
            self.total_seconds_watched = ::std::option::Option::None;
            self.time_started = ::std::option::Option::None;
            self.upload_id = ::std::option::Option::None;
            self.local_address.clear();
            self.remote_address.clear();
            self.frames_per_second = ::std::option::Option::None;
            self.num_representations = ::std::option::Option::None;
            self.app_name.clear();
            self.is_replay = ::std::option::Option::None;
            self.session_id = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for UploadStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for UploadStats {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastViewerStats_Request {
    // message fields
    upload_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastViewerStats_Request {
    fn default() -> &'a CBroadcast_GetBroadcastViewerStats_Request {
        <CBroadcast_GetBroadcastViewerStats_Request as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastViewerStats_Request {
    pub fn new() -> CBroadcast_GetBroadcastViewerStats_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_id = 1;

    pub fn get_upload_id(&self) -> u64 {
        self.upload_id.unwrap_or(0)
    }

    pub fn clear_upload_id(&mut self) {
        self.upload_id = ::std::option::Option::None;
    }

    pub fn has_upload_id(&self) -> bool {
        self.upload_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_id(&mut self, v: u64) {
        self.upload_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastViewerStats_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upload_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastViewerStats_Request {
        CBroadcast_GetBroadcastViewerStats_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "upload_id",
                |m: &CBroadcast_GetBroadcastViewerStats_Request| { &m.upload_id },
                |m: &mut CBroadcast_GetBroadcastViewerStats_Request| { &mut m.upload_id },
                CBroadcast_GetBroadcastViewerStats_Request::get_upload_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_GetBroadcastViewerStats_Request| { &m.steamid },
                |m: &mut CBroadcast_GetBroadcastViewerStats_Request| { &mut m.steamid },
                CBroadcast_GetBroadcastViewerStats_Request::get_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastViewerStats_Request>(
                "CBroadcast_GetBroadcastViewerStats_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastViewerStats_Request {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastViewerStats_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastViewerStats_Request::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastViewerStats_Request {
    fn clear(&mut self) {
        self.upload_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastViewerStats_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastViewerStats_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_GetBroadcastViewerStats_Response {
    // message fields
    pub viewer_stats: ::protobuf::RepeatedField<cbroadcast_get_broadcast_viewer_stats_response::ViewerStats>,
    pub country_stats: ::protobuf::RepeatedField<cbroadcast_get_broadcast_viewer_stats_response::CountryStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_GetBroadcastViewerStats_Response {
    fn default() -> &'a CBroadcast_GetBroadcastViewerStats_Response {
        <CBroadcast_GetBroadcastViewerStats_Response as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_GetBroadcastViewerStats_Response {
    pub fn new() -> CBroadcast_GetBroadcastViewerStats_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CBroadcast_GetBroadcastViewerStats_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.viewer_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.country_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.viewer_stats)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.country_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.viewer_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.country_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.viewer_stats {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.country_stats {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_GetBroadcastViewerStats_Response {
        CBroadcast_GetBroadcastViewerStats_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cbroadcast_get_broadcast_viewer_stats_response::ViewerStats>>(
                "viewer_stats",
                |m: &CBroadcast_GetBroadcastViewerStats_Response| { &m.viewer_stats },
                |m: &mut CBroadcast_GetBroadcastViewerStats_Response| { &mut m.viewer_stats },
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<cbroadcast_get_broadcast_viewer_stats_response::CountryStats>>(
                "country_stats",
                |m: &CBroadcast_GetBroadcastViewerStats_Response| { &m.country_stats },
                |m: &mut CBroadcast_GetBroadcastViewerStats_Response| { &mut m.country_stats },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_GetBroadcastViewerStats_Response>(
                "CBroadcast_GetBroadcastViewerStats_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_GetBroadcastViewerStats_Response {
        static instance: ::protobuf::rt::Lazy<CBroadcast_GetBroadcastViewerStats_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_GetBroadcastViewerStats_Response::new)
    }
}

impl ::protobuf::Clear for CBroadcast_GetBroadcastViewerStats_Response {
    fn clear(&mut self) {
        self.viewer_stats.clear();
        self.country_stats.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_GetBroadcastViewerStats_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_GetBroadcastViewerStats_Response {
}

/// Nested message and enums of message `CBroadcast_GetBroadcastViewerStats_Response`
pub mod cbroadcast_get_broadcast_viewer_stats_response {
    #[derive(PartialEq,Clone,Default)]
    pub struct ViewerStats {
        // message fields
        time: ::std::option::Option<u32>,
        num_viewers: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a ViewerStats {
        fn default() -> &'a ViewerStats {
            <ViewerStats as ::protobuf::Message>::default_instance()
        }
    }

    impl ViewerStats {
        pub fn new() -> ViewerStats {
            ::std::default::Default::default()
        }

        // optional uint32 time = 1;

        pub fn get_time(&self) -> u32 {
            self.time.unwrap_or(0)
        }

        pub fn clear_time(&mut self) {
            self.time = ::std::option::Option::None;
        }

        pub fn has_time(&self) -> bool {
            self.time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time(&mut self, v: u32) {
            self.time = ::std::option::Option::Some(v);
        }

        // optional uint32 num_viewers = 2;

        pub fn get_num_viewers(&self) -> u32 {
            self.num_viewers.unwrap_or(0)
        }

        pub fn clear_num_viewers(&mut self) {
            self.num_viewers = ::std::option::Option::None;
        }

        pub fn has_num_viewers(&self) -> bool {
            self.num_viewers.is_some()
        }

        // Param is passed by value, moved
        pub fn set_num_viewers(&mut self, v: u32) {
            self.num_viewers = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for ViewerStats {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.num_viewers = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.time {
                my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
            }
            if let Some(v) = self.num_viewers {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.time {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.num_viewers {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> ViewerStats {
            ViewerStats::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "time",
                    |m: &ViewerStats| { &m.time },
                    |m: &mut ViewerStats| { &mut m.time },
                    ViewerStats::get_time,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "num_viewers",
                    |m: &ViewerStats| { &m.num_viewers },
                    |m: &mut ViewerStats| { &mut m.num_viewers },
                    ViewerStats::get_num_viewers,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ViewerStats>(
                    "CBroadcast_GetBroadcastViewerStats_Response.ViewerStats",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static ViewerStats {
            static instance: ::protobuf::rt::Lazy<ViewerStats> = ::protobuf::rt::Lazy::INIT;
            instance.get(ViewerStats::new)
        }
    }

    impl ::protobuf::Clear for ViewerStats {
        fn clear(&mut self) {
            self.time = ::std::option::Option::None;
            self.num_viewers = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for ViewerStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ViewerStats {
    }

    #[derive(PartialEq,Clone,Default)]
    pub struct CountryStats {
        // message fields
        country_code: ::protobuf::SingularField<::std::string::String>,
        num_viewers: ::std::option::Option<u32>,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a CountryStats {
        fn default() -> &'a CountryStats {
            <CountryStats as ::protobuf::Message>::default_instance()
        }
    }

    impl CountryStats {
        pub fn new() -> CountryStats {
            ::std::default::Default::default()
        }

        // optional string country_code = 1;

        pub fn get_country_code(&self) -> &str {
            match self.country_code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_country_code(&mut self) {
            self.country_code.clear();
        }

        pub fn has_country_code(&self) -> bool {
            self.country_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_country_code(&mut self, v: ::std::string::String) {
            self.country_code = ::protobuf::SingularField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
            if self.country_code.is_none() {
                self.country_code.set_default();
            }
            self.country_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_country_code(&mut self) -> ::std::string::String {
            self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 num_viewers = 2;

        pub fn get_num_viewers(&self) -> u32 {
            self.num_viewers.unwrap_or(0)
        }

        pub fn clear_num_viewers(&mut self) {
            self.num_viewers = ::std::option::Option::None;
        }

        pub fn has_num_viewers(&self) -> bool {
            self.num_viewers.is_some()
        }

        // Param is passed by value, moved
        pub fn set_num_viewers(&mut self, v: u32) {
            self.num_viewers = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for CountryStats {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.country_code)?;
                    },
                    2 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.num_viewers = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if let Some(v) = self.country_code.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.num_viewers {
                my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if let Some(v) = self.country_code.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.num_viewers {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
            Self::descriptor_static()
        }

        fn new() -> CountryStats {
            CountryStats::new()
        }

        fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                    "country_code",
                    |m: &CountryStats| { &m.country_code },
                    |m: &mut CountryStats| { &mut m.country_code },
                    CountryStats::get_country_code,
                ));
                fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                    "num_viewers",
                    |m: &CountryStats| { &m.num_viewers },
                    |m: &mut CountryStats| { &mut m.num_viewers },
                    CountryStats::get_num_viewers,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CountryStats>(
                    "CBroadcast_GetBroadcastViewerStats_Response.CountryStats",
                    fields,
                    super::file_descriptor_proto()
                )
            })
        }

        fn default_instance() -> &'static CountryStats {
            static instance: ::protobuf::rt::Lazy<CountryStats> = ::protobuf::rt::Lazy::INIT;
            instance.get(CountryStats::new)
        }
    }

    impl ::protobuf::Clear for CountryStats {
        fn clear(&mut self) {
            self.country_code.clear();
            self.num_viewers = ::std::option::Option::None;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for CountryStats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CountryStats {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BroadcastViewerState_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    state: ::std::option::Option<::protobuf::ProtobufEnumOrUnknown<cbroadcast_broadcast_viewer_state_notification::EViewerState>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BroadcastViewerState_Notification {
    fn default() -> &'a CBroadcast_BroadcastViewerState_Notification {
        <CBroadcast_BroadcastViewerState_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BroadcastViewerState_Notification {
    pub fn new() -> CBroadcast_BroadcastViewerState_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2;

    pub fn get_state(&self) -> cbroadcast_broadcast_viewer_state_notification::EViewerState {
        match self.state {
            Some(e) => e.enum_value_or(cbroadcast_broadcast_viewer_state_notification::EViewerState::k_EViewerNeedsApproval),
            None => cbroadcast_broadcast_viewer_state_notification::EViewerState::k_EViewerNeedsApproval,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: cbroadcast_broadcast_viewer_state_notification::EViewerState) {
        self.state = ::std::option::Option::Some(::protobuf::ProtobufEnumOrUnknown::new(v));
    }
}

impl ::protobuf::Message for CBroadcast_BroadcastViewerState_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BroadcastViewerState_Notification {
        CBroadcast_BroadcastViewerState_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "steamid",
                |m: &CBroadcast_BroadcastViewerState_Notification| { &m.steamid },
                |m: &mut CBroadcast_BroadcastViewerState_Notification| { &mut m.steamid },
                CBroadcast_BroadcastViewerState_Notification::get_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_enum_accessor::<_, cbroadcast_broadcast_viewer_state_notification::EViewerState>(
                "state",
                |m: &CBroadcast_BroadcastViewerState_Notification| { &m.state },
                |m: &mut CBroadcast_BroadcastViewerState_Notification| { &mut m.state },
                cbroadcast_broadcast_viewer_state_notification::EViewerState::k_EViewerNeedsApproval,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BroadcastViewerState_Notification>(
                "CBroadcast_BroadcastViewerState_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BroadcastViewerState_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BroadcastViewerState_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BroadcastViewerState_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BroadcastViewerState_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BroadcastViewerState_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BroadcastViewerState_Notification {
}

/// Nested message and enums of message `CBroadcast_BroadcastViewerState_Notification`
pub mod cbroadcast_broadcast_viewer_state_notification {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum EViewerState {
        k_EViewerNeedsApproval = 1,
        k_EViewerWatching = 2,
        k_EViewerLeft = 3,
    }

    impl ::protobuf::ProtobufEnum for EViewerState {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EViewerState> {
            match value {
                1 => ::std::option::Option::Some(EViewerState::k_EViewerNeedsApproval),
                2 => ::std::option::Option::Some(EViewerState::k_EViewerWatching),
                3 => ::std::option::Option::Some(EViewerState::k_EViewerLeft),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [EViewerState] = &[
                EViewerState::k_EViewerNeedsApproval,
                EViewerState::k_EViewerWatching,
                EViewerState::k_EViewerLeft,
            ];
            values
        }

        fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new::<EViewerState>("CBroadcast_BroadcastViewerState_Notification.EViewerState", super::file_descriptor_proto())
            })
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for EViewerState {
        fn default() -> Self {
            EViewerState::k_EViewerNeedsApproval
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EViewerState {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WaitingBroadcastViewer_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WaitingBroadcastViewer_Notification {
    fn default() -> &'a CBroadcast_WaitingBroadcastViewer_Notification {
        <CBroadcast_WaitingBroadcastViewer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WaitingBroadcastViewer_Notification {
    pub fn new() -> CBroadcast_WaitingBroadcastViewer_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WaitingBroadcastViewer_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WaitingBroadcastViewer_Notification {
        CBroadcast_WaitingBroadcastViewer_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_WaitingBroadcastViewer_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_WaitingBroadcastViewer_Notification| { &mut m.broadcast_id },
                CBroadcast_WaitingBroadcastViewer_Notification::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WaitingBroadcastViewer_Notification>(
                "CBroadcast_WaitingBroadcastViewer_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WaitingBroadcastViewer_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WaitingBroadcastViewer_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WaitingBroadcastViewer_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WaitingBroadcastViewer_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WaitingBroadcastViewer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WaitingBroadcastViewer_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BroadcastUploadStarted_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    upload_token: ::protobuf::SingularField<::std::string::String>,
    upload_address: ::protobuf::SingularField<::std::string::String>,
    http_address: ::protobuf::SingularField<::std::string::String>,
    broadcast_upload_id: ::std::option::Option<u64>,
    heartbeat_interval_seconds: ::std::option::Option<u32>,
    is_rtmp: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BroadcastUploadStarted_Notification {
    fn default() -> &'a CBroadcast_BroadcastUploadStarted_Notification {
        <CBroadcast_BroadcastUploadStarted_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BroadcastUploadStarted_Notification {
    pub fn new() -> CBroadcast_BroadcastUploadStarted_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional string upload_token = 2;

    pub fn get_upload_token(&self) -> &str {
        match self.upload_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token.clear();
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: ::std::string::String) {
        self.upload_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upload_token(&mut self) -> &mut ::std::string::String {
        if self.upload_token.is_none() {
            self.upload_token.set_default();
        }
        self.upload_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_upload_token(&mut self) -> ::std::string::String {
        self.upload_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string upload_address = 3;

    pub fn get_upload_address(&self) -> &str {
        match self.upload_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_upload_address(&mut self) {
        self.upload_address.clear();
    }

    pub fn has_upload_address(&self) -> bool {
        self.upload_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_address(&mut self, v: ::std::string::String) {
        self.upload_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upload_address(&mut self) -> &mut ::std::string::String {
        if self.upload_address.is_none() {
            self.upload_address.set_default();
        }
        self.upload_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_upload_address(&mut self) -> ::std::string::String {
        self.upload_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string http_address = 4;

    pub fn get_http_address(&self) -> &str {
        match self.http_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_address(&mut self) {
        self.http_address.clear();
    }

    pub fn has_http_address(&self) -> bool {
        self.http_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_address(&mut self, v: ::std::string::String) {
        self.http_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_address(&mut self) -> &mut ::std::string::String {
        if self.http_address.is_none() {
            self.http_address.set_default();
        }
        self.http_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_address(&mut self) -> ::std::string::String {
        self.http_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 broadcast_upload_id = 5;

    pub fn get_broadcast_upload_id(&self) -> u64 {
        self.broadcast_upload_id.unwrap_or(0)
    }

    pub fn clear_broadcast_upload_id(&mut self) {
        self.broadcast_upload_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_upload_id(&self) -> bool {
        self.broadcast_upload_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_upload_id(&mut self, v: u64) {
        self.broadcast_upload_id = ::std::option::Option::Some(v);
    }

    // optional uint32 heartbeat_interval_seconds = 6;

    pub fn get_heartbeat_interval_seconds(&self) -> u32 {
        self.heartbeat_interval_seconds.unwrap_or(0)
    }

    pub fn clear_heartbeat_interval_seconds(&mut self) {
        self.heartbeat_interval_seconds = ::std::option::Option::None;
    }

    pub fn has_heartbeat_interval_seconds(&self) -> bool {
        self.heartbeat_interval_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_interval_seconds(&mut self, v: u32) {
        self.heartbeat_interval_seconds = ::std::option::Option::Some(v);
    }

    // optional bool is_rtmp = 7;

    pub fn get_is_rtmp(&self) -> bool {
        self.is_rtmp.unwrap_or(false)
    }

    pub fn clear_is_rtmp(&mut self) {
        self.is_rtmp = ::std::option::Option::None;
    }

    pub fn has_is_rtmp(&self) -> bool {
        self.is_rtmp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_rtmp(&mut self, v: bool) {
        self.is_rtmp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_BroadcastUploadStarted_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.upload_token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.upload_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.http_address)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_upload_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.heartbeat_interval_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is_rtmp = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.upload_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.upload_address.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.http_address.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.broadcast_upload_id {
            my_size += 9;
        }
        if let Some(v) = self.heartbeat_interval_seconds {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_rtmp {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.upload_token.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.upload_address.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.http_address.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.broadcast_upload_id {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.heartbeat_interval_seconds {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.is_rtmp {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BroadcastUploadStarted_Notification {
        CBroadcast_BroadcastUploadStarted_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.broadcast_id },
                CBroadcast_BroadcastUploadStarted_Notification::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "upload_token",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.upload_token },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.upload_token },
                CBroadcast_BroadcastUploadStarted_Notification::get_upload_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "upload_address",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.upload_address },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.upload_address },
                CBroadcast_BroadcastUploadStarted_Notification::get_upload_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "http_address",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.http_address },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.http_address },
                CBroadcast_BroadcastUploadStarted_Notification::get_http_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_upload_id",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.broadcast_upload_id },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.broadcast_upload_id },
                CBroadcast_BroadcastUploadStarted_Notification::get_broadcast_upload_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "heartbeat_interval_seconds",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.heartbeat_interval_seconds },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.heartbeat_interval_seconds },
                CBroadcast_BroadcastUploadStarted_Notification::get_heartbeat_interval_seconds,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "is_rtmp",
                |m: &CBroadcast_BroadcastUploadStarted_Notification| { &m.is_rtmp },
                |m: &mut CBroadcast_BroadcastUploadStarted_Notification| { &mut m.is_rtmp },
                CBroadcast_BroadcastUploadStarted_Notification::get_is_rtmp,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BroadcastUploadStarted_Notification>(
                "CBroadcast_BroadcastUploadStarted_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BroadcastUploadStarted_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BroadcastUploadStarted_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BroadcastUploadStarted_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BroadcastUploadStarted_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.upload_token.clear();
        self.upload_address.clear();
        self.http_address.clear();
        self.broadcast_upload_id = ::std::option::Option::None;
        self.heartbeat_interval_seconds = ::std::option::Option::None;
        self.is_rtmp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BroadcastUploadStarted_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BroadcastUploadStarted_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_StopBroadcastUpload_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    broadcast_relay_id: ::std::option::Option<u64>,
    upload_result: ::std::option::Option<u32>,
    too_many_poor_uploads: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_StopBroadcastUpload_Notification {
    fn default() -> &'a CBroadcast_StopBroadcastUpload_Notification {
        <CBroadcast_StopBroadcastUpload_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_StopBroadcastUpload_Notification {
    pub fn new() -> CBroadcast_StopBroadcastUpload_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 broadcast_relay_id = 2;

    pub fn get_broadcast_relay_id(&self) -> u64 {
        self.broadcast_relay_id.unwrap_or(0)
    }

    pub fn clear_broadcast_relay_id(&mut self) {
        self.broadcast_relay_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_relay_id(&self) -> bool {
        self.broadcast_relay_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_relay_id(&mut self, v: u64) {
        self.broadcast_relay_id = ::std::option::Option::Some(v);
    }

    // optional uint32 upload_result = 3;

    pub fn get_upload_result(&self) -> u32 {
        self.upload_result.unwrap_or(0)
    }

    pub fn clear_upload_result(&mut self) {
        self.upload_result = ::std::option::Option::None;
    }

    pub fn has_upload_result(&self) -> bool {
        self.upload_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_result(&mut self, v: u32) {
        self.upload_result = ::std::option::Option::Some(v);
    }

    // optional bool too_many_poor_uploads = 4;

    pub fn get_too_many_poor_uploads(&self) -> bool {
        self.too_many_poor_uploads.unwrap_or(false)
    }

    pub fn clear_too_many_poor_uploads(&mut self) {
        self.too_many_poor_uploads = ::std::option::Option::None;
    }

    pub fn has_too_many_poor_uploads(&self) -> bool {
        self.too_many_poor_uploads.is_some()
    }

    // Param is passed by value, moved
    pub fn set_too_many_poor_uploads(&mut self, v: bool) {
        self.too_many_poor_uploads = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_StopBroadcastUpload_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_relay_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upload_result = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.too_many_poor_uploads = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_relay_id {
            my_size += 9;
        }
        if let Some(v) = self.upload_result {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.too_many_poor_uploads {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_relay_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.upload_result {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.too_many_poor_uploads {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_StopBroadcastUpload_Notification {
        CBroadcast_StopBroadcastUpload_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_StopBroadcastUpload_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_StopBroadcastUpload_Notification| { &mut m.broadcast_id },
                CBroadcast_StopBroadcastUpload_Notification::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_relay_id",
                |m: &CBroadcast_StopBroadcastUpload_Notification| { &m.broadcast_relay_id },
                |m: &mut CBroadcast_StopBroadcastUpload_Notification| { &mut m.broadcast_relay_id },
                CBroadcast_StopBroadcastUpload_Notification::get_broadcast_relay_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "upload_result",
                |m: &CBroadcast_StopBroadcastUpload_Notification| { &m.upload_result },
                |m: &mut CBroadcast_StopBroadcastUpload_Notification| { &mut m.upload_result },
                CBroadcast_StopBroadcastUpload_Notification::get_upload_result,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "too_many_poor_uploads",
                |m: &CBroadcast_StopBroadcastUpload_Notification| { &m.too_many_poor_uploads },
                |m: &mut CBroadcast_StopBroadcastUpload_Notification| { &mut m.too_many_poor_uploads },
                CBroadcast_StopBroadcastUpload_Notification::get_too_many_poor_uploads,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_StopBroadcastUpload_Notification>(
                "CBroadcast_StopBroadcastUpload_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_StopBroadcastUpload_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_StopBroadcastUpload_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_StopBroadcastUpload_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_StopBroadcastUpload_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.broadcast_relay_id = ::std::option::Option::None;
        self.upload_result = ::std::option::Option::None;
        self.too_many_poor_uploads = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_StopBroadcastUpload_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_StopBroadcastUpload_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SessionClosed_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SessionClosed_Notification {
    fn default() -> &'a CBroadcast_SessionClosed_Notification {
        <CBroadcast_SessionClosed_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SessionClosed_Notification {
    pub fn new() -> CBroadcast_SessionClosed_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_SessionClosed_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SessionClosed_Notification {
        CBroadcast_SessionClosed_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_SessionClosed_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_SessionClosed_Notification| { &mut m.broadcast_id },
                CBroadcast_SessionClosed_Notification::get_broadcast_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SessionClosed_Notification>(
                "CBroadcast_SessionClosed_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SessionClosed_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SessionClosed_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SessionClosed_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SessionClosed_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SessionClosed_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SessionClosed_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_ViewerBroadcastInvite_Notification {
    // message fields
    broadcaster_steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_ViewerBroadcastInvite_Notification {
    fn default() -> &'a CBroadcast_ViewerBroadcastInvite_Notification {
        <CBroadcast_ViewerBroadcastInvite_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_ViewerBroadcastInvite_Notification {
    pub fn new() -> CBroadcast_ViewerBroadcastInvite_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcaster_steamid = 1;

    pub fn get_broadcaster_steamid(&self) -> u64 {
        self.broadcaster_steamid.unwrap_or(0)
    }

    pub fn clear_broadcaster_steamid(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
    }

    pub fn has_broadcaster_steamid(&self) -> bool {
        self.broadcaster_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcaster_steamid(&mut self, v: u64) {
        self.broadcaster_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_ViewerBroadcastInvite_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcaster_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcaster_steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcaster_steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_ViewerBroadcastInvite_Notification {
        CBroadcast_ViewerBroadcastInvite_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcaster_steamid",
                |m: &CBroadcast_ViewerBroadcastInvite_Notification| { &m.broadcaster_steamid },
                |m: &mut CBroadcast_ViewerBroadcastInvite_Notification| { &mut m.broadcaster_steamid },
                CBroadcast_ViewerBroadcastInvite_Notification::get_broadcaster_steamid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_ViewerBroadcastInvite_Notification>(
                "CBroadcast_ViewerBroadcastInvite_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_ViewerBroadcastInvite_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_ViewerBroadcastInvite_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_ViewerBroadcastInvite_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_ViewerBroadcastInvite_Notification {
    fn clear(&mut self) {
        self.broadcaster_steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_ViewerBroadcastInvite_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_ViewerBroadcastInvite_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BroadcastStatus_Notification {
    // message fields
    broadcast_id: ::std::option::Option<u64>,
    num_viewers: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BroadcastStatus_Notification {
    fn default() -> &'a CBroadcast_BroadcastStatus_Notification {
        <CBroadcast_BroadcastStatus_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BroadcastStatus_Notification {
    pub fn new() -> CBroadcast_BroadcastStatus_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_id = 1;

    pub fn get_broadcast_id(&self) -> u64 {
        self.broadcast_id.unwrap_or(0)
    }

    pub fn clear_broadcast_id(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_id(&self) -> bool {
        self.broadcast_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_id(&mut self, v: u64) {
        self.broadcast_id = ::std::option::Option::Some(v);
    }

    // optional int32 num_viewers = 2;

    pub fn get_num_viewers(&self) -> i32 {
        self.num_viewers.unwrap_or(0)
    }

    pub fn clear_num_viewers(&mut self) {
        self.num_viewers = ::std::option::Option::None;
    }

    pub fn has_num_viewers(&self) -> bool {
        self.num_viewers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_viewers(&mut self, v: i32) {
        self.num_viewers = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_BroadcastStatus_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.num_viewers = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_id {
            my_size += 9;
        }
        if let Some(v) = self.num_viewers {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.num_viewers {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BroadcastStatus_Notification {
        CBroadcast_BroadcastStatus_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_id",
                |m: &CBroadcast_BroadcastStatus_Notification| { &m.broadcast_id },
                |m: &mut CBroadcast_BroadcastStatus_Notification| { &mut m.broadcast_id },
                CBroadcast_BroadcastStatus_Notification::get_broadcast_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "num_viewers",
                |m: &CBroadcast_BroadcastStatus_Notification| { &m.num_viewers },
                |m: &mut CBroadcast_BroadcastStatus_Notification| { &mut m.num_viewers },
                CBroadcast_BroadcastStatus_Notification::get_num_viewers,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BroadcastStatus_Notification>(
                "CBroadcast_BroadcastStatus_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BroadcastStatus_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BroadcastStatus_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BroadcastStatus_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BroadcastStatus_Notification {
    fn clear(&mut self) {
        self.broadcast_id = ::std::option::Option::None;
        self.num_viewers = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BroadcastStatus_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BroadcastStatus_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_BroadcastChannelLive_Notification {
    // message fields
    broadcast_channel_id: ::std::option::Option<u64>,
    broadcast_channel_name: ::protobuf::SingularField<::std::string::String>,
    broadcast_channel_avatar: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_BroadcastChannelLive_Notification {
    fn default() -> &'a CBroadcast_BroadcastChannelLive_Notification {
        <CBroadcast_BroadcastChannelLive_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_BroadcastChannelLive_Notification {
    pub fn new() -> CBroadcast_BroadcastChannelLive_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_channel_id = 1;

    pub fn get_broadcast_channel_id(&self) -> u64 {
        self.broadcast_channel_id.unwrap_or(0)
    }

    pub fn clear_broadcast_channel_id(&mut self) {
        self.broadcast_channel_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_channel_id(&self) -> bool {
        self.broadcast_channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_channel_id(&mut self, v: u64) {
        self.broadcast_channel_id = ::std::option::Option::Some(v);
    }

    // optional string broadcast_channel_name = 2;

    pub fn get_broadcast_channel_name(&self) -> &str {
        match self.broadcast_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_broadcast_channel_name(&mut self) {
        self.broadcast_channel_name.clear();
    }

    pub fn has_broadcast_channel_name(&self) -> bool {
        self.broadcast_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_channel_name(&mut self, v: ::std::string::String) {
        self.broadcast_channel_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_broadcast_channel_name(&mut self) -> &mut ::std::string::String {
        if self.broadcast_channel_name.is_none() {
            self.broadcast_channel_name.set_default();
        }
        self.broadcast_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_broadcast_channel_name(&mut self) -> ::std::string::String {
        self.broadcast_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string broadcast_channel_avatar = 3;

    pub fn get_broadcast_channel_avatar(&self) -> &str {
        match self.broadcast_channel_avatar.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_broadcast_channel_avatar(&mut self) {
        self.broadcast_channel_avatar.clear();
    }

    pub fn has_broadcast_channel_avatar(&self) -> bool {
        self.broadcast_channel_avatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_channel_avatar(&mut self, v: ::std::string::String) {
        self.broadcast_channel_avatar = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_broadcast_channel_avatar(&mut self) -> &mut ::std::string::String {
        if self.broadcast_channel_avatar.is_none() {
            self.broadcast_channel_avatar.set_default();
        }
        self.broadcast_channel_avatar.as_mut().unwrap()
    }

    // Take field
    pub fn take_broadcast_channel_avatar(&mut self) -> ::std::string::String {
        self.broadcast_channel_avatar.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_BroadcastChannelLive_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.broadcast_channel_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.broadcast_channel_avatar)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_channel_id {
            my_size += 9;
        }
        if let Some(v) = self.broadcast_channel_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.broadcast_channel_avatar.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_channel_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.broadcast_channel_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.broadcast_channel_avatar.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_BroadcastChannelLive_Notification {
        CBroadcast_BroadcastChannelLive_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_channel_id",
                |m: &CBroadcast_BroadcastChannelLive_Notification| { &m.broadcast_channel_id },
                |m: &mut CBroadcast_BroadcastChannelLive_Notification| { &mut m.broadcast_channel_id },
                CBroadcast_BroadcastChannelLive_Notification::get_broadcast_channel_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "broadcast_channel_name",
                |m: &CBroadcast_BroadcastChannelLive_Notification| { &m.broadcast_channel_name },
                |m: &mut CBroadcast_BroadcastChannelLive_Notification| { &mut m.broadcast_channel_name },
                CBroadcast_BroadcastChannelLive_Notification::get_broadcast_channel_name,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "broadcast_channel_avatar",
                |m: &CBroadcast_BroadcastChannelLive_Notification| { &m.broadcast_channel_avatar },
                |m: &mut CBroadcast_BroadcastChannelLive_Notification| { &mut m.broadcast_channel_avatar },
                CBroadcast_BroadcastChannelLive_Notification::get_broadcast_channel_avatar,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_BroadcastChannelLive_Notification>(
                "CBroadcast_BroadcastChannelLive_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_BroadcastChannelLive_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_BroadcastChannelLive_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_BroadcastChannelLive_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_BroadcastChannelLive_Notification {
    fn clear(&mut self) {
        self.broadcast_channel_id = ::std::option::Option::None;
        self.broadcast_channel_name.clear();
        self.broadcast_channel_avatar.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_BroadcastChannelLive_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_BroadcastChannelLive_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_SendThumbnailToRelay_Notification {
    // message fields
    thumbnail_upload_token: ::protobuf::SingularField<::std::string::String>,
    thumbnail_broadcast_session_id: ::std::option::Option<u64>,
    thumbnail_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    thumbnail_width: ::std::option::Option<u32>,
    thumbnail_height: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_SendThumbnailToRelay_Notification {
    fn default() -> &'a CBroadcast_SendThumbnailToRelay_Notification {
        <CBroadcast_SendThumbnailToRelay_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_SendThumbnailToRelay_Notification {
    pub fn new() -> CBroadcast_SendThumbnailToRelay_Notification {
        ::std::default::Default::default()
    }

    // optional string thumbnail_upload_token = 1;

    pub fn get_thumbnail_upload_token(&self) -> &str {
        match self.thumbnail_upload_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_thumbnail_upload_token(&mut self) {
        self.thumbnail_upload_token.clear();
    }

    pub fn has_thumbnail_upload_token(&self) -> bool {
        self.thumbnail_upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_upload_token(&mut self, v: ::std::string::String) {
        self.thumbnail_upload_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_upload_token(&mut self) -> &mut ::std::string::String {
        if self.thumbnail_upload_token.is_none() {
            self.thumbnail_upload_token.set_default();
        }
        self.thumbnail_upload_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_upload_token(&mut self) -> ::std::string::String {
        self.thumbnail_upload_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 thumbnail_broadcast_session_id = 2;

    pub fn get_thumbnail_broadcast_session_id(&self) -> u64 {
        self.thumbnail_broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_thumbnail_broadcast_session_id(&mut self) {
        self.thumbnail_broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_thumbnail_broadcast_session_id(&self) -> bool {
        self.thumbnail_broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_broadcast_session_id(&mut self, v: u64) {
        self.thumbnail_broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional bytes thumbnail_data = 3;

    pub fn get_thumbnail_data(&self) -> &[u8] {
        match self.thumbnail_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_thumbnail_data(&mut self) {
        self.thumbnail_data.clear();
    }

    pub fn has_thumbnail_data(&self) -> bool {
        self.thumbnail_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.thumbnail_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thumbnail_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.thumbnail_data.is_none() {
            self.thumbnail_data.set_default();
        }
        self.thumbnail_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_thumbnail_data(&mut self) -> ::std::vec::Vec<u8> {
        self.thumbnail_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 thumbnail_width = 4;

    pub fn get_thumbnail_width(&self) -> u32 {
        self.thumbnail_width.unwrap_or(0)
    }

    pub fn clear_thumbnail_width(&mut self) {
        self.thumbnail_width = ::std::option::Option::None;
    }

    pub fn has_thumbnail_width(&self) -> bool {
        self.thumbnail_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_width(&mut self, v: u32) {
        self.thumbnail_width = ::std::option::Option::Some(v);
    }

    // optional uint32 thumbnail_height = 5;

    pub fn get_thumbnail_height(&self) -> u32 {
        self.thumbnail_height.unwrap_or(0)
    }

    pub fn clear_thumbnail_height(&mut self) {
        self.thumbnail_height = ::std::option::Option::None;
    }

    pub fn has_thumbnail_height(&self) -> bool {
        self.thumbnail_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumbnail_height(&mut self, v: u32) {
        self.thumbnail_height = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_SendThumbnailToRelay_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.thumbnail_upload_token)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.thumbnail_data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_width = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_height = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.thumbnail_upload_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.thumbnail_broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.thumbnail_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.thumbnail_width {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thumbnail_height {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.thumbnail_upload_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.thumbnail_broadcast_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.thumbnail_data.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.thumbnail_width {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.thumbnail_height {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_SendThumbnailToRelay_Notification {
        CBroadcast_SendThumbnailToRelay_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "thumbnail_upload_token",
                |m: &CBroadcast_SendThumbnailToRelay_Notification| { &m.thumbnail_upload_token },
                |m: &mut CBroadcast_SendThumbnailToRelay_Notification| { &mut m.thumbnail_upload_token },
                CBroadcast_SendThumbnailToRelay_Notification::get_thumbnail_upload_token,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "thumbnail_broadcast_session_id",
                |m: &CBroadcast_SendThumbnailToRelay_Notification| { &m.thumbnail_broadcast_session_id },
                |m: &mut CBroadcast_SendThumbnailToRelay_Notification| { &mut m.thumbnail_broadcast_session_id },
                CBroadcast_SendThumbnailToRelay_Notification::get_thumbnail_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "thumbnail_data",
                |m: &CBroadcast_SendThumbnailToRelay_Notification| { &m.thumbnail_data },
                |m: &mut CBroadcast_SendThumbnailToRelay_Notification| { &mut m.thumbnail_data },
                CBroadcast_SendThumbnailToRelay_Notification::get_thumbnail_data,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "thumbnail_width",
                |m: &CBroadcast_SendThumbnailToRelay_Notification| { &m.thumbnail_width },
                |m: &mut CBroadcast_SendThumbnailToRelay_Notification| { &mut m.thumbnail_width },
                CBroadcast_SendThumbnailToRelay_Notification::get_thumbnail_width,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "thumbnail_height",
                |m: &CBroadcast_SendThumbnailToRelay_Notification| { &m.thumbnail_height },
                |m: &mut CBroadcast_SendThumbnailToRelay_Notification| { &mut m.thumbnail_height },
                CBroadcast_SendThumbnailToRelay_Notification::get_thumbnail_height,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_SendThumbnailToRelay_Notification>(
                "CBroadcast_SendThumbnailToRelay_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_SendThumbnailToRelay_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_SendThumbnailToRelay_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_SendThumbnailToRelay_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_SendThumbnailToRelay_Notification {
    fn clear(&mut self) {
        self.thumbnail_upload_token.clear();
        self.thumbnail_broadcast_session_id = ::std::option::Option::None;
        self.thumbnail_data.clear();
        self.thumbnail_width = ::std::option::Option::None;
        self.thumbnail_height = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_SendThumbnailToRelay_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_SendThumbnailToRelay_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCNeedTURNServer_Notification {
    // message fields
    broadcast_session_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCNeedTURNServer_Notification {
    fn default() -> &'a CBroadcast_WebRTCNeedTURNServer_Notification {
        <CBroadcast_WebRTCNeedTURNServer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCNeedTURNServer_Notification {
    pub fn new() -> CBroadcast_WebRTCNeedTURNServer_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_session_id = 1;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCNeedTURNServer_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCNeedTURNServer_Notification {
        CBroadcast_WebRTCNeedTURNServer_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_WebRTCNeedTURNServer_Notification| { &m.broadcast_session_id },
                |m: &mut CBroadcast_WebRTCNeedTURNServer_Notification| { &mut m.broadcast_session_id },
                CBroadcast_WebRTCNeedTURNServer_Notification::get_broadcast_session_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCNeedTURNServer_Notification>(
                "CBroadcast_WebRTCNeedTURNServer_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCNeedTURNServer_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCNeedTURNServer_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCNeedTURNServer_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCNeedTURNServer_Notification {
    fn clear(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCNeedTURNServer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCNeedTURNServer_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCStart_Notification {
    // message fields
    broadcast_session_id: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    viewer_steamid: ::std::option::Option<u64>,
    viewer_token: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCStart_Notification {
    fn default() -> &'a CBroadcast_WebRTCStart_Notification {
        <CBroadcast_WebRTCStart_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCStart_Notification {
    pub fn new() -> CBroadcast_WebRTCStart_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_session_id = 1;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_steamid = 3;

    pub fn get_viewer_steamid(&self) -> u64 {
        self.viewer_steamid.unwrap_or(0)
    }

    pub fn clear_viewer_steamid(&mut self) {
        self.viewer_steamid = ::std::option::Option::None;
    }

    pub fn has_viewer_steamid(&self) -> bool {
        self.viewer_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_steamid(&mut self, v: u64) {
        self.viewer_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 viewer_token = 4;

    pub fn get_viewer_token(&self) -> u64 {
        self.viewer_token.unwrap_or(0)
    }

    pub fn clear_viewer_token(&mut self) {
        self.viewer_token = ::std::option::Option::None;
    }

    pub fn has_viewer_token(&self) -> bool {
        self.viewer_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewer_token(&mut self, v: u64) {
        self.viewer_token = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCStart_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.viewer_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.viewer_steamid {
            my_size += 9;
        }
        if let Some(v) = self.viewer_token {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.viewer_steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.viewer_token {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCStart_Notification {
        CBroadcast_WebRTCStart_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_WebRTCStart_Notification| { &m.broadcast_session_id },
                |m: &mut CBroadcast_WebRTCStart_Notification| { &mut m.broadcast_session_id },
                CBroadcast_WebRTCStart_Notification::get_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCStart_Notification| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCStart_Notification| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCStart_Notification::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_steamid",
                |m: &CBroadcast_WebRTCStart_Notification| { &m.viewer_steamid },
                |m: &mut CBroadcast_WebRTCStart_Notification| { &mut m.viewer_steamid },
                CBroadcast_WebRTCStart_Notification::get_viewer_steamid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "viewer_token",
                |m: &CBroadcast_WebRTCStart_Notification| { &m.viewer_token },
                |m: &mut CBroadcast_WebRTCStart_Notification| { &mut m.viewer_token },
                CBroadcast_WebRTCStart_Notification::get_viewer_token,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCStart_Notification>(
                "CBroadcast_WebRTCStart_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCStart_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCStart_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCStart_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCStart_Notification {
    fn clear(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.viewer_steamid = ::std::option::Option::None;
        self.viewer_token = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCStart_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCStart_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCSetAnswer_Notification {
    // message fields
    broadcast_session_id: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    answer: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCSetAnswer_Notification {
    fn default() -> &'a CBroadcast_WebRTCSetAnswer_Notification {
        <CBroadcast_WebRTCSetAnswer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCSetAnswer_Notification {
    pub fn new() -> CBroadcast_WebRTCSetAnswer_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_session_id = 1;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }

    // optional string answer = 3;

    pub fn get_answer(&self) -> &str {
        match self.answer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_answer(&mut self) {
        self.answer.clear();
    }

    pub fn has_answer(&self) -> bool {
        self.answer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_answer(&mut self, v: ::std::string::String) {
        self.answer = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer(&mut self) -> &mut ::std::string::String {
        if self.answer.is_none() {
            self.answer.set_default();
        }
        self.answer.as_mut().unwrap()
    }

    // Take field
    pub fn take_answer(&mut self) -> ::std::string::String {
        self.answer.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCSetAnswer_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.answer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.answer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.answer.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCSetAnswer_Notification {
        CBroadcast_WebRTCSetAnswer_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_WebRTCSetAnswer_Notification| { &m.broadcast_session_id },
                |m: &mut CBroadcast_WebRTCSetAnswer_Notification| { &mut m.broadcast_session_id },
                CBroadcast_WebRTCSetAnswer_Notification::get_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCSetAnswer_Notification| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCSetAnswer_Notification| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCSetAnswer_Notification::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "answer",
                |m: &CBroadcast_WebRTCSetAnswer_Notification| { &m.answer },
                |m: &mut CBroadcast_WebRTCSetAnswer_Notification| { &mut m.answer },
                CBroadcast_WebRTCSetAnswer_Notification::get_answer,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCSetAnswer_Notification>(
                "CBroadcast_WebRTCSetAnswer_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCSetAnswer_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCSetAnswer_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCSetAnswer_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCSetAnswer_Notification {
    fn clear(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.answer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCSetAnswer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCSetAnswer_Notification {
}

#[derive(PartialEq,Clone,Default)]
pub struct CBroadcast_WebRTCAddViewerCandidate_Notification {
    // message fields
    broadcast_session_id: ::std::option::Option<u64>,
    webrtc_session_id: ::std::option::Option<u64>,
    pub candidate: ::protobuf::SingularPtrField<CBroadcast_WebRTC_Candidate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CBroadcast_WebRTCAddViewerCandidate_Notification {
    fn default() -> &'a CBroadcast_WebRTCAddViewerCandidate_Notification {
        <CBroadcast_WebRTCAddViewerCandidate_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CBroadcast_WebRTCAddViewerCandidate_Notification {
    pub fn new() -> CBroadcast_WebRTCAddViewerCandidate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 broadcast_session_id = 1;

    pub fn get_broadcast_session_id(&self) -> u64 {
        self.broadcast_session_id.unwrap_or(0)
    }

    pub fn clear_broadcast_session_id(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
    }

    pub fn has_broadcast_session_id(&self) -> bool {
        self.broadcast_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_broadcast_session_id(&mut self, v: u64) {
        self.broadcast_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 webrtc_session_id = 2;

    pub fn get_webrtc_session_id(&self) -> u64 {
        self.webrtc_session_id.unwrap_or(0)
    }

    pub fn clear_webrtc_session_id(&mut self) {
        self.webrtc_session_id = ::std::option::Option::None;
    }

    pub fn has_webrtc_session_id(&self) -> bool {
        self.webrtc_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webrtc_session_id(&mut self, v: u64) {
        self.webrtc_session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CBroadcast_WebRTCAddViewerCandidate_Notification {
    fn is_initialized(&self) -> bool {
        for v in &self.candidate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.webrtc_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into::<CBroadcast_WebRTC_Candidate, _>(wire_type, is, &mut self.candidate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.broadcast_session_id {
            my_size += 9;
        }
        if let Some(v) = self.webrtc_session_id {
            my_size += 9;
        }
        if let Some(v) = self.candidate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.broadcast_session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.webrtc_session_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.candidate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CBroadcast_WebRTCAddViewerCandidate_Notification {
        CBroadcast_WebRTCAddViewerCandidate_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "broadcast_session_id",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Notification| { &m.broadcast_session_id },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Notification| { &mut m.broadcast_session_id },
                CBroadcast_WebRTCAddViewerCandidate_Notification::get_broadcast_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeFixed64, _>(
                "webrtc_session_id",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Notification| { &m.webrtc_session_id },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Notification| { &mut m.webrtc_session_id },
                CBroadcast_WebRTCAddViewerCandidate_Notification::get_webrtc_session_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CBroadcast_WebRTC_Candidate>, _>(
                "candidate",
                |m: &CBroadcast_WebRTCAddViewerCandidate_Notification| { &m.candidate },
                |m: &mut CBroadcast_WebRTCAddViewerCandidate_Notification| { &mut m.candidate },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CBroadcast_WebRTCAddViewerCandidate_Notification>(
                "CBroadcast_WebRTCAddViewerCandidate_Notification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CBroadcast_WebRTCAddViewerCandidate_Notification {
        static instance: ::protobuf::rt::Lazy<CBroadcast_WebRTCAddViewerCandidate_Notification> = ::protobuf::rt::Lazy::INIT;
        instance.get(CBroadcast_WebRTCAddViewerCandidate_Notification::new)
    }
}

impl ::protobuf::Clear for CBroadcast_WebRTCAddViewerCandidate_Notification {
    fn clear(&mut self) {
        self.broadcast_session_id = ::std::option::Option::None;
        self.webrtc_session_id = ::std::option::Option::None;
        self.candidate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CBroadcast_WebRTCAddViewerCandidate_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBroadcast_WebRTCAddViewerCandidate_Notification {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EBroadcastWatchLocation {
    k_EBroadcastWatchLocation_Invalid = 0,
    k_EBroadcastWatchLocation_SteamTV_Tab = 1,
    k_EBroadcastWatchLocation_SteamTV_WatchParty = 2,
    k_EBroadcastWatchLocation_Chat_Tab = 3,
    k_EBroadcastWatchLocation_Chat_WatchParty = 4,
    k_EBroadcastWatchLocation_CommunityPage = 5,
    k_EBroadcastWatchLocation_StoreAppPage = 6,
    k_EBroadcastWatchLocation_InGame = 7,
    k_EBroadcastWatchLocation_BigPicture = 8,
    k_EBroadcastWatchLocation_SalesPage = 9,
    k_EBroadcastWatchLocation_CuratorPage = 10,
    k_EBroadcastWatchLocation_DeveloperPage = 11,
    k_EBroadcastWatchLocation_Chat_Friends = 12,
    k_EBroadcastWatchLocation_SteamTV_Web = 13,
}

impl ::protobuf::ProtobufEnum for EBroadcastWatchLocation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EBroadcastWatchLocation> {
        match value {
            0 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid),
            1 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_Tab),
            2 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_WatchParty),
            3 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_Tab),
            4 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_WatchParty),
            5 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_CommunityPage),
            6 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_StoreAppPage),
            7 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_InGame),
            8 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_BigPicture),
            9 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_SalesPage),
            10 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_CuratorPage),
            11 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_DeveloperPage),
            12 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_Friends),
            13 => ::std::option::Option::Some(EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_Web),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EBroadcastWatchLocation] = &[
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_Tab,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_WatchParty,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_Tab,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_WatchParty,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_CommunityPage,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_StoreAppPage,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_InGame,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_BigPicture,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_SalesPage,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_CuratorPage,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_DeveloperPage,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_Chat_Friends,
            EBroadcastWatchLocation::k_EBroadcastWatchLocation_SteamTV_Web,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EBroadcastWatchLocation>("EBroadcastWatchLocation", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EBroadcastWatchLocation {
    fn default() -> Self {
        EBroadcastWatchLocation::k_EBroadcastWatchLocation_Invalid
    }
}

impl ::protobuf::reflect::ProtobufValue for EBroadcastWatchLocation {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum EBroadcastChatPermission {
    k_EBroadcastChatPermissionPublic = 0,
    k_EBroadcastChatPermissionOwnsApp = 1,
}

impl ::protobuf::ProtobufEnum for EBroadcastChatPermission {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EBroadcastChatPermission> {
        match value {
            0 => ::std::option::Option::Some(EBroadcastChatPermission::k_EBroadcastChatPermissionPublic),
            1 => ::std::option::Option::Some(EBroadcastChatPermission::k_EBroadcastChatPermissionOwnsApp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EBroadcastChatPermission] = &[
            EBroadcastChatPermission::k_EBroadcastChatPermissionPublic,
            EBroadcastChatPermission::k_EBroadcastChatPermissionOwnsApp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<EBroadcastChatPermission>("EBroadcastChatPermission", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for EBroadcastChatPermission {
    fn default() -> Self {
        EBroadcastChatPermission::k_EBroadcastChatPermissionPublic
    }
}

impl ::protobuf::reflect::ProtobufValue for EBroadcastChatPermission {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)steammessages_broadcast.steamclient.proto\x1a,steammessages_unified_b\
    ase.steamclient.proto\"\xbf\x02\n(CBroadcast_BeginBroadcastSession_Reque\
    st\x12\x1e\n\npermission\x18\x01\x20\x01(\x05R\npermission\x12\x16\n\x06\
    gameid\x18\x02\x20\x01(\x04R\x06gameid\x12,\n\x12client_instance_id\x18\
    \x03\x20\x01(\x04R\x10clientInstanceId\x12\x14\n\x05title\x18\x04\x20\
    \x01(\tR\x05title\x12\x16\n\x06cellid\x18\x05\x20\x01(\rR\x06cellid\x12\
    \x1d\n\nrtmp_token\x18\x06\x20\x01(\x04R\trtmpToken\x12)\n\x10thumbnail_\
    upload\x18\x07\x20\x01(\x08R\x0fthumbnailUpload\x12\x1f\n\x0bclient_beta\
    \x18\x08\x20\x01(\tR\nclientBeta\x12\x14\n\x05sysid\x18\t\x20\x01(\rR\
    \x05sysid\"\x8b\x04\n)CBroadcast_BeginBroadcastSession_Response\x12!\n\
    \x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadcastId\x12h\n\x18thumbnai\
    l_upload_address\x18\x02\x20\x01(\tR\x16thumbnailUploadAddressB.\x82\xb5\
    \x18*Http\x20address\x20to\x20upload\x20the\x20thumbnail\x20data.\x12{\n\
    \x16thumbnail_upload_token\x18\x03\x20\x01(\tR\x14thumbnailUploadTokenBE\
    \x82\xb5\x18Atoken\x20to\x20authorize\x20as\x20broadcaster\x20to\x20uplo\
    ad\x20content\x20to\x20the\x20relay.\x12e\n\x1athumbnail_interval_second\
    s\x18\x04\x20\x01(\rR\x18thumbnailIntervalSecondsB'\x82\xb5\x18#how\x20m\
    any\x20seconds\x20between\x20thumbnails\x12m\n\x1aheartbeat_interval_sec\
    onds\x18\x05\x20\x01(\rR\x18heartbeatIntervalSecondsB/\x82\xb5\x18+how\
    \x20many\x20seconds\x20between\x20session\x20heartbeats\"K\n&CBroadcast_\
    EndBroadcastSession_Request\x12!\n\x0cbroadcast_id\x18\x01\x20\x01(\x06R\
    \x0bbroadcastId\")\n'CBroadcast_EndBroadcastSession_Response\"\xe0\x02\n\
    'CBroadcast_StartBroadcastUpload_Request\x12!\n\x0cbroadcast_id\x18\x01\
    \x20\x01(\x06R\x0bbroadcastId\x12\x16\n\x06cellid\x18\x02\x20\x01(\rR\
    \x06cellid\x12\x17\n\x07as_rtmp\x18\x03\x20\x01(\x08R\x06asRtmp\x12#\n\r\
    delay_seconds\x18\x04\x20\x01(\rR\x0cdelaySeconds\x12]\n\nrtmp_token\x18\
    \x05\x20\x01(\x04:\x010R\trtmpTokenB;\x82\xb5\x187Only\x20set\x20during\
    \x20RTMP\x20uploads;\x20secret\x20key\x20from\x20the\x20user.\x12*\n\x11\
    upload_ip_address\x18\x06\x20\x01(\rR\x0fuploadIpAddress\x12\x1b\n\tis_r\
    eplay\x18\x07\x20\x01(\x08R\x08isReplay\x12\x14\n\x05sysid\x18\x08\x20\
    \x01(\rR\x05sysid\"\xec\x01\n(CBroadcast_StartBroadcastUpload_Response\
    \x12!\n\x0cupload_token\x18\x01\x20\x01(\tR\x0buploadToken\x12%\n\x0eupl\
    oad_address\x18\x02\x20\x01(\tR\ruploadAddress\x12.\n\x13broadcast_uploa\
    d_id\x18\x03\x20\x01(\x06R\x11broadcastUploadId\x12#\n\renable_replay\
    \x18\x06\x20\x01(\x08R\x0cenableReplay\x12!\n\x0chttp_address\x18\x07\
    \x20\x01(\tR\x0bhttpAddress\"\x88\x01\n1CBroadcast_NotifyBroadcastUpload\
    Stop_Notification\x12.\n\x13broadcast_upload_id\x18\x01\x20\x01(\x06R\
    \x11broadcastUploadId\x12#\n\rupload_result\x18\x02\x20\x01(\rR\x0cuploa\
    dResult\"\xf6\x03\n!CBroadcast_WatchBroadcast_Request\x122\n\x07steamid\
    \x18\x01\x20\x01(\x06R\x07steamidB\x18\x82\xb5\x18\x14broadcaster\x20ste\
    amID.\x12m\n\x15existing_broadcast_id\x18\x02\x20\x01(\x06R\x13existingB\
    roadcastIdB9\x82\xb5\x185broadcast\x20session\x20ID\x20(optional,\x20rej\
    oin\x20if\x20specified).\x12o\n\x0cviewer_token\x18\x03\x20\x01(\x06R\
    \x0bviewerTokenBL\x82\xb5\x18Hviewer\x20token\x20received\x20from\x20las\
    t\x20WatchRequest\x20call,\x20from\x20browser\x20storage.\x12\x1b\n\tcli\
    ent_ip\x18\x04\x20\x01(\rR\x08clientIp\x12\x1f\n\x0bclient_cell\x18\x05\
    \x20\x01(\rR\nclientCell\x12b\n\x0ewatch_location\x18\x06\x20\x01(\x0e2\
    \x18.EBroadcastWatchLocation:!k_EBroadcastWatchLocation_InvalidR\rwatchL\
    ocation\x12\x1b\n\tis_webrtc\x18\x07\x20\x01(\x08R\x08isWebrtc\"\xc6\t\n\
    \"CBroadcast_WatchBroadcast_Response\x12e\n\x08response\x18\x01\x20\x01(\
    \x0e22.CBroadcast_WatchBroadcast_Response.EWatchResponse:\x15k_EWatchRes\
    ponseReadyR\x08response\x12\x17\n\x07mpd_url\x18\x02\x20\x01(\tR\x06mpdU\
    rl\x12!\n\x0cbroadcast_id\x18\x03\x20\x01(\x06R\x0bbroadcastId\x12\x16\n\
    \x06gameid\x18\x04\x20\x01(\x04R\x06gameid\x12\x14\n\x05title\x18\x05\
    \x20\x01(\tR\x05title\x12\x1f\n\x0bnum_viewers\x18\x06\x20\x01(\rR\nnumV\
    iewers\x12\x1e\n\npermission\x18\x07\x20\x01(\x05R\npermission\x12\x17\n\
    \x07is_rtmp\x18\x08\x20\x01(\x08R\x06isRtmp\x12#\n\rseconds_delay\x18\t\
    \x20\x01(\x05R\x0csecondsDelay\x12!\n\x0cviewer_token\x18\n\x20\x01(\x06\
    R\x0bviewerToken\x12-\n\x13hls_m3u8_master_url\x18\x0b\x20\x01(\tR\x10hl\
    sM3u8MasterUrl\x12-\n\x12heartbeat_interval\x18\x0c\x20\x01(\x05R\x11hea\
    rtbeatInterval\x12#\n\rthumbnail_url\x18\r\x20\x01(\tR\x0cthumbnailUrl\
    \x12\x1b\n\tis_webrtc\x18\x0e\x20\x01(\x08R\x08isWebrtc\x12*\n\x11webrtc\
    _session_id\x18\x0f\x20\x01(\x06R\x0fwebrtcSessionId\x12(\n\x10webrtc_of\
    fer_sdp\x18\x10\x20\x01(\tR\x0ewebrtcOfferSdp\x12,\n\x12webrtc_turn_serv\
    er\x18\x11\x20\x01(\tR\x10webrtcTurnServer\x12\x1b\n\tis_replay\x18\x12\
    \x20\x01(\x08R\x08isReplay\x12\x1a\n\x08duration\x18\x13\x20\x01(\x05R\
    \x08duration\"\xcf\x03\n\x0eEWatchResponse\x12\x19\n\x15k_EWatchResponse\
    Ready\x10\x01\x12\x20\n\x1ck_EWatchResponseNotAvailable\x10\x02\x12&\n\"\
    k_EWatchResponseWaitingForApproval\x10\x03\x12#\n\x1fk_EWatchResponseWai\
    tingForStart\x10\x04\x12\"\n\x1ek_EWatchResponseInvalidSession\x10\x05\
    \x12%\n!k_EWatchResponseTooManyBroadcasts\x10\x06\x12'\n#k_EWatchRespons\
    eWaitingForReconnect\x10\x07\x12&\n\"k_EWatchResponseSystemNotSupported\
    \x10\x08\x12\"\n\x1ek_EWatchResponseUserRestricted\x10\t\x12#\n\x1fk_EWa\
    tchResponseClientOutOfDate\x10\n\x12%\n!k_EWatchResponsePoorUploadQualit\
    y\x10\x0b\x12'\n#k_EWatchResponseMissingSubscription\x10\x0c\"\xe1\x02\n\
    *CBroadcast_HeartbeatBroadcast_Notification\x122\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamidB\x18\x82\xb5\x18\x14broadcaster\x20steamID.\
    \x12<\n\x0cbroadcast_id\x18\x02\x20\x01(\x06R\x0bbroadcastIdB\x19\x82\
    \xb5\x18\x15broadcast\x20session\x20ID.\x12o\n\x0cviewer_token\x18\x03\
    \x20\x01(\x06R\x0bviewerTokenBL\x82\xb5\x18Hviewer\x20token\x20received\
    \x20from\x20last\x20WatchRequest\x20call,\x20from\x20browser\x20storage.\
    \x12P\n\x0erepresentation\x18\x04\x20\x01(\rR\x0erepresentationB(\x82\
    \xb5\x18$video\x20stream\x20representation\x20watching\"\x92\x02\n-CBroa\
    dcast_StopWatchingBroadcast_Notification\x122\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamidB\x18\x82\xb5\x18\x14broadcaster\x20steamID.\x12<\n\
    \x0cbroadcast_id\x18\x02\x20\x01(\x06R\x0bbroadcastIdB\x19\x82\xb5\x18\
    \x15broadcast\x20session\x20ID.\x12o\n\x0cviewer_token\x18\x03\x20\x01(\
    \x06R\x0bviewerTokenBL\x82\xb5\x18Hviewer\x20token\x20received\x20from\
    \x20last\x20WatchRequest\x20call,\x20from\x20browser\x20storage.\"\xc6\
    \x01\n%CBroadcast_GetBroadcastStatus_Request\x122\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamidB\x18\x82\xb5\x18\x14broadcaster\x20steamID.\
    \x12i\n\x0cbroadcast_id\x18\x02\x20\x01(\x06R\x0bbroadcastIdBF\x82\xb5\
    \x18Bbroadcast\x20session\x20ID\x20to\x20proof\x20that\x20user\x20is\x20\
    allowed\x20to\x20see\x20details.\"\xfe\x03\n&CBroadcast_GetBroadcastStat\
    us_Response\x12\x16\n\x06gameid\x18\x01\x20\x01(\x04R\x06gameid\x12\x14\
    \n\x05title\x18\x02\x20\x01(\tR\x05title\x12\x1f\n\x0bnum_viewers\x18\
    \x03\x20\x01(\rR\nnumViewers\x12\x1e\n\npermission\x18\x04\x20\x01(\x05R\
    \npermission\x12\x17\n\x07is_rtmp\x18\x05\x20\x01(\x08R\x06isRtmp\x12#\n\
    \rseconds_delay\x18\x06\x20\x01(\x05R\x0csecondsDelay\x12!\n\x0cis_publi\
    sher\x18\x07\x20\x01(\x08R\x0bisPublisher\x12#\n\rthumbnail_url\x18\x08\
    \x20\x01(\tR\x0cthumbnailUrl\x12'\n\x0fupdate_interval\x18\t\x20\x01(\
    \x05R\x0eupdateInterval\x12!\n\x0cis_uploading\x18\n\x20\x01(\x08R\x0bis\
    Uploading\x12\x1a\n\x08duration\x18\x0b\x20\x01(\rR\x08duration\x12\x1b\
    \n\tis_replay\x18\x0c\x20\x01(\x08R\x08isReplay\x12(\n\x10is_capturing_v\
    od\x18\r\x20\x01(\x08R\x0eisCapturingVod\x120\n\x14is_store_whitelisted\
    \x18\x0e\x20\x01(\x08R\x12isStoreWhitelisted\"g\n(CBroadcast_GetBroadcas\
    tThumbnail_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\
    \x12!\n\x0cbroadcast_id\x18\x02\x20\x01(\x06R\x0bbroadcastId\"\xb6\x01\n\
    )CBroadcast_GetBroadcastThumbnail_Response\x12#\n\rthumbnail_url\x18\x01\
    \x20\x01(\tR\x0cthumbnailUrl\x12'\n\x0fupdate_interval\x18\x02\x20\x01(\
    \x05R\x0eupdateInterval\x12\x1f\n\x0bnum_viewers\x18\x03\x20\x01(\x05R\n\
    numViewers\x12\x1a\n\x08duration\x18\x04\x20\x01(\x05R\x08duration\"m\n$\
    CBroadcast_InviteToBroadcast_Request\x12\x18\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamid\x12+\n\x11approval_response\x18\x02\x20\x01(\x08R\
    \x10approvalResponse\"A\n%CBroadcast_InviteToBroadcast_Response\x12\x18\
    \n\x07success\x18\x01\x20\x01(\x08R\x07success\"\xa7\x01\n-CBroadcast_Se\
    ndBroadcastStateToServer_Request\x12\x1e\n\npermission\x18\x01\x20\x01(\
    \x05R\npermission\x12\x16\n\x06gameid\x18\x02\x20\x01(\x04R\x06gameid\
    \x12\x14\n\x05title\x18\x03\x20\x01(\tR\x05title\x12(\n\x10game_data_con\
    fig\x18\x04\x20\x01(\tR\x0egameDataConfig\"0\n.CBroadcast_SendBroadcastS\
    tateToServer_Response\"\\\n7CBroadcast_NotifyBroadcastSessionHeartbeat_N\
    otification\x12!\n\x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadcastId\
    \"\xa4\x01\n'CBroadcast_GetBroadcastChatInfo_Request\x12\x18\n\x07steami\
    d\x18\x01\x20\x01(\x06R\x07steamid\x12!\n\x0cbroadcast_id\x18\x02\x20\
    \x01(\x06R\x0bbroadcastId\x12\x1b\n\tclient_ip\x18\x03\x20\x01(\rR\x08cl\
    ientIp\x12\x1f\n\x0bclient_cell\x18\x04\x20\x01(\rR\nclientCell\"\x97\
    \x01\n(CBroadcast_GetBroadcastChatInfo_Response\x12\x17\n\x07chat_id\x18\
    \x01\x20\x01(\x06R\x06chatId\x12*\n\x11view_url_template\x18\x03\x20\x01\
    (\tR\x0fviewUrlTemplate\x12&\n\x0fflair_group_ids\x18\x04\x20\x03(\rR\rf\
    lairGroupIds\"x\n\"CBroadcast_PostChatMessage_Request\x12\x17\n\x07chat_\
    id\x18\x01\x20\x01(\x06R\x06chatId\x12\x18\n\x07message\x18\x02\x20\x01(\
    \tR\x07message\x12\x1f\n\x0binstance_id\x18\x03\x20\x01(\rR\ninstanceId\
    \"\xad\x01\n#CBroadcast_PostChatMessage_Response\x12!\n\x0cpersona_name\
    \x18\x01\x20\x01(\tR\x0bpersonaName\x12\x17\n\x07in_game\x18\x02\x20\x01\
    (\x08R\x06inGame\x12\x16\n\x06result\x18\x03\x20\x01(\x05R\x06result\x12\
    2\n\x15cooldown_time_seconds\x18\x04\x20\x01(\x05R\x13cooldownTimeSecond\
    s\"Z\n)CBroadcast_UpdateChatMessageFlair_Request\x12\x17\n\x07chat_id\
    \x18\x01\x20\x01(\x06R\x06chatId\x12\x14\n\x05flair\x18\x02\x20\x01(\tR\
    \x05flair\"s\n*CBroadcast_UpdateChatMessageFlair_Response\x12\x16\n\x06r\
    esult\x18\x01\x20\x01(\x05R\x06result\x12\x17\n\x07chat_id\x18\x02\x20\
    \x01(\x06R\x06chatId\x12\x14\n\x05flair\x18\x03\x20\x01(\tR\x05flair\"|\
    \n(CBroadcast_MuteBroadcastChatUser_Request\x12\x17\n\x07chat_id\x18\x01\
    \x20\x01(\x06R\x06chatId\x12!\n\x0cuser_steamid\x18\x02\x20\x01(\x06R\
    \x0buserSteamid\x12\x14\n\x05muted\x18\x03\x20\x01(\x08R\x05muted\"+\n)C\
    Broadcast_MuteBroadcastChatUser_Response\"c\n%CBroadcast_RemoveUserChatT\
    ext_Request\x12\x17\n\x07chat_id\x18\x01\x20\x01(\x06R\x06chatId\x12!\n\
    \x0cuser_steamid\x18\x02\x20\x01(\x06R\x0buserSteamid\"(\n&CBroadcast_Re\
    moveUserChatText_Response\"j\n,CBroadcast_GetBroadcastChatUserNames_Requ\
    est\x12\x17\n\x07chat_id\x18\x01\x20\x01(\x06R\x06chatId\x12!\n\x0cuser_\
    steamid\x18\x02\x20\x03(\x06R\x0buserSteamid\"\xd4\x01\n-CBroadcast_GetB\
    roadcastChatUserNames_Response\x12_\n\rpersona_names\x18\x01\x20\x03(\
    \x0b2:.CBroadcast_GetBroadcastChatUserNames_Response.PersonaNameR\x0cper\
    sonaNames\x1aB\n\x0bPersonaName\x12\x19\n\x08steam_id\x18\x01\x20\x01(\
    \x06R\x07steamId\x12\x18\n\x07persona\x18\x02\x20\x01(\tR\x07persona\"\
    \xe2\x01\n!CBroadcast_StartBuildClip_Request\x12\x18\n\x07steamid\x18\
    \x01\x20\x01(\x06R\x07steamid\x120\n\x14broadcast_session_id\x18\x02\x20\
    \x01(\x06R\x12broadcastSessionId\x12#\n\rfirst_segment\x18\x03\x20\x01(\
    \x05R\x0cfirstSegment\x12!\n\x0cnum_segments\x18\x04\x20\x01(\x05R\x0bnu\
    mSegments\x12)\n\x10clip_description\x18\x05\x20\x01(\tR\x0fclipDescript\
    ion\"P\n\"CBroadcast_StartBuildClip_Response\x12*\n\x11broadcast_clip_id\
    \x18\x01\x20\x01(\x06R\x0fbroadcastClipId\"S\n%CBroadcast_GetBuildClipSt\
    atus_Request\x12*\n\x11broadcast_clip_id\x18\x01\x20\x01(\x06R\x0fbroadc\
    astClipId\"(\n&CBroadcast_GetBuildClipStatus_Response\"\xf9\x01\n!CBroad\
    cast_SetClipDetails_Request\x127\n\x11broadcast_clip_id\x18\x01\x20\x01(\
    \x04R\x0fbroadcastClipIdB\x0b\x82\xb5\x18\x07Clip\x20ID\x129\n\nstart_ti\
    me\x18\x02\x20\x01(\rR\tstartTimeB\x1a\x82\xb5\x18\x16start\x20time\x20o\
    f\x20the\x20clip\x123\n\x08end_time\x18\x03\x20\x01(\rR\x07endTimeB\x18\
    \x82\xb5\x18\x14end\x20time\x20of\x20the\x20clip\x12+\n\x11video_descrip\
    tion\x18\x04\x20\x01(\tR\x10videoDescription\"$\n\"CBroadcast_SetClipDet\
    ails_Response\"y\n!CBroadcast_GetClipDetails_Request\x12T\n\x11broadcast\
    _clip_id\x18\x01\x20\x01(\x04R\x0fbroadcastClipIdB(\x82\xb5\x18$List\x20\
    of\x20clip\x20IDs\x20we\x20want\x20details\x20for\"\xe5\x05\n\"CBroadcas\
    t_GetClipDetails_Response\x12A\n\x11broadcast_clip_id\x18\x01\x20\x01(\
    \x04R\x0fbroadcastClipIdB\x15\x82\xb5\x18\x11broadcast\x20clip\x20ID\x12\
    7\n\x08video_id\x18\x02\x20\x01(\x04R\x07videoIdB\x1c\x82\xb5\x18\x18mat\
    ching\x20unique\x20video\x20ID\x127\n\nchannel_id\x18\x03\x20\x01(\x04R\
    \tchannelIdB\x18\x82\xb5\x18\x14Broadcast\x20Channel\x20ID\x127\n\x06app\
    _id\x18\x04\x20\x01(\rR\x05appIdB\x20\x82\xb5\x18\x1cApp\x20ID\x20stream\
    \x20is\x20tagged\x20with\x12R\n\x15accountid_broadcaster\x18\x05\x20\x01\
    (\rR\x14accountidBroadcasterB\x1d\x82\xb5\x18\x19Account\x20ID\x20of\x20\
    broadcaster\x12M\n\x13accountid_clipmaker\x18\x06\x20\x01(\rR\x12account\
    idClipmakerB\x1c\x82\xb5\x18\x18Account\x20ID\x20of\x20clip-maker\x12W\n\
    \x11video_description\x18\x07\x20\x01(\tR\x10videoDescriptionB*\x82\xb5\
    \x18&Short\x20name\x20or\x20description\x20of\x20this\x20clip\x12F\n\nst\
    art_time\x18\x08\x20\x01(\rR\tstartTimeB'\x82\xb5\x18#Wall\x20time\x20cl\
    ip\x20was\x20broadcasted\x20live\x12J\n\x13length_milliseconds\x18\t\x20\
    \x01(\rR\x12lengthMillisecondsB\x19\x82\xb5\x18\x15length\x20of\x20video\
    \x20in\x20MS\x12A\n\x0ethumbnail_path\x18\n\x20\x01(\tR\rthumbnailPathB\
    \x1a\x82\xb5\x18\x16Path\x20for\x20thumbnail\x20URL\"\xdb\x05\n\x1eCBroa\
    dcast_SetRTMPInfo_Request\x121\n\x14broadcast_permission\x18\x01\x20\x01\
    (\x05R\x13broadcastPermission\x12!\n\x0cupdate_token\x18\x02\x20\x01(\
    \x08R\x0bupdateToken\x12'\n\x0fbroadcast_delay\x18\x03\x20\x01(\x05R\x0e\
    broadcastDelay\x12\x15\n\x06app_id\x18\x04\x20\x01(\rR\x05appId\x12&\n\
    \x0frequired_app_id\x18\x05\x20\x01(\rR\rrequiredAppId\x12\xb5\x01\n\x19\
    broadcast_chat_permission\x18\x06\x20\x01(\x0e2\x19.EBroadcastChatPermis\
    sion:\x20k_EBroadcastChatPermissionPublicR\x17broadcastChatPermissionB<\
    \x82\xb5\x188Who\x20is\x20permitted\x20to\x20send\x20a\x20chat\x20messag\
    e\x20during\x20broadcast\x12_\n\x10broadcast_buffer\x18\x07\x20\x01(\x05\
    R\x0fbroadcastBufferB4\x82\xb5\x180Previous\x20seconds\x20we\x20keep\x20\
    of\x20the\x20stream\x20available\x12G\n\x07steamid\x18\x08\x20\x01(\x06R\
    \x07steamidB-\x82\xb5\x18)broadcaster\x20steamID\x20if\x20not\x20logged-\
    in\x20user\x12R\n\x0fchat_rate_limit\x18\t\x20\x01(\rR\rchatRateLimitB*\
    \x82\xb5\x18&Seconds\x20required\x20between\x20chat\x20messages\x12E\n\r\
    enable_replay\x18\n\x20\x01(\x08R\x0cenableReplayB\x20\x82\xb5\x18\x1cEn\
    able\x20replay\x20of\x20last\x20upload\"!\n\x1fCBroadcast_SetRTMPInfo_Re\
    sponse\"y\n\x1eCBroadcast_GetRTMPInfo_Request\x12\x0e\n\x02ip\x18\x01\
    \x20\x01(\rR\x02ip\x12G\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamidB-\
    \x82\xb5\x18)broadcaster\x20steamID\x20if\x20not\x20logged-in\x20user\"\
    \xd0\x05\n\x1fCBroadcast_GetRTMPInfo_Response\x121\n\x14broadcast_permis\
    sion\x18\x01\x20\x01(\x05R\x13broadcastPermission\x12\x1b\n\trtmp_host\
    \x18\x02\x20\x01(\tR\x08rtmpHost\x12\x1d\n\nrtmp_token\x18\x03\x20\x01(\
    \tR\trtmpToken\x12'\n\x0fbroadcast_delay\x18\x04\x20\x01(\x05R\x0ebroadc\
    astDelay\x12\x15\n\x06app_id\x18\x05\x20\x01(\rR\x05appId\x12&\n\x0frequ\
    ired_app_id\x18\x06\x20\x01(\rR\rrequiredAppId\x12\xb5\x01\n\x19broadcas\
    t_chat_permission\x18\x07\x20\x01(\x0e2\x19.EBroadcastChatPermission:\
    \x20k_EBroadcastChatPermissionPublicR\x17broadcastChatPermissionB<\x82\
    \xb5\x188Who\x20is\x20permitted\x20to\x20send\x20a\x20chat\x20message\
    \x20during\x20broadcast\x12P\n\x10broadcast_buffer\x18\x08\x20\x01(\x05R\
    \x0fbroadcastBufferB%\x82\xb5\x18!Seconds\x20we\x20keep\x20streams\x20av\
    ailable\x121\n\x07steamid\x18\t\x20\x01(\x06R\x07steamidB\x17\x82\xb5\
    \x18\x13broadcaster\x20steamID\x12R\n\x0fchat_rate_limit\x18\n\x20\x01(\
    \rR\rchatRateLimitB*\x82\xb5\x18&Seconds\x20required\x20between\x20chat\
    \x20messages\x12E\n\renable_replay\x18\x0b\x20\x01(\x08R\x0cenableReplay\
    B\x20\x82\xb5\x18\x1cEnable\x20replay\x20of\x20last\x20upload\"\x81\x01\
    \n,CBroadcast_WebRTCHaveTURNServer_Notification\x120\n\x14broadcast_sess\
    ion_id\x18\x01\x20\x01(\x06R\x12broadcastSessionId\x12\x1f\n\x0bturn_ser\
    ver\x18\x02\x20\x01(\tR\nturnServer\"\xda\x01\n$CBroadcast_WebRTCStartRe\
    sult_Request\x12*\n\x11webrtc_session_id\x18\x01\x20\x01(\x06R\x0fwebrtc\
    SessionId\x12\x18\n\x07started\x18\x02\x20\x01(\x08R\x07started\x12\x14\
    \n\x05offer\x18\x03\x20\x01(\tR\x05offer\x12!\n\x0cresolution_x\x18\x04\
    \x20\x01(\rR\x0bresolutionX\x12!\n\x0cresolution_y\x18\x05\x20\x01(\rR\
    \x0bresolutionY\x12\x10\n\x03fps\x18\x06\x20\x01(\rR\x03fps\"'\n%CBroadc\
    ast_WebRTCStartResult_Response\"N\n\x20CBroadcast_WebRTCStopped_Request\
    \x12*\n\x11webrtc_session_id\x18\x01\x20\x01(\x06R\x0fwebrtcSessionId\"#\
    \n!CBroadcast_WebRTCStopped_Response\"\x99\x01\n\"CBroadcast_WebRTCSetAn\
    swer_Request\x12/\n\x13broadcaster_steamid\x18\x01\x20\x01(\x06R\x12broa\
    dcasterSteamid\x12*\n\x11webrtc_session_id\x18\x02\x20\x01(\x06R\x0fwebr\
    tcSessionId\x12\x16\n\x06answer\x18\x03\x20\x01(\tR\x06answer\"%\n#CBroa\
    dcast_WebRTCSetAnswer_Response\"C\n)CBroadcast_WebRTCLookupTURNServer_Re\
    quest\x12\x16\n\x06cellid\x18\x01\x20\x01(\rR\x06cellid\"M\n*CBroadcast_\
    WebRTCLookupTURNServer_Response\x12\x1f\n\x0bturn_server\x18\x01\x20\x01\
    (\tR\nturnServer\"|\n\x1bCBroadcast_WebRTC_Candidate\x12\x17\n\x07sdp_mi\
    d\x18\x01\x20\x01(\tR\x06sdpMid\x12&\n\x0fsdp_mline_index\x18\x02\x20\
    \x01(\x05R\rsdpMlineIndex\x12\x1c\n\tcandidate\x18\x03\x20\x01(\tR\tcand\
    idate\"\x93\x01\n)CBroadcast_WebRTCAddHostCandidate_Request\x12*\n\x11we\
    brtc_session_id\x18\x01\x20\x01(\x06R\x0fwebrtcSessionId\x12:\n\tcandida\
    te\x18\x02\x20\x01(\x0b2\x1c.CBroadcast_WebRTC_CandidateR\tcandidate\",\
    \n*CBroadcast_WebRTCAddHostCandidate_Response\"\xc6\x01\n+CBroadcast_Web\
    RTCAddViewerCandidate_Request\x12/\n\x13broadcaster_steamid\x18\x01\x20\
    \x01(\x06R\x12broadcasterSteamid\x12*\n\x11webrtc_session_id\x18\x02\x20\
    \x01(\x06R\x0fwebrtcSessionId\x12:\n\tcandidate\x18\x03\x20\x01(\x0b2\
    \x1c.CBroadcast_WebRTC_CandidateR\tcandidate\".\n,CBroadcast_WebRTCAddVi\
    ewerCandidate_Response\"\xbc\x01\n*CBroadcast_WebRTCGetHostCandidates_Re\
    quest\x12/\n\x13broadcaster_steamid\x18\x01\x20\x01(\x06R\x12broadcaster\
    Steamid\x12*\n\x11webrtc_session_id\x18\x02\x20\x01(\x06R\x0fwebrtcSessi\
    onId\x121\n\x14candidate_generation\x18\x03\x20\x01(\rR\x13candidateGene\
    ration\"\x9e\x01\n+CBroadcast_WebRTCGetHostCandidates_Response\x121\n\
    \x14candidate_generation\x18\x01\x20\x01(\rR\x13candidateGeneration\x12<\
    \n\ncandidates\x18\x02\x20\x03(\x0b2\x1c.CBroadcast_WebRTC_CandidateR\nc\
    andidates\"\xd7\x03\n*CBroadcast_GetBroadcastUploadStats_Request\x12D\n\
    \trow_limit\x18\x01\x20\x01(\r:\x03100R\x08rowLimitB\"\x82\xb5\x18\x1eHo\
    w\x20many\x20at\x20maximum\x20to\x20return.\x120\n\nstart_time\x18\x02\
    \x20\x01(\r:\x010R\tstartTimeB\x0e\x82\xb5\x18\nStart\x20time\x12Z\n\tup\
    load_id\x18\x03\x20\x01(\x04R\x08uploadIdB=\x82\xb5\x189Optional\x20rela\
    y\x20upload\x20ID\x20-\x20not\x20compatible\x20with\x20session_id\x12r\n\
    \x07steamid\x18\x04\x20\x01(\x06R\x07steamidBX\x82\xb5\x18TOptional\x20t\
    he\x20steamid\x20whose\x20stats\x20you\x20want,\x20otherwise\x20the\x20u\
    ser\x20logged\x20in\x20-\x20admin\x20only\x12a\n\nsession_id\x18\x05\x20\
    \x01(\x04R\tsessionIdBB\x82\xb5\x18>Optional\x20broadcast\x20session\x20\
    ID\x20-\x20not\x20compatiable\x20with\x20upload_id\"\x9d\x0b\n+CBroadcas\
    t_GetBroadcastUploadStats_Response\x12[\n\x0cupload_stats\x18\x01\x20\
    \x03(\x0b28.CBroadcast_GetBroadcastUploadStats_Response.UploadStatsR\x0b\
    uploadStats\x1a\x90\n\n\x0bUploadStats\x12#\n\rupload_result\x18\x01\x20\
    \x01(\rR\x0cuploadResult\x12D\n\x0ctime_stopped\x18\x02\x20\x01(\rR\x0bt\
    imeStoppedB!\x82\xb5\x18\x1dtime\x20broadcast\x20upload\x20stopped\x12G\
    \n\x10seconds_uploaded\x18\x03\x20\x01(\rR\x0fsecondsUploadedB\x1c\x82\
    \xb5\x18\x18seconds\x20of\x20vido\x20uploaded\x12;\n\x0bmax_viewers\x18\
    \x04\x20\x01(\rR\nmaxViewersB\x1a\x82\xb5\x18\x16max\x20concurrent\x20vi\
    ewers\x12;\n\x0cresolution_x\x18\x05\x20\x01(\rR\x0bresolutionXB\x18\x82\
    \xb5\x18\x14horizontal\x20resultion\x129\n\x0cresolution_y\x18\x06\x20\
    \x01(\rR\x0bresolutionYB\x16\x82\xb5\x18\x12vertical\x20resultion\x12#\n\
    \ravg_bandwidth\x18\x07\x20\x01(\rR\x0cavgBandwidth\x12G\n\x0btotal_byte\
    s\x18\x08\x20\x01(\x04R\ntotalBytesB&\x82\xb5\x18\"total\x20byte\x20uplo\
    aded\x20by\x20broadcaster\x12+\n\x06app_id\x18\t\x20\x01(\rR\x05appIdB\
    \x14\x82\xb5\x18\x10game\x20broadcasted\x12O\n\x14total_unique_viewers\
    \x18\n\x20\x01(\rR\x12totalUniqueViewersB\x1d\x82\xb5\x18\x19total\x20un\
    ique\x20viewers\x20seen\x12f\n\x15total_seconds_watched\x18\x0b\x20\x01(\
    \x04R\x13totalSecondsWatchedB2\x82\xb5\x18.total\x20number\x20of\x20seco\
    nds\x20watched\x20by\x20all\x20viewers\x12D\n\x0ctime_started\x18\x0c\
    \x20\x01(\rR\x0btimeStartedB!\x82\xb5\x18\x1dtime\x20broadcast\x20upload\
    \x20started\x12:\n\tupload_id\x18\r\x20\x01(\x04R\x08uploadIdB\x1d\x82\
    \xb5\x18\x19broadcast\x20relay\x20upload\x20id\x12A\n\rlocal_address\x18\
    \x0e\x20\x01(\tR\x0clocalAddressB\x1c\x82\xb5\x18\x18upload\x20to\x20ser\
    ver\x20address\x12E\n\x0eremote_address\x18\x0f\x20\x01(\tR\rremoteAddre\
    ssB\x1e\x82\xb5\x18\x1aupload\x20from\x20client\x20address\x12A\n\x11fra\
    mes_per_second\x18\x10\x20\x01(\rR\x0fframesPerSecondB\x15\x82\xb5\x18\
    \x11frames\x20per\x20second\x12S\n\x13num_representations\x18\x11\x20\
    \x01(\rR\x12numRepresentationsB\"\x82\xb5\x18\x1enumber\x20of\x20video\
    \x20represetations\x12(\n\x08app_name\x18\x12\x20\x01(\tR\x07appNameB\r\
    \x82\xb5\x18\tgame\x20name\x12=\n\tis_replay\x18\x13\x20\x01(\x08R\x08is\
    ReplayB\x20\x82\xb5\x18\x1creplay\x20of\x20previous\x20recording\x127\n\
    \nsession_id\x18\x14\x20\x01(\x04R\tsessionIdB\x18\x82\xb5\x18\x14broadc\
    ast\x20session\x20id\"\xd0\x01\n*CBroadcast_GetBroadcastViewerStats_Requ\
    est\x12:\n\tupload_id\x18\x01\x20\x01(\x04R\x08uploadIdB\x1d\x82\xb5\x18\
    \x19Get\x20stats\x20for\x20this\x20stream\x12f\n\x07steamid\x18\x02\x20\
    \x01(\x06R\x07steamidBL\x82\xb5\x18HOptional:\x20The\x20steamid\x20of\
    \x20the\x20broadcast\x20whose\x20details\x20you\x20are\x20requesting.\"\
    \xde\x03\n+CBroadcast_GetBroadcastViewerStats_Response\x12[\n\x0cviewer_\
    stats\x18\x01\x20\x03(\x0b28.CBroadcast_GetBroadcastViewerStats_Response\
    .ViewerStatsR\x0bviewerStats\x12^\n\rcountry_stats\x18\x02\x20\x03(\x0b2\
    9.CBroadcast_GetBroadcastViewerStats_Response.CountryStatsR\x0ccountrySt\
    ats\x1au\n\x0bViewerStats\x12&\n\x04time\x18\x01\x20\x01(\rR\x04timeB\
    \x12\x82\xb5\x18\x0etime\x20of\x20record\x12>\n\x0bnum_viewers\x18\x02\
    \x20\x01(\rR\nnumViewersB\x1d\x82\xb5\x18\x19current\x20number\x20of\x20\
    viewers\x1a{\n\x0cCountryStats\x123\n\x0ccountry_code\x18\x01\x20\x01(\t\
    R\x0bcountryCodeB\x10\x82\xb5\x18\x0ccountry\x20code\x126\n\x0bnum_viewe\
    rs\x18\x02\x20\x01(\rR\nnumViewersB\x15\x82\xb5\x18\x11number\x20of\x20v\
    iewers\"\x88\x02\n,CBroadcast_BroadcastViewerState_Notification\x12\x18\
    \n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12h\n\x05state\x18\x02\
    \x20\x01(\x0e2:.CBroadcast_BroadcastViewerState_Notification.EViewerStat\
    e:\x16k_EViewerNeedsApprovalR\x05state\"T\n\x0cEViewerState\x12\x1a\n\
    \x16k_EViewerNeedsApproval\x10\x01\x12\x15\n\x11k_EViewerWatching\x10\
    \x02\x12\x11\n\rk_EViewerLeft\x10\x03\"S\n.CBroadcast_WaitingBroadcastVi\
    ewer_Notification\x12!\n\x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadc\
    astId\"\xf8\x02\n.CBroadcast_BroadcastUploadStarted_Notification\x12!\n\
    \x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadcastId\x12!\n\x0cupload_t\
    oken\x18\x02\x20\x01(\tR\x0buploadToken\x12%\n\x0eupload_address\x18\x03\
    \x20\x01(\tR\ruploadAddress\x12!\n\x0chttp_address\x18\x04\x20\x01(\tR\
    \x0bhttpAddress\x12.\n\x13broadcast_upload_id\x18\x05\x20\x01(\x06R\x11b\
    roadcastUploadId\x12m\n\x1aheartbeat_interval_seconds\x18\x06\x20\x01(\r\
    R\x18heartbeatIntervalSecondsB/\x82\xb5\x18+how\x20many\x20seconds\x20be\
    tween\x20session\x20heartbeats\x12\x17\n\x07is_rtmp\x18\x07\x20\x01(\x08\
    R\x06isRtmp\"\xd6\x01\n+CBroadcast_StopBroadcastUpload_Notification\x12!\
    \n\x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadcastId\x12,\n\x12broadc\
    ast_relay_id\x18\x02\x20\x01(\x06R\x10broadcastRelayId\x12#\n\rupload_re\
    sult\x18\x03\x20\x01(\rR\x0cuploadResult\x121\n\x15too_many_poor_uploads\
    \x18\x04\x20\x01(\x08R\x12tooManyPoorUploads\"J\n%CBroadcast_SessionClos\
    ed_Notification\x12!\n\x0cbroadcast_id\x18\x01\x20\x01(\x06R\x0bbroadcas\
    tId\"`\n-CBroadcast_ViewerBroadcastInvite_Notification\x12/\n\x13broadca\
    ster_steamid\x18\x01\x20\x01(\x06R\x12broadcasterSteamid\"m\n'CBroadcast\
    _BroadcastStatus_Notification\x12!\n\x0cbroadcast_id\x18\x01\x20\x01(\
    \x06R\x0bbroadcastId\x12\x1f\n\x0bnum_viewers\x18\x02\x20\x01(\x05R\nnum\
    Viewers\"\xd0\x01\n,CBroadcast_BroadcastChannelLive_Notification\x120\n\
    \x14broadcast_channel_id\x18\x01\x20\x01(\x06R\x12broadcastChannelId\x12\
    4\n\x16broadcast_channel_name\x18\x02\x20\x01(\tR\x14broadcastChannelNam\
    e\x128\n\x18broadcast_channel_avatar\x18\x03\x20\x01(\tR\x16broadcastCha\
    nnelAvatar\"\xa4\x02\n,CBroadcast_SendThumbnailToRelay_Notification\x124\
    \n\x16thumbnail_upload_token\x18\x01\x20\x01(\tR\x14thumbnailUploadToken\
    \x12C\n\x1ethumbnail_broadcast_session_id\x18\x02\x20\x01(\x06R\x1bthumb\
    nailBroadcastSessionId\x12%\n\x0ethumbnail_data\x18\x03\x20\x01(\x0cR\rt\
    humbnailData\x12'\n\x0fthumbnail_width\x18\x04\x20\x01(\rR\x0ethumbnailW\
    idth\x12)\n\x10thumbnail_height\x18\x05\x20\x01(\rR\x0fthumbnailHeight\"\
    `\n,CBroadcast_WebRTCNeedTURNServer_Notification\x120\n\x14broadcast_ses\
    sion_id\x18\x01\x20\x01(\x06R\x12broadcastSessionId\"\xcd\x01\n#CBroadca\
    st_WebRTCStart_Notification\x120\n\x14broadcast_session_id\x18\x01\x20\
    \x01(\x06R\x12broadcastSessionId\x12*\n\x11webrtc_session_id\x18\x02\x20\
    \x01(\x06R\x0fwebrtcSessionId\x12%\n\x0eviewer_steamid\x18\x03\x20\x01(\
    \x06R\rviewerSteamid\x12!\n\x0cviewer_token\x18\x04\x20\x01(\x06R\x0bvie\
    werToken\"\x9f\x01\n'CBroadcast_WebRTCSetAnswer_Notification\x120\n\x14b\
    roadcast_session_id\x18\x01\x20\x01(\x06R\x12broadcastSessionId\x12*\n\
    \x11webrtc_session_id\x18\x02\x20\x01(\x06R\x0fwebrtcSessionId\x12\x16\n\
    \x06answer\x18\x03\x20\x01(\tR\x06answer\"\xcc\x01\n0CBroadcast_WebRTCAd\
    dViewerCandidate_Notification\x120\n\x14broadcast_session_id\x18\x01\x20\
    \x01(\x06R\x12broadcastSessionId\x12*\n\x11webrtc_session_id\x18\x02\x20\
    \x01(\x06R\x0fwebrtcSessionId\x12:\n\tcandidate\x18\x03\x20\x01(\x0b2\
    \x1c.CBroadcast_WebRTC_CandidateR\tcandidate*\xf5\x04\n\x17EBroadcastWat\
    chLocation\x12%\n!k_EBroadcastWatchLocation_Invalid\x10\0\x12)\n%k_EBroa\
    dcastWatchLocation_SteamTV_Tab\x10\x01\x120\n,k_EBroadcastWatchLocation_\
    SteamTV_WatchParty\x10\x02\x12&\n\"k_EBroadcastWatchLocation_Chat_Tab\
    \x10\x03\x12-\n)k_EBroadcastWatchLocation_Chat_WatchParty\x10\x04\x12+\n\
    'k_EBroadcastWatchLocation_CommunityPage\x10\x05\x12*\n&k_EBroadcastWatc\
    hLocation_StoreAppPage\x10\x06\x12$\n\x20k_EBroadcastWatchLocation_InGam\
    e\x10\x07\x12(\n$k_EBroadcastWatchLocation_BigPicture\x10\x08\x12'\n#k_E\
    BroadcastWatchLocation_SalesPage\x10\t\x12)\n%k_EBroadcastWatchLocation_\
    CuratorPage\x10\n\x12+\n'k_EBroadcastWatchLocation_DeveloperPage\x10\x0b\
    \x12*\n&k_EBroadcastWatchLocation_Chat_Friends\x10\x0c\x12)\n%k_EBroadca\
    stWatchLocation_SteamTV_Web\x10\r*g\n\x18EBroadcastChatPermission\x12$\n\
    \x20k_EBroadcastChatPermissionPublic\x10\0\x12%\n!k_EBroadcastChatPermis\
    sionOwnsApp\x10\x012\x86+\n\tBroadcast\x12\xed\x01\n\x15BeginBroadcastSe\
    ssion\x12).CBroadcast_BeginBroadcastSession_Request\x1a*.CBroadcast_Begi\
    nBroadcastSession_Response\"}\x82\xb5\x18yRequest\x20from\x20client\x20t\
    o\x20directory\x20to\x20begin\x20a\x20broadcast\x20session.\x20No\x20dat\
    a\x20being\x20sent\x20to\x20relay;\x20just\x20available\x20for\x20broadc\
    ast.\x12\xba\x01\n\x13EndBroadcastSession\x12'.CBroadcast_EndBroadcastSe\
    ssion_Request\x1a(.CBroadcast_EndBroadcastSession_Response\"P\x82\xb5\
    \x18LRequest\x20from\x20client\x20to\x20stop\x20a\x20broadcast\x20sessio\
    n.\x20Any\x20uploads\x20will\x20terminate.\x12\xac\x01\n\x14StartBroadca\
    stUpload\x12(.CBroadcast_StartBroadcastUpload_Request\x1a).CBroadcast_St\
    artBroadcastUpload_Response\"?\x82\xb5\x18;Request\x20from\x20client\x20\
    to\x20begin\x20sending\x20video\x20for\x20a\x20broadcast.\x12\x99\x01\n\
    \x19NotifyBroadcastUploadStop\x122.CBroadcast_NotifyBroadcastUploadStop_\
    Notification\x1a\x0b.NoResponse\";\x82\xb5\x187Tells\x20directory\x20tha\
    t\x20client\x20stopped\x20uploading\x20broadcast\x12\x87\x01\n\x0eWatchB\
    roadcast\x12\".CBroadcast_WatchBroadcast_Request\x1a#.CBroadcast_WatchBr\
    oadcast_Response\",\x82\xb5\x18(Request\x20from\x20viewer\x20to\x20watch\
    \x20a\x20broadcast\x12\x81\x01\n\x12HeartbeatBroadcast\x12+.CBroadcast_H\
    eartbeatBroadcast_Notification\x1a\x0b.NoResponse\"1\x82\xb5\x18-Notify\
    \x20directory\x20that\x20user\x20is\x20still\x20watching.\x12\xc1\x01\n\
    \x15StopWatchingBroadcast\x12..CBroadcast_StopWatchingBroadcast_Notifica\
    tion\x1a\x0b.NoResponse\"k\x82\xb5\x18gRequest\x20to\x20immediately\x20s\
    top\x20watching\x20a\x20broadcast.\x20Optional\x20Method,\x20if\x20not\
    \x20called,\x20viewer\x20will\x20time\x20out.\x12\x96\x01\n\x12GetBroadc\
    astStatus\x12&.CBroadcast_GetBroadcastStatus_Request\x1a'.CBroadcast_Get\
    BroadcastStatus_Response\"/\x82\xb5\x18+Request\x20from\x20viewer\x20abo\
    ut\x20broadcast\x20details\x12\x97\x01\n\x15GetBroadcastThumbnail\x12).C\
    Broadcast_GetBroadcastThumbnail_Request\x1a*.CBroadcast_GetBroadcastThum\
    bnail_Response\"'\x82\xb5\x18#Request\x20thumbnail\x20URL\x20for\x20broa\
    dcast\x12\xa2\x01\n\x11InviteToBroadcast\x12%.CBroadcast_InviteToBroadca\
    st_Request\x1a&.CBroadcast_InviteToBroadcast_Response\">\x82\xb5\x18:Inv\
    ites\x20another\x20steam\x20user\x20to\x20watch\x20the\x20caller's\x20br\
    oadcast\x12\xc8\x01\n\x1aSendBroadcastStateToServer\x12..CBroadcast_Send\
    BroadcastStateToServer_Request\x1a/.CBroadcast_SendBroadcastStateToServe\
    r_Response\"I\x82\xb5\x18ESends\x20users\x20current\x20broadcast\x20stat\
    e\x20(permissions,\x20game)\x20to\x20the\x20server\x12\xa2\x01\n\x1fNoti\
    fyBroadcastSessionHeartbeat\x128.CBroadcast_NotifyBroadcastSessionHeartb\
    eat_Notification\x1a\x0b.NoResponse\"8\x82\xb5\x184Tells\x20directory\
    \x20broadcast\x20session\x20is\x20still\x20available\x12\x94\x01\n\x14Ge\
    tBroadcastChatInfo\x12(.CBroadcast_GetBroadcastChatInfo_Request\x1a).CBr\
    oadcast_GetBroadcastChatInfo_Response\"'\x82\xb5\x18#Gets\x20chat\x20roo\
    m\x20info\x20for\x20a\x20broadcast\x12\x8a\x01\n\x0fPostChatMessage\x12#\
    .CBroadcast_PostChatMessage_Request\x1a$.CBroadcast_PostChatMessage_Resp\
    onse\",\x82\xb5\x18(Post\x20chat\x20message\x20to\x20specified\x20chat\
    \x20room\x12\xab\x01\n\x16UpdateChatMessageFlair\x12*.CBroadcast_UpdateC\
    hatMessageFlair_Request\x1a+.CBroadcast_UpdateChatMessageFlair_Response\
    \"8\x82\xb5\x184Update\x20chat\x20message\x20flair\x20in\x20the\x20speci\
    fied\x20chat\x20room\x12\x96\x01\n\x15MuteBroadcastChatUser\x12).CBroadc\
    ast_MuteBroadcastChatUser_Request\x1a*.CBroadcast_MuteBroadcastChatUser_\
    Response\"&\x82\xb5\x18\"Mute\x20a\x20user\x20in\x20your\x20broadcast\
    \x20chat\x12\x94\x01\n\x12RemoveUserChatText\x12&.CBroadcast_RemoveUserC\
    hatText_Request\x1a'.CBroadcast_RemoveUserChatText_Response\"-\x82\xb5\
    \x18)Tell\x20all\x20viewers\x20to\x20remove\x20user\x20chat\x20text\x12\
    \xa3\x01\n\x19GetBroadcastChatUserNames\x12-.CBroadcast_GetBroadcastChat\
    UserNames_Request\x1a..CBroadcast_GetBroadcastChatUserNames_Response\"'\
    \x82\xb5\x18#Get\x20names\x20for\x20list\x20of\x20users\x20in\x20chat\
    \x12~\n\x0eStartBuildClip\x12\".CBroadcast_StartBuildClip_Request\x1a#.C\
    Broadcast_StartBuildClip_Response\"#\x82\xb5\x18\x1fStart\x20building\
    \x20a\x20broadcast\x20clip\x12\x8a\x01\n\x12GetBuildClipStatus\x12&.CBro\
    adcast_GetBuildClipStatus_Request\x1a'.CBroadcast_GetBuildClipStatus_Res\
    ponse\"#\x82\xb5\x18\x1fStart\x20building\x20a\x20broadcast\x20clip\x12w\
    \n\x0eSetClipDetails\x12\".CBroadcast_SetClipDetails_Request\x1a#.CBroad\
    cast_SetClipDetails_Response\"\x1c\x82\xb5\x18\x18Updates\x20a\x20broadc\
    ast\x20clip\x12~\n\x0eGetClipDetails\x12\".CBroadcast_GetClipDetails_Req\
    uest\x1a#.CBroadcast_GetClipDetails_Response\"#\x82\xb5\x18\x1fGet\x20de\
    tails\x20for\x20Broadcast\x20Clips\x12n\n\x0bSetRTMPInfo\x12\x1f.CBroadc\
    ast_SetRTMPInfo_Request\x1a\x20.CBroadcast_SetRTMPInfo_Response\"\x1c\
    \x82\xb5\x18\x18Sets\x20RTMP\x20broadcast\x20info\x12n\n\x0bGetRTMPInfo\
    \x12\x1f.CBroadcast_GetRTMPInfo_Request\x1a\x20.CBroadcast_GetRTMPInfo_R\
    esponse\"\x1c\x82\xb5\x18\x18Gets\x20RTMP\x20broadcast\x20info\x12\x9e\
    \x01\n\x1aNotifyWebRTCHaveTURNServer\x12-.CBroadcast_WebRTCHaveTURNServe\
    r_Notification\x1a\x0b.NoResponse\"D\x82\xb5\x18@Notification\x20from\
    \x20client\x20to\x20server\x20with\x20the\x20client's\x20TURN\x20server\
    \x12\xac\x01\n\x11WebRTCStartResult\x12%.CBroadcast_WebRTCStartResult_Re\
    quest\x1a&.CBroadcast_WebRTCStartResult_Response\"H\x82\xb5\x18DNotify\
    \x20the\x20server\x20that\x20a\x20WebRTC\x20session\x20has\x20been\x20cr\
    eated\x20by\x20the\x20host\x12\xa0\x01\n\rWebRTCStopped\x12!.CBroadcast_\
    WebRTCStopped_Request\x1a\".CBroadcast_WebRTCStopped_Response\"H\x82\xb5\
    \x18DNotify\x20the\x20server\x20that\x20a\x20WebRTC\x20session\x20has\
    \x20been\x20stopped\x20by\x20the\x20host\x12\xa8\x01\n\x0fWebRTCSetAnswe\
    r\x12#.CBroadcast_WebRTCSetAnswer_Request\x1a$.CBroadcast_WebRTCSetAnswe\
    r_Response\"J\x82\xb5\x18FNotify\x20the\x20server\x20that\x20a\x20WebRTC\
    \x20session\x20has\x20been\x20created\x20by\x20the\x20viewer\x12\xa2\x01\
    \n\x16WebRTCLookupTURNServer\x12*.CBroadcast_WebRTCLookupTURNServer_Requ\
    est\x1a+.CBroadcast_WebRTCLookupTURNServer_Response\"/\x82\xb5\x18+Looku\
    p\x20the\x20best\x20TURN\x20server\x20for\x20this\x20client\x12\xb1\x01\
    \n\x16WebRTCAddHostCandidate\x12*.CBroadcast_WebRTCAddHostCandidate_Requ\
    est\x1a+.CBroadcast_WebRTCAddHostCandidate_Response\">\x82\xb5\x18:Add\
    \x20an\x20ICE\x20candidate\x20for\x20the\x20host\x20side\x20of\x20a\x20W\
    ebRTC\x20session\x12\xb9\x01\n\x18WebRTCAddViewerCandidate\x12,.CBroadca\
    st_WebRTCAddViewerCandidate_Request\x1a-.CBroadcast_WebRTCAddViewerCandi\
    date_Response\"@\x82\xb5\x18<Add\x20an\x20ICE\x20candidate\x20for\x20the\
    \x20viewer\x20side\x20of\x20a\x20WebRTC\x20session\x12\xb6\x01\n\x17WebR\
    TCGetHostCandidates\x12+.CBroadcast_WebRTCGetHostCandidates_Request\x1a,\
    .CBroadcast_WebRTCGetHostCandidates_Response\"@\x82\xb5\x18<Get\x20the\
    \x20ICE\x20candidates\x20for\x20the\x20host\x20side\x20of\x20a\x20WebRTC\
    \x20session\x12\x9e\x01\n\x17GetBroadcastUploadStats\x12+.CBroadcast_Get\
    BroadcastUploadStats_Request\x1a,.CBroadcast_GetBroadcastUploadStats_Res\
    ponse\"(\x82\xb5\x18$Gets\x20broadcast\x20upload\x20stats\x20for\x20user\
    \x12\x9f\x01\n\x17GetBroadcastViewerStats\x12+.CBroadcast_GetBroadcastVi\
    ewerStats_Request\x1a,.CBroadcast_GetBroadcastViewerStats_Response\")\
    \x82\xb5\x18%Gets\x20viewer\x20stats\x20for\x20given\x20broadcast\x1a*\
    \x82\xb5\x18&Methods\x20for\x20Steam\x20broadcast\x20operations2\xc4\x11\
    \n\x0fBroadcastClient\x12\xa1\x01\n\x1aNotifyBroadcastViewerState\x12-.C\
    Broadcast_BroadcastViewerState_Notification\x1a\x0b.NoResponse\"G\x82\
    \xb5\x18CNotification\x20from\x20server\x20to\x20client\x20that\x20a\x20\
    viewers\x20state\x20has\x20changed\x12\xbd\x01\n\x1cNotifyWaitingBroadca\
    stViewer\x12/.CBroadcast_WaitingBroadcastViewer_Notification\x1a\x0b.NoR\
    esponse\"_\x82\xb5\x18[Notification\x20from\x20server\x20to\x20client\
    \x20one\x20or\x20more\x20users\x20is\x20waiting\x20for\x20user\x20to\x20\
    start\x20broadcast\x12\xa7\x01\n\x1cNotifyBroadcastUploadStarted\x12/.CB\
    roadcast_BroadcastUploadStarted_Notification\x1a\x0b.NoResponse\"I\x82\
    \xb5\x18ENotification\x20from\x20server\x20to\x20client\x20with\x20infor\
    mation\x20about\x20a\x20broadcast\x12\xd6\x01\n\x19NotifyStopBroadcastUp\
    load\x12,.CBroadcast_StopBroadcastUpload_Notification\x1a\x0b.NoResponse\
    \"~\x82\xb5\x18zNotification\x20from\x20server\x20to\x20client\x20tellin\
    g\x20it\x20to\x20stop\x20uploading\x20when\x20the\x20last\x20viewer\x20h\
    as\x20disconnected\x20from\x20their\x20broadcast\x12\xb5\x01\n\x13Notify\
    SessionClosed\x12&.CBroadcast_SessionClosed_Notification\x1a\x0b.NoRespo\
    nse\"i\x82\xb5\x18eNotification\x20from\x20server\x20to\x20client\x20tel\
    ling\x20it\x20a\x20session\x20has\x20been\x20closed\x20unexpectedly\x20b\
    y\x20the\x20directory\x12\xc3\x01\n\x1bNotifyViewerBroadcastInvite\x12..\
    CBroadcast_ViewerBroadcastInvite_Notification\x1a\x0b.NoResponse\"g\x82\
    \xb5\x18cNotification\x20from\x20server\x20to\x20client\x20that\x20a\x20\
    broadcaster\x20is\x20inviting\x20a\x20viewer\x20to\x20watch\x20their\x20\
    broadcast\x12\x95\x01\n\x15NotifyBroadcastStatus\x12(.CBroadcast_Broadca\
    stStatus_Notification\x1a\x0b.NoResponse\"E\x82\xb5\x18ANotification\x20\
    from\x20server\x20to\x20client\x20about\x20current\x20broadcast\x20statu\
    s\x12\x9f\x01\n\x1aNotifyBroadcastChannelLive\x12-.CBroadcast_BroadcastC\
    hannelLive_Notification\x1a\x0b.NoResponse\"E\x82\xb5\x18ANotification\
    \x20from\x20server\x20to\x20client\x20about\x20current\x20broadcast\x20s\
    tatus\x12p\n\x14SendThumbnailToRelay\x12-.CBroadcast_SendThumbnailToRela\
    y_Notification\x1a\x0b.NoResponse\"\x1c\x82\xb5\x18\x18Send\x20thumbnail\
    s\x20to\x20relay\x12\xa7\x01\n\x1aNotifyWebRTCNeedTURNServer\x12-.CBroad\
    cast_WebRTCNeedTURNServer_Notification\x1a\x0b.NoResponse\"M\x82\xb5\x18\
    INotification\x20from\x20server\x20to\x20client\x20that\x20it\x20needs\
    \x20the\x20client's\x20TURN\x20server\x12\x94\x01\n\x11NotifyWebRTCStart\
    \x12$.CBroadcast_WebRTCStart_Notification\x1a\x0b.NoResponse\"L\x82\xb5\
    \x18HNotification\x20from\x20server\x20to\x20client\x20that\x20it\x20sho\
    uld\x20start\x20a\x20WebRTC\x20session\x12\x9f\x01\n\x15NotifyWebRTCSetA\
    nswer\x12(.CBroadcast_WebRTCSetAnswer_Notification\x1a\x0b.NoResponse\"O\
    \x82\xb5\x18KNotification\x20from\x20server\x20to\x20client\x20about\x20\
    the\x20broadcast\x20viewer\x20WebRTC\x20answer\x12\xb6\x01\n\x1eNotifyWe\
    bRTCAddViewerCandidate\x121.CBroadcast_WebRTCAddViewerCandidate_Notifica\
    tion\x1a\x0b.NoResponse\"T\x82\xb5\x18PNotification\x20from\x20server\
    \x20to\x20client\x20about\x20a\x20broadcast\x20viewer\x20WebRTC\x20ICE\
    \x20candidate\x1a\x04\xc0\xb5\x18\x02B\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
