// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_unified_test.steamclient.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_MessageToClient_Request {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Request {
    fn default() -> &'a CMsgTest_MessageToClient_Request {
        <CMsgTest_MessageToClient_Request as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Request {
    pub fn new() -> CMsgTest_MessageToClient_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToClient_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_MessageToClient_Request {
        CMsgTest_MessageToClient_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_MessageToClient_Request| { &m.some_text },
                    |m: &mut CMsgTest_MessageToClient_Request| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_MessageToClient_Request>(
                    "CMsgTest_MessageToClient_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Request {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_MessageToClient_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_MessageToClient_Request,
        };
        unsafe {
            instance.get(CMsgTest_MessageToClient_Request::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_MessageToClient_Request {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_MessageToClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_MessageToClient_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_MessageToClient_Response {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Response {
    fn default() -> &'a CMsgTest_MessageToClient_Response {
        <CMsgTest_MessageToClient_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Response {
    pub fn new() -> CMsgTest_MessageToClient_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToClient_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_MessageToClient_Response {
        CMsgTest_MessageToClient_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_MessageToClient_Response| { &m.some_text },
                    |m: &mut CMsgTest_MessageToClient_Response| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_MessageToClient_Response>(
                    "CMsgTest_MessageToClient_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Response {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_MessageToClient_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_MessageToClient_Response,
        };
        unsafe {
            instance.get(CMsgTest_MessageToClient_Response::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_MessageToClient_Response {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_MessageToClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_MessageToClient_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_NotifyClient_Notification {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyClient_Notification {
    fn default() -> &'a CMsgTest_NotifyClient_Notification {
        <CMsgTest_NotifyClient_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_NotifyClient_Notification {
    pub fn new() -> CMsgTest_NotifyClient_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_NotifyClient_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_NotifyClient_Notification {
        CMsgTest_NotifyClient_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_NotifyClient_Notification| { &m.some_text },
                    |m: &mut CMsgTest_NotifyClient_Notification| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_NotifyClient_Notification>(
                    "CMsgTest_NotifyClient_Notification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_NotifyClient_Notification {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_NotifyClient_Notification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_NotifyClient_Notification,
        };
        unsafe {
            instance.get(CMsgTest_NotifyClient_Notification::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_NotifyClient_Notification {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_NotifyClient_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_NotifyClient_Notification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_MessageToServer_Request {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Request {
    fn default() -> &'a CMsgTest_MessageToServer_Request {
        <CMsgTest_MessageToServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Request {
    pub fn new() -> CMsgTest_MessageToServer_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToServer_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_MessageToServer_Request {
        CMsgTest_MessageToServer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_MessageToServer_Request| { &m.some_text },
                    |m: &mut CMsgTest_MessageToServer_Request| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_MessageToServer_Request>(
                    "CMsgTest_MessageToServer_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Request {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_MessageToServer_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_MessageToServer_Request,
        };
        unsafe {
            instance.get(CMsgTest_MessageToServer_Request::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_MessageToServer_Request {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_MessageToServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_MessageToServer_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_MessageToServer_Response {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Response {
    fn default() -> &'a CMsgTest_MessageToServer_Response {
        <CMsgTest_MessageToServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Response {
    pub fn new() -> CMsgTest_MessageToServer_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToServer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_MessageToServer_Response {
        CMsgTest_MessageToServer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_MessageToServer_Response| { &m.some_text },
                    |m: &mut CMsgTest_MessageToServer_Response| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_MessageToServer_Response>(
                    "CMsgTest_MessageToServer_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Response {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_MessageToServer_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_MessageToServer_Response,
        };
        unsafe {
            instance.get(CMsgTest_MessageToServer_Response::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_MessageToServer_Response {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_MessageToServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_MessageToServer_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CMsgTest_NotifyServer_Notification {
    // message fields
    some_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyServer_Notification {
    fn default() -> &'a CMsgTest_NotifyServer_Notification {
        <CMsgTest_NotifyServer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_NotifyServer_Notification {
    pub fn new() -> CMsgTest_NotifyServer_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;


    pub fn get_some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_some_text(&mut self) {
        self.some_text.clear();
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text.set_default();
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_NotifyServer_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.some_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.some_text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgTest_NotifyServer_Notification {
        CMsgTest_NotifyServer_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "some_text",
                    |m: &CMsgTest_NotifyServer_Notification| { &m.some_text },
                    |m: &mut CMsgTest_NotifyServer_Notification| { &mut m.some_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CMsgTest_NotifyServer_Notification>(
                    "CMsgTest_NotifyServer_Notification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CMsgTest_NotifyServer_Notification {
        static mut instance: ::protobuf::lazy::Lazy<CMsgTest_NotifyServer_Notification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CMsgTest_NotifyServer_Notification,
        };
        unsafe {
            instance.get(CMsgTest_NotifyServer_Notification::new)
        }
    }
}

impl ::protobuf::Clear for CMsgTest_NotifyServer_Notification {
    fn clear(&mut self) {
        self.some_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgTest_NotifyServer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgTest_NotifyServer_Notification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,steammessages_unified_test.steamclient.proto\x1a,steammessages_unifie\
    d_base.steamclient.proto\"Q\n\x20CMsgTest_MessageToClient_Request\x12-\n\
    \tsome_text\x18\x01\x20\x01(\tR\x08someTextB\x10\x82\xb5\x18\x0cSome\x20\
    string.\"R\n!CMsgTest_MessageToClient_Response\x12-\n\tsome_text\x18\x01\
    \x20\x01(\tR\x08someTextB\x10\x82\xb5\x18\x0cSome\x20string.\"S\n\"CMsgT\
    est_NotifyClient_Notification\x12-\n\tsome_text\x18\x01\x20\x01(\tR\x08s\
    omeTextB\x10\x82\xb5\x18\x0cSome\x20string.\"Q\n\x20CMsgTest_MessageToSe\
    rver_Request\x12-\n\tsome_text\x18\x01\x20\x01(\tR\x08someTextB\x10\x82\
    \xb5\x18\x0cSome\x20string.\"R\n!CMsgTest_MessageToServer_Response\x12-\
    \n\tsome_text\x18\x01\x20\x01(\tR\x08someTextB\x10\x82\xb5\x18\x0cSome\
    \x20string.\"S\n\"CMsgTest_NotifyServer_Notification\x12-\n\tsome_text\
    \x18\x01\x20\x01(\tR\x08someTextB\x10\x82\xb5\x18\x0cSome\x20string.2\
    \x83\x02\n\x0fTestSteamClient\x12\x81\x01\n\x0fMessageToClient\x12!.CMsg\
    Test_MessageToClient_Request\x1a\".CMsgTest_MessageToClient_Response\"'\
    \x82\xb5\x18#Some\x20description\x20-\x20MessageToClient.\x12f\n\x0cNoti\
    fyClient\x12#.CMsgTest_NotifyClient_Notification\x1a\x0b.NoResponse\"$\
    \x82\xb5\x18\x20Some\x20description\x20-\x20NotifyClient.\x1a\x04\xc0\
    \xb5\x18\x022\x82\x02\n\x14TestServerFromClient\x12\x81\x01\n\x0fMessage\
    ToServer\x12!.CMsgTest_MessageToServer_Request\x1a\".CMsgTest_MessageToS\
    erver_Response\"'\x82\xb5\x18#Some\x20description\x20-\x20MessageToServe\
    r.\x12f\n\x0cNotifyServer\x12#.CMsgTest_NotifyServer_Notification\x1a\
    \x0b.NoResponse\"$\x82\xb5\x18\x20Some\x20description\x20-\x20NotifyServ\
    er.B\x03\x80\x01\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
