// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `clientmetrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CClientMetrics_ClientBootstrap_RequestInfo {
    // message fields
    original_hostname: ::protobuf::SingularField<::std::string::String>,
    actual_hostname: ::protobuf::SingularField<::std::string::String>,
    path: ::protobuf::SingularField<::std::string::String>,
    base_name: ::protobuf::SingularField<::std::string::String>,
    success: ::std::option::Option<bool>,
    status_code: ::std::option::Option<u32>,
    address_of_request_url: ::protobuf::SingularField<::std::string::String>,
    response_time_ms: ::std::option::Option<u32>,
    bytes_received: ::std::option::Option<u64>,
    num_retries: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_RequestInfo {
    fn default() -> &'a CClientMetrics_ClientBootstrap_RequestInfo {
        <CClientMetrics_ClientBootstrap_RequestInfo as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_RequestInfo {
    pub fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        ::std::default::Default::default()
    }

    // optional string original_hostname = 1;


    pub fn get_original_hostname(&self) -> &str {
        match self.original_hostname.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_original_hostname(&mut self) {
        self.original_hostname.clear();
    }

    pub fn has_original_hostname(&self) -> bool {
        self.original_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_hostname(&mut self, v: ::std::string::String) {
        self.original_hostname = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_hostname(&mut self) -> &mut ::std::string::String {
        if self.original_hostname.is_none() {
            self.original_hostname.set_default();
        }
        self.original_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_hostname(&mut self) -> ::std::string::String {
        self.original_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string actual_hostname = 2;


    pub fn get_actual_hostname(&self) -> &str {
        match self.actual_hostname.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_actual_hostname(&mut self) {
        self.actual_hostname.clear();
    }

    pub fn has_actual_hostname(&self) -> bool {
        self.actual_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actual_hostname(&mut self, v: ::std::string::String) {
        self.actual_hostname = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_hostname(&mut self) -> &mut ::std::string::String {
        if self.actual_hostname.is_none() {
            self.actual_hostname.set_default();
        }
        self.actual_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_actual_hostname(&mut self) -> ::std::string::String {
        self.actual_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string path = 3;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string base_name = 4;


    pub fn get_base_name(&self) -> &str {
        match self.base_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_base_name(&mut self) {
        self.base_name.clear();
    }

    pub fn has_base_name(&self) -> bool {
        self.base_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_name(&mut self, v: ::std::string::String) {
        self.base_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_name(&mut self) -> &mut ::std::string::String {
        if self.base_name.is_none() {
            self.base_name.set_default();
        }
        self.base_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_name(&mut self) -> ::std::string::String {
        self.base_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool success = 5;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 status_code = 6;


    pub fn get_status_code(&self) -> u32 {
        self.status_code.unwrap_or(0)
    }
    pub fn clear_status_code(&mut self) {
        self.status_code = ::std::option::Option::None;
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: u32) {
        self.status_code = ::std::option::Option::Some(v);
    }

    // optional string address_of_request_url = 7;


    pub fn get_address_of_request_url(&self) -> &str {
        match self.address_of_request_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address_of_request_url(&mut self) {
        self.address_of_request_url.clear();
    }

    pub fn has_address_of_request_url(&self) -> bool {
        self.address_of_request_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_of_request_url(&mut self, v: ::std::string::String) {
        self.address_of_request_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_of_request_url(&mut self) -> &mut ::std::string::String {
        if self.address_of_request_url.is_none() {
            self.address_of_request_url.set_default();
        }
        self.address_of_request_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_of_request_url(&mut self) -> ::std::string::String {
        self.address_of_request_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 response_time_ms = 8;


    pub fn get_response_time_ms(&self) -> u32 {
        self.response_time_ms.unwrap_or(0)
    }
    pub fn clear_response_time_ms(&mut self) {
        self.response_time_ms = ::std::option::Option::None;
    }

    pub fn has_response_time_ms(&self) -> bool {
        self.response_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_time_ms(&mut self, v: u32) {
        self.response_time_ms = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_received = 9;


    pub fn get_bytes_received(&self) -> u64 {
        self.bytes_received.unwrap_or(0)
    }
    pub fn clear_bytes_received(&mut self) {
        self.bytes_received = ::std::option::Option::None;
    }

    pub fn has_bytes_received(&self) -> bool {
        self.bytes_received.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_received(&mut self, v: u64) {
        self.bytes_received = ::std::option::Option::Some(v);
    }

    // optional uint32 num_retries = 10;


    pub fn get_num_retries(&self) -> u32 {
        self.num_retries.unwrap_or(0)
    }
    pub fn clear_num_retries(&mut self) {
        self.num_retries = ::std::option::Option::None;
    }

    pub fn has_num_retries(&self) -> bool {
        self.num_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_retries(&mut self, v: u32) {
        self.num_retries = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_RequestInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.original_hostname)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.actual_hostname)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.base_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.status_code = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address_of_request_url)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.response_time_ms = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bytes_received = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_retries = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.actual_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.base_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(v) = self.status_code {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.address_of_request_url.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.response_time_ms {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.bytes_received {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.num_retries {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_hostname.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.actual_hostname.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.base_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.success {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.status_code {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.address_of_request_url.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.response_time_ms {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.bytes_received {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.num_retries {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        CClientMetrics_ClientBootstrap_RequestInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "original_hostname",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.original_hostname },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.original_hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actual_hostname",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.actual_hostname },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.actual_hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.path },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_name",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.base_name },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.base_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.success },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "status_code",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.status_code },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.status_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address_of_request_url",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.address_of_request_url },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.address_of_request_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "response_time_ms",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.response_time_ms },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.response_time_ms },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "bytes_received",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.bytes_received },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.bytes_received },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_retries",
                |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.num_retries },
                |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.num_retries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CClientMetrics_ClientBootstrap_RequestInfo>(
                "CClientMetrics_ClientBootstrap_RequestInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_RequestInfo {
        static instance: ::protobuf::rt::LazyV2<CClientMetrics_ClientBootstrap_RequestInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CClientMetrics_ClientBootstrap_RequestInfo::new)
    }
}

impl ::protobuf::Clear for CClientMetrics_ClientBootstrap_RequestInfo {
    fn clear(&mut self) {
        self.original_hostname.clear();
        self.actual_hostname.clear();
        self.path.clear();
        self.base_name.clear();
        self.success = ::std::option::Option::None;
        self.status_code = ::std::option::Option::None;
        self.address_of_request_url.clear();
        self.response_time_ms = ::std::option::Option::None;
        self.bytes_received = ::std::option::Option::None;
        self.num_retries = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CClientMetrics_ClientBootstrap_RequestInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMetrics_ClientBootstrap_RequestInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CClientMetrics_ClientBootstrap_Summary {
    // message fields
    launcher_type: ::std::option::Option<u32>,
    steam_realm: ::std::option::Option<u32>,
    beta_name: ::protobuf::SingularField<::std::string::String>,
    download_completed: ::std::option::Option<bool>,
    total_time_ms: ::std::option::Option<u32>,
    pub manifest_requests: ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo>,
    pub package_requests: ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_Summary {
    fn default() -> &'a CClientMetrics_ClientBootstrap_Summary {
        <CClientMetrics_ClientBootstrap_Summary as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_Summary {
    pub fn new() -> CClientMetrics_ClientBootstrap_Summary {
        ::std::default::Default::default()
    }

    // optional uint32 launcher_type = 1;


    pub fn get_launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }
    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 steam_realm = 2;


    pub fn get_steam_realm(&self) -> u32 {
        self.steam_realm.unwrap_or(0)
    }
    pub fn clear_steam_realm(&mut self) {
        self.steam_realm = ::std::option::Option::None;
    }

    pub fn has_steam_realm(&self) -> bool {
        self.steam_realm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_realm(&mut self, v: u32) {
        self.steam_realm = ::std::option::Option::Some(v);
    }

    // optional string beta_name = 3;


    pub fn get_beta_name(&self) -> &str {
        match self.beta_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_beta_name(&mut self) {
        self.beta_name.clear();
    }

    pub fn has_beta_name(&self) -> bool {
        self.beta_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beta_name(&mut self, v: ::std::string::String) {
        self.beta_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beta_name(&mut self) -> &mut ::std::string::String {
        if self.beta_name.is_none() {
            self.beta_name.set_default();
        }
        self.beta_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_beta_name(&mut self) -> ::std::string::String {
        self.beta_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool download_completed = 4;


    pub fn get_download_completed(&self) -> bool {
        self.download_completed.unwrap_or(false)
    }
    pub fn clear_download_completed(&mut self) {
        self.download_completed = ::std::option::Option::None;
    }

    pub fn has_download_completed(&self) -> bool {
        self.download_completed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_completed(&mut self, v: bool) {
        self.download_completed = ::std::option::Option::Some(v);
    }

    // optional uint32 total_time_ms = 6;


    pub fn get_total_time_ms(&self) -> u32 {
        self.total_time_ms.unwrap_or(0)
    }
    pub fn clear_total_time_ms(&mut self) {
        self.total_time_ms = ::std::option::Option::None;
    }

    pub fn has_total_time_ms(&self) -> bool {
        self.total_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_time_ms(&mut self, v: u32) {
        self.total_time_ms = ::std::option::Option::Some(v);
    }

    // repeated .CClientMetrics_ClientBootstrap_RequestInfo manifest_requests = 7;


    pub fn get_manifest_requests(&self) -> &[CClientMetrics_ClientBootstrap_RequestInfo] {
        &self.manifest_requests
    }
    pub fn clear_manifest_requests(&mut self) {
        self.manifest_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_manifest_requests(&mut self, v: ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo>) {
        self.manifest_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_manifest_requests(&mut self) -> &mut ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo> {
        &mut self.manifest_requests
    }

    // Take field
    pub fn take_manifest_requests(&mut self) -> ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo> {
        ::std::mem::replace(&mut self.manifest_requests, ::protobuf::RepeatedField::new())
    }

    // repeated .CClientMetrics_ClientBootstrap_RequestInfo package_requests = 8;


    pub fn get_package_requests(&self) -> &[CClientMetrics_ClientBootstrap_RequestInfo] {
        &self.package_requests
    }
    pub fn clear_package_requests(&mut self) {
        self.package_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_requests(&mut self, v: ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo>) {
        self.package_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package_requests(&mut self) -> &mut ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo> {
        &mut self.package_requests
    }

    // Take field
    pub fn take_package_requests(&mut self) -> ::protobuf::RepeatedField<CClientMetrics_ClientBootstrap_RequestInfo> {
        ::std::mem::replace(&mut self.package_requests, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_Summary {
    fn is_initialized(&self) -> bool {
        for v in &self.manifest_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.package_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.launcher_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.steam_realm = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.beta_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.download_completed = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.total_time_ms = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.manifest_requests)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.package_requests)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steam_realm {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.beta_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.download_completed {
            my_size += 2;
        }
        if let Some(v) = self.total_time_ms {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.manifest_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.package_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.launcher_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steam_realm {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.beta_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.download_completed {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.total_time_ms {
            os.write_uint32(6, v)?;
        }
        for v in &self.manifest_requests {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.package_requests {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CClientMetrics_ClientBootstrap_Summary {
        CClientMetrics_ClientBootstrap_Summary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "launcher_type",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.launcher_type },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.launcher_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "steam_realm",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.steam_realm },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.steam_realm },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "beta_name",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.beta_name },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.beta_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "download_completed",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.download_completed },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.download_completed },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "total_time_ms",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.total_time_ms },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.total_time_ms },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CClientMetrics_ClientBootstrap_RequestInfo>>(
                "manifest_requests",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.manifest_requests },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.manifest_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CClientMetrics_ClientBootstrap_RequestInfo>>(
                "package_requests",
                |m: &CClientMetrics_ClientBootstrap_Summary| { &m.package_requests },
                |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.package_requests },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CClientMetrics_ClientBootstrap_Summary>(
                "CClientMetrics_ClientBootstrap_Summary",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_Summary {
        static instance: ::protobuf::rt::LazyV2<CClientMetrics_ClientBootstrap_Summary> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CClientMetrics_ClientBootstrap_Summary::new)
    }
}

impl ::protobuf::Clear for CClientMetrics_ClientBootstrap_Summary {
    fn clear(&mut self) {
        self.launcher_type = ::std::option::Option::None;
        self.steam_realm = ::std::option::Option::None;
        self.beta_name.clear();
        self.download_completed = ::std::option::Option::None;
        self.total_time_ms = ::std::option::Option::None;
        self.manifest_requests.clear();
        self.package_requests.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CClientMetrics_ClientBootstrap_Summary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMetrics_ClientBootstrap_Summary {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13clientmetrics.proto\"\x95\x03\n*CClientMetrics_ClientBootstrap_Req\
    uestInfo\x12+\n\x11original_hostname\x18\x01\x20\x01(\tR\x10originalHost\
    name\x12'\n\x0factual_hostname\x18\x02\x20\x01(\tR\x0eactualHostname\x12\
    \x12\n\x04path\x18\x03\x20\x01(\tR\x04path\x12\x1b\n\tbase_name\x18\x04\
    \x20\x01(\tR\x08baseName\x12\x18\n\x07success\x18\x05\x20\x01(\x08R\x07s\
    uccess\x12\x1f\n\x0bstatus_code\x18\x06\x20\x01(\rR\nstatusCode\x123\n\
    \x16address_of_request_url\x18\x07\x20\x01(\tR\x13addressOfRequestUrl\
    \x12(\n\x10response_time_ms\x18\x08\x20\x01(\rR\x0eresponseTimeMs\x12%\n\
    \x0ebytes_received\x18\t\x20\x01(\x04R\rbytesReceived\x12\x1f\n\x0bnum_r\
    etries\x18\n\x20\x01(\rR\nnumRetries\"\x90\x03\n&CClientMetrics_ClientBo\
    otstrap_Summary\x12#\n\rlauncher_type\x18\x01\x20\x01(\rR\x0clauncherTyp\
    e\x12\x1f\n\x0bsteam_realm\x18\x02\x20\x01(\rR\nsteamRealm\x12\x1b\n\tbe\
    ta_name\x18\x03\x20\x01(\tR\x08betaName\x12-\n\x12download_completed\x18\
    \x04\x20\x01(\x08R\x11downloadCompleted\x12\"\n\rtotal_time_ms\x18\x06\
    \x20\x01(\rR\x0btotalTimeMs\x12X\n\x11manifest_requests\x18\x07\x20\x03(\
    \x0b2+.CClientMetrics_ClientBootstrap_RequestInfoR\x10manifestRequests\
    \x12V\n\x10package_requests\x18\x08\x20\x03(\x0b2+.CClientMetrics_Client\
    Bootstrap_RequestInfoR\x0fpackageRequestsB\x05H\x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
