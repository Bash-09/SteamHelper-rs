// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_timedtrial.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_GetTimeRemaining_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Request {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Request {
        <CTimedTrial_GetTimeRemaining_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Request {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_GetTimeRemaining_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Request {
        CTimedTrial_GetTimeRemaining_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CTimedTrial_GetTimeRemaining_Request| { &m.appid },
                |m: &mut CTimedTrial_GetTimeRemaining_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_GetTimeRemaining_Request>(
                "CTimedTrial_GetTimeRemaining_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Request {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_GetTimeRemaining_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_GetTimeRemaining_Request::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_GetTimeRemaining_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_GetTimeRemaining_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_GetTimeRemaining_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_GetTimeRemaining_Response {
    // message fields
    seconds_played: ::std::option::Option<u32>,
    seconds_allowed: ::std::option::Option<u32>,
    packageid: ::std::option::Option<u32>,
    mastersub_appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Response {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Response {
        <CTimedTrial_GetTimeRemaining_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Response {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;


    pub fn get_seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }
    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;


    pub fn get_seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }
    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }

    // optional uint32 packageid = 3;


    pub fn get_packageid(&self) -> u32 {
        self.packageid.unwrap_or(0)
    }
    pub fn clear_packageid(&mut self) {
        self.packageid = ::std::option::Option::None;
    }

    pub fn has_packageid(&self) -> bool {
        self.packageid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packageid(&mut self, v: u32) {
        self.packageid = ::std::option::Option::Some(v);
    }

    // optional uint32 mastersub_appid = 4;


    pub fn get_mastersub_appid(&self) -> u32 {
        self.mastersub_appid.unwrap_or(0)
    }
    pub fn clear_mastersub_appid(&mut self) {
        self.mastersub_appid = ::std::option::Option::None;
    }

    pub fn has_mastersub_appid(&self) -> bool {
        self.mastersub_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mastersub_appid(&mut self, v: u32) {
        self.mastersub_appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_GetTimeRemaining_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_played = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_allowed = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.packageid = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mastersub_appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.packageid {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.mastersub_appid {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.packageid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.mastersub_appid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Response {
        CTimedTrial_GetTimeRemaining_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_played",
                |m: &CTimedTrial_GetTimeRemaining_Response| { &m.seconds_played },
                |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.seconds_played },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_allowed",
                |m: &CTimedTrial_GetTimeRemaining_Response| { &m.seconds_allowed },
                |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.seconds_allowed },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "packageid",
                |m: &CTimedTrial_GetTimeRemaining_Response| { &m.packageid },
                |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.packageid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mastersub_appid",
                |m: &CTimedTrial_GetTimeRemaining_Response| { &m.mastersub_appid },
                |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.mastersub_appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_GetTimeRemaining_Response>(
                "CTimedTrial_GetTimeRemaining_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Response {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_GetTimeRemaining_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_GetTimeRemaining_Response::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_GetTimeRemaining_Response {
    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.packageid = ::std::option::Option::None;
        self.mastersub_appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_GetTimeRemaining_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_GetTimeRemaining_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_RecordPlaytime_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    seconds_played: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Request {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Request {
        <CTimedTrial_RecordPlaytime_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Request {
    pub fn new() -> CTimedTrial_RecordPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_played = 2;


    pub fn get_seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }
    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_RecordPlaytime_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_played = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_played {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_RecordPlaytime_Request {
        CTimedTrial_RecordPlaytime_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CTimedTrial_RecordPlaytime_Request| { &m.appid },
                |m: &mut CTimedTrial_RecordPlaytime_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_played",
                |m: &CTimedTrial_RecordPlaytime_Request| { &m.seconds_played },
                |m: &mut CTimedTrial_RecordPlaytime_Request| { &mut m.seconds_played },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_RecordPlaytime_Request>(
                "CTimedTrial_RecordPlaytime_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Request {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_RecordPlaytime_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_RecordPlaytime_Request::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_RecordPlaytime_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.seconds_played = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_RecordPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_RecordPlaytime_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_RecordPlaytime_Response {
    // message fields
    seconds_played: ::std::option::Option<u32>,
    seconds_allowed: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Response {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Response {
        <CTimedTrial_RecordPlaytime_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Response {
    pub fn new() -> CTimedTrial_RecordPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;


    pub fn get_seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }
    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;


    pub fn get_seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }
    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_RecordPlaytime_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_played = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_allowed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_RecordPlaytime_Response {
        CTimedTrial_RecordPlaytime_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_played",
                |m: &CTimedTrial_RecordPlaytime_Response| { &m.seconds_played },
                |m: &mut CTimedTrial_RecordPlaytime_Response| { &mut m.seconds_played },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_allowed",
                |m: &CTimedTrial_RecordPlaytime_Response| { &m.seconds_allowed },
                |m: &mut CTimedTrial_RecordPlaytime_Response| { &mut m.seconds_allowed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_RecordPlaytime_Response>(
                "CTimedTrial_RecordPlaytime_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Response {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_RecordPlaytime_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_RecordPlaytime_Response::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_RecordPlaytime_Response {
    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_RecordPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_RecordPlaytime_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_ResetPlaytime_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Request {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Request {
        <CTimedTrial_ResetPlaytime_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Request {
    pub fn new() -> CTimedTrial_ResetPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_ResetPlaytime_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_ResetPlaytime_Request {
        CTimedTrial_ResetPlaytime_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CTimedTrial_ResetPlaytime_Request| { &m.appid },
                |m: &mut CTimedTrial_ResetPlaytime_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_ResetPlaytime_Request>(
                "CTimedTrial_ResetPlaytime_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Request {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_ResetPlaytime_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_ResetPlaytime_Request::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_ResetPlaytime_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_ResetPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_ResetPlaytime_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CTimedTrial_ResetPlaytime_Response {
    // message fields
    seconds_played: ::std::option::Option<u32>,
    seconds_allowed: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Response {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Response {
        <CTimedTrial_ResetPlaytime_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Response {
    pub fn new() -> CTimedTrial_ResetPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;


    pub fn get_seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }
    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;


    pub fn get_seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }
    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_ResetPlaytime_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_played = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds_allowed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CTimedTrial_ResetPlaytime_Response {
        CTimedTrial_ResetPlaytime_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_played",
                |m: &CTimedTrial_ResetPlaytime_Response| { &m.seconds_played },
                |m: &mut CTimedTrial_ResetPlaytime_Response| { &mut m.seconds_played },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "seconds_allowed",
                |m: &CTimedTrial_ResetPlaytime_Response| { &m.seconds_allowed },
                |m: &mut CTimedTrial_ResetPlaytime_Response| { &mut m.seconds_allowed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CTimedTrial_ResetPlaytime_Response>(
                "CTimedTrial_ResetPlaytime_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Response {
        static instance: ::protobuf::rt::LazyV2<CTimedTrial_ResetPlaytime_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CTimedTrial_ResetPlaytime_Response::new)
    }
}

impl ::protobuf::Clear for CTimedTrial_ResetPlaytime_Response {
    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CTimedTrial_ResetPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CTimedTrial_ResetPlaytime_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_timedtrial.steamclient.proto\x1a,steammessages_unified_\
    base.steamclient.proto\"<\n$CTimedTrial_GetTimeRemaining_Request\x12\x14\
    \n\x05appid\x18\x01\x20\x01(\rR\x05appid\"\xbe\x01\n%CTimedTrial_GetTime\
    Remaining_Response\x12%\n\x0eseconds_played\x18\x01\x20\x01(\rR\rseconds\
    Played\x12'\n\x0fseconds_allowed\x18\x02\x20\x01(\rR\x0esecondsAllowed\
    \x12\x1c\n\tpackageid\x18\x03\x20\x01(\rR\tpackageid\x12'\n\x0fmastersub\
    _appid\x18\x04\x20\x01(\rR\x0emastersubAppid\"a\n\"CTimedTrial_RecordPla\
    ytime_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12%\n\x0e\
    seconds_played\x18\x02\x20\x01(\rR\rsecondsPlayed\"u\n#CTimedTrial_Recor\
    dPlaytime_Response\x12%\n\x0eseconds_played\x18\x01\x20\x01(\rR\rseconds\
    Played\x12'\n\x0fseconds_allowed\x18\x02\x20\x01(\rR\x0esecondsAllowed\"\
    9\n!CTimedTrial_ResetPlaytime_Request\x12\x14\n\x05appid\x18\x01\x20\x01\
    (\rR\x05appid\"t\n\"CTimedTrial_ResetPlaytime_Response\x12%\n\x0eseconds\
    _played\x18\x01\x20\x01(\rR\rsecondsPlayed\x12'\n\x0fseconds_allowed\x18\
    \x02\x20\x01(\rR\x0esecondsAllowed2\x9b\x04\n\nTimedTrial\x12\xad\x01\n\
    \x10GetTimeRemaining\x12%.CTimedTrial_GetTimeRemaining_Request\x1a&.CTim\
    edTrial_GetTimeRemaining_Response\"J\x82\xb5\x18FReturns\x20the\x20amoun\
    t\x20of\x20time\x20a\x20user\x20has\x20left\x20on\x20a\x20timed\x20trial\
    \x20for\x20an\x20app\x12\x94\x01\n\x0eRecordPlaytime\x12#.CTimedTrial_Re\
    cordPlaytime_Request\x1a$.CTimedTrial_RecordPlaytime_Response\"7\x82\xb5\
    \x183Updates\x20the\x20user's\x20remaining\x20playtime\x20while\x20in\
    \x20game\x12\x92\x01\n\rResetPlaytime\x12\".CTimedTrial_ResetPlaytime_Re\
    quest\x1a#.CTimedTrial_ResetPlaytime_Response\"8\x82\xb5\x184Reset\x20th\
    e\x20user's\x20remaining\x20playtime\x20(developer\x20only)\x1a1\x82\xb5\
    \x18-A\x20service\x20to\x20get\x20user\x20timed\x20trial\x20informationB\
    \x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
