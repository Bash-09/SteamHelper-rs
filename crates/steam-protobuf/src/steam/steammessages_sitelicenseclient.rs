// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_sitelicenseclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteInfo {
    // message fields
    site_id: ::std::option::Option<u64>,
    site_name: ::protobuf::SingularField<::std::string::String>,
    allow_cached_credentials: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteInfo {
    fn default() -> &'a CMsgClientSiteInfo {
        <CMsgClientSiteInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteInfo {
    pub fn new() -> CMsgClientSiteInfo {
        ::std::default::Default::default()
    }

    // optional uint64 site_id = 1;

    pub fn get_site_id(&self) -> u64 {
        self.site_id.unwrap_or(0)
    }

    pub fn clear_site_id(&mut self) {
        self.site_id = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        self.site_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: u64) {
        self.site_id = ::std::option::Option::Some(v);
    }

    // optional string site_name = 2;

    pub fn get_site_name(&self) -> &str {
        match self.site_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_site_name(&mut self) {
        self.site_name.clear();
    }

    pub fn has_site_name(&self) -> bool {
        self.site_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_name(&mut self, v: ::std::string::String) {
        self.site_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_name(&mut self) -> &mut ::std::string::String {
        if self.site_name.is_none() {
            self.site_name.set_default();
        }
        self.site_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_site_name(&mut self) -> ::std::string::String {
        self.site_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool allow_cached_credentials = 3;

    pub fn get_allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.unwrap_or(false)
    }

    pub fn clear_allow_cached_credentials(&mut self) {
        self.allow_cached_credentials = ::std::option::Option::None;
    }

    pub fn has_allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_cached_credentials(&mut self, v: bool) {
        self.allow_cached_credentials = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.site_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.site_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.allow_cached_credentials = ::std::option::Option::Some(is.read_bool()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.site_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.site_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.allow_cached_credentials {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.site_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.site_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.allow_cached_credentials {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteInfo {
        CMsgClientSiteInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "site_id",
                |m: &CMsgClientSiteInfo| { &m.site_id },
                |m: &mut CMsgClientSiteInfo| { &mut m.site_id },
                CMsgClientSiteInfo::get_site_id,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "site_name",
                |m: &CMsgClientSiteInfo| { &m.site_name },
                |m: &mut CMsgClientSiteInfo| { &mut m.site_name },
                CMsgClientSiteInfo::get_site_name,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "allow_cached_credentials",
                |m: &CMsgClientSiteInfo| { &m.allow_cached_credentials },
                |m: &mut CMsgClientSiteInfo| { &mut m.allow_cached_credentials },
                CMsgClientSiteInfo::get_allow_cached_credentials,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteInfo>(
                "CMsgClientSiteInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteInfo {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteInfo> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteInfo::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteInfo {
    fn clear(&mut self) {
        self.site_id = ::std::option::Option::None;
        self.site_name.clear();
        self.allow_cached_credentials = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteInfo {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseCheckout {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckout {
    fn default() -> &'a CMsgClientSiteLicenseCheckout {
        <CMsgClientSiteLicenseCheckout as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckout {
    pub fn new() -> CMsgClientSiteLicenseCheckout {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseCheckout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseCheckout {
        CMsgClientSiteLicenseCheckout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "appid",
                |m: &CMsgClientSiteLicenseCheckout| { &m.appid },
                |m: &mut CMsgClientSiteLicenseCheckout| { &mut m.appid },
                CMsgClientSiteLicenseCheckout::get_appid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseCheckout>(
                "CMsgClientSiteLicenseCheckout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckout {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseCheckout> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseCheckout::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseCheckout {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseCheckout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseCheckout {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseCheckoutResponse {
    // message fields
    eresult: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckoutResponse {
    fn default() -> &'a CMsgClientSiteLicenseCheckoutResponse {
        <CMsgClientSiteLicenseCheckoutResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckoutResponse {
    pub fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn get_eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseCheckoutResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        CMsgClientSiteLicenseCheckoutResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "eresult",
                |m: &CMsgClientSiteLicenseCheckoutResponse| { &m.eresult },
                |m: &mut CMsgClientSiteLicenseCheckoutResponse| { &mut m.eresult },
                CMsgClientSiteLicenseCheckoutResponse::get_eresult,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseCheckoutResponse>(
                "CMsgClientSiteLicenseCheckoutResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckoutResponse {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseCheckoutResponse> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseCheckoutResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseCheckoutResponse {
    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseCheckoutResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseCheckoutResponse {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseGetAvailableSeats {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeats {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeats {
        <CMsgClientSiteLicenseGetAvailableSeats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeats {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetAvailableSeats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        CMsgClientSiteLicenseGetAvailableSeats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "appid",
                |m: &CMsgClientSiteLicenseGetAvailableSeats| { &m.appid },
                |m: &mut CMsgClientSiteLicenseGetAvailableSeats| { &mut m.appid },
                CMsgClientSiteLicenseGetAvailableSeats::get_appid,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseGetAvailableSeats>(
                "CMsgClientSiteLicenseGetAvailableSeats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeats {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseGetAvailableSeats> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseGetAvailableSeats::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseGetAvailableSeats {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseGetAvailableSeats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseGetAvailableSeats {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseGetAvailableSeatsResponse {
    // message fields
    eresult: ::std::option::Option<i32>,
    seats: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
        <CMsgClientSiteLicenseGetAvailableSeatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeatsResponse {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn get_eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 seats = 2;

    pub fn get_seats(&self) -> u32 {
        self.seats.unwrap_or(0)
    }

    pub fn clear_seats(&mut self) {
        self.seats = ::std::option::Option::None;
    }

    pub fn has_seats(&self) -> bool {
        self.seats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seats(&mut self, v: u32) {
        self.seats = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.seats = ::std::option::Option::Some(is.read_uint32()?);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seats {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.seats {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        CMsgClientSiteLicenseGetAvailableSeatsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeInt32, _>(
                "eresult",
                |m: &CMsgClientSiteLicenseGetAvailableSeatsResponse| { &m.eresult },
                |m: &mut CMsgClientSiteLicenseGetAvailableSeatsResponse| { &mut m.eresult },
                CMsgClientSiteLicenseGetAvailableSeatsResponse::get_eresult,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "seats",
                |m: &CMsgClientSiteLicenseGetAvailableSeatsResponse| { &m.seats },
                |m: &mut CMsgClientSiteLicenseGetAvailableSeatsResponse| { &mut m.seats },
                CMsgClientSiteLicenseGetAvailableSeatsResponse::get_seats,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseGetAvailableSeatsResponse>(
                "CMsgClientSiteLicenseGetAvailableSeatsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeatsResponse {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseGetAvailableSeatsResponse> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseGetAvailableSeatsResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.seats = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseGetAvailableSeatsResponse {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseGetContentCacheInfo {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfo {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfo {
        <CMsgClientSiteLicenseGetContentCacheInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfo {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetContentCacheInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        CMsgClientSiteLicenseGetContentCacheInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseGetContentCacheInfo>(
                "CMsgClientSiteLicenseGetContentCacheInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfo {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseGetContentCacheInfo> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseGetContentCacheInfo::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseGetContentCacheInfo {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseGetContentCacheInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseGetContentCacheInfo {
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgClientSiteLicenseGetContentCacheInfoResponse {
    // message fields
    use_cache: ::std::option::Option<bool>,
    ipv4_address: ::std::option::Option<u32>,
    port_number: ::std::option::Option<u32>,
    p2p_group: ::std::option::Option<u32>,
    ip_address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
        <CMsgClientSiteLicenseGetContentCacheInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfoResponse {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        ::std::default::Default::default()
    }

    // optional bool use_cache = 1;

    pub fn get_use_cache(&self) -> bool {
        self.use_cache.unwrap_or(false)
    }

    pub fn clear_use_cache(&mut self) {
        self.use_cache = ::std::option::Option::None;
    }

    pub fn has_use_cache(&self) -> bool {
        self.use_cache.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_cache(&mut self, v: bool) {
        self.use_cache = ::std::option::Option::Some(v);
    }

    // optional uint32 ipv4_address = 2;

    pub fn get_ipv4_address(&self) -> u32 {
        self.ipv4_address.unwrap_or(0)
    }

    pub fn clear_ipv4_address(&mut self) {
        self.ipv4_address = ::std::option::Option::None;
    }

    pub fn has_ipv4_address(&self) -> bool {
        self.ipv4_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv4_address(&mut self, v: u32) {
        self.ipv4_address = ::std::option::Option::Some(v);
    }

    // optional uint32 port_number = 3;

    pub fn get_port_number(&self) -> u32 {
        self.port_number.unwrap_or(0)
    }

    pub fn clear_port_number(&mut self) {
        self.port_number = ::std::option::Option::None;
    }

    pub fn has_port_number(&self) -> bool {
        self.port_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port_number(&mut self, v: u32) {
        self.port_number = ::std::option::Option::Some(v);
    }

    // optional uint32 p2p_group = 4;

    pub fn get_p2p_group(&self) -> u32 {
        self.p2p_group.unwrap_or(0)
    }

    pub fn clear_p2p_group(&mut self) {
        self.p2p_group = ::std::option::Option::None;
    }

    pub fn has_p2p_group(&self) -> bool {
        self.p2p_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2p_group(&mut self, v: u32) {
        self.p2p_group = ::std::option::Option::Some(v);
    }

    // optional string ip_address = 5;

    pub fn get_ip_address(&self) -> &str {
        match self.ip_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_address(&mut self) {
        self.ip_address.clear();
    }

    pub fn has_ip_address(&self) -> bool {
        self.ip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.ip_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        if self.ip_address.is_none() {
            self.ip_address.set_default();
        }
        self.ip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        self.ip_address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.use_cache = ::std::option::Option::Some(is.read_bool()?);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ipv4_address = ::std::option::Option::Some(is.read_uint32()?);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.port_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.p2p_group = ::std::option::Option::Some(is.read_uint32()?);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.use_cache {
            my_size += 2;
        }
        if let Some(v) = self.ipv4_address {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.port_number {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.p2p_group {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ip_address.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.use_cache {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.ipv4_address {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.port_number {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.p2p_group {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.ip_address.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        CMsgClientSiteLicenseGetContentCacheInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBool, _>(
                "use_cache",
                |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.use_cache },
                |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.use_cache },
                CMsgClientSiteLicenseGetContentCacheInfoResponse::get_use_cache,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "ipv4_address",
                |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.ipv4_address },
                |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.ipv4_address },
                CMsgClientSiteLicenseGetContentCacheInfoResponse::get_ipv4_address,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "port_number",
                |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.port_number },
                |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.port_number },
                CMsgClientSiteLicenseGetContentCacheInfoResponse::get_port_number,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "p2p_group",
                |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.p2p_group },
                |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.p2p_group },
                CMsgClientSiteLicenseGetContentCacheInfoResponse::get_p2p_group,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "ip_address",
                |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.ip_address },
                |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.ip_address },
                CMsgClientSiteLicenseGetContentCacheInfoResponse::get_ip_address,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CMsgClientSiteLicenseGetContentCacheInfoResponse>(
                "CMsgClientSiteLicenseGetContentCacheInfoResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfoResponse {
        static instance: ::protobuf::rt::Lazy<CMsgClientSiteLicenseGetContentCacheInfoResponse> = ::protobuf::rt::Lazy::INIT;
        instance.get(CMsgClientSiteLicenseGetContentCacheInfoResponse::new)
    }
}

impl ::protobuf::Clear for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn clear(&mut self) {
        self.use_cache = ::std::option::Option::None;
        self.ipv4_address = ::std::option::Option::None;
        self.port_number = ::std::option::Option::None;
        self.p2p_group = ::std::option::Option::None;
        self.ip_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientSiteLicenseGetContentCacheInfoResponse {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%steammessages_sitelicenseclient.proto\x1a\x18steammessages_base.proto\
    \"\x84\x01\n\x12CMsgClientSiteInfo\x12\x17\n\x07site_id\x18\x01\x20\x01(\
    \x04R\x06siteId\x12\x1b\n\tsite_name\x18\x02\x20\x01(\tR\x08siteName\x12\
    8\n\x18allow_cached_credentials\x18\x03\x20\x01(\x08R\x16allowCachedCred\
    entials\"5\n\x1dCMsgClientSiteLicenseCheckout\x12\x14\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appid\"D\n%CMsgClientSiteLicenseCheckoutResponse\x12\x1b\
    \n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\">\n&CMsgClientSite\
    LicenseGetAvailableSeats\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \"c\n.CMsgClientSiteLicenseGetAvailableSeatsResponse\x12\x1b\n\x07eresul\
    t\x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\x14\n\x05seats\x18\x02\x20\
    \x01(\rR\x05seats\"*\n(CMsgClientSiteLicenseGetContentCacheInfo\"\xcf\
    \x01\n0CMsgClientSiteLicenseGetContentCacheInfoResponse\x12\x1b\n\tuse_c\
    ache\x18\x01\x20\x01(\x08R\x08useCache\x12!\n\x0cipv4_address\x18\x02\
    \x20\x01(\rR\x0bipv4Address\x12\x1f\n\x0bport_number\x18\x03\x20\x01(\rR\
    \nportNumber\x12\x1b\n\tp2p_group\x18\x04\x20\x01(\rR\x08p2pGroup\x12\
    \x1d\n\nip_address\x18\x05\x20\x01(\tR\tipAddressB\x05H\x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
