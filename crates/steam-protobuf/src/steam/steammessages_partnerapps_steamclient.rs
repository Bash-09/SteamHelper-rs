// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_partnerapps.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_RequestUploadToken_Request {
    // message fields
    filename: ::protobuf::SingularField<::std::string::String>,
    appid: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Request {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Request {
        <CPartnerApps_RequestUploadToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Request {
    pub fn new() -> CPartnerApps_RequestUploadToken_Request {
        ::std::default::Default::default()
    }

    // optional string filename = 1;


    pub fn get_filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_filename(&mut self) {
        self.filename.clear();
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename.set_default();
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.filename)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.filename.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_RequestUploadToken_Request {
        CPartnerApps_RequestUploadToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filename",
                |m: &CPartnerApps_RequestUploadToken_Request| { &m.filename },
                |m: &mut CPartnerApps_RequestUploadToken_Request| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CPartnerApps_RequestUploadToken_Request| { &m.appid },
                |m: &mut CPartnerApps_RequestUploadToken_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_RequestUploadToken_Request>(
                "CPartnerApps_RequestUploadToken_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_RequestUploadToken_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_RequestUploadToken_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_RequestUploadToken_Request {
    fn clear(&mut self) {
        self.filename.clear();
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_RequestUploadToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_RequestUploadToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_RequestUploadToken_Response {
    // message fields
    upload_token: ::std::option::Option<u64>,
    location: ::protobuf::SingularField<::std::string::String>,
    routing_id: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Response {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Response {
        <CPartnerApps_RequestUploadToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Response {
    pub fn new() -> CPartnerApps_RequestUploadToken_Response {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;


    pub fn get_upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }
    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional string location = 2;


    pub fn get_location(&self) -> &str {
        match self.location.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        self.location.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 routing_id = 3;


    pub fn get_routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }
    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.upload_token = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.location)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routing_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.location.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_RequestUploadToken_Response {
        CPartnerApps_RequestUploadToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "upload_token",
                |m: &CPartnerApps_RequestUploadToken_Response| { &m.upload_token },
                |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.upload_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &CPartnerApps_RequestUploadToken_Response| { &m.location },
                |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routing_id",
                |m: &CPartnerApps_RequestUploadToken_Response| { &m.routing_id },
                |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.routing_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_RequestUploadToken_Response>(
                "CPartnerApps_RequestUploadToken_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_RequestUploadToken_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_RequestUploadToken_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_RequestUploadToken_Response {
    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.location.clear();
        self.routing_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_RequestUploadToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_RequestUploadToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUpload_Request {
    // message fields
    upload_token: ::std::option::Option<u64>,
    routing_id: ::std::option::Option<u64>,
    app_id: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Request {
    fn default() -> &'a CPartnerApps_FinishUpload_Request {
        <CPartnerApps_FinishUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Request {
    pub fn new() -> CPartnerApps_FinishUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;


    pub fn get_upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }
    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;


    pub fn get_routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }
    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;


    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.upload_token = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routing_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUpload_Request {
        CPartnerApps_FinishUpload_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "upload_token",
                |m: &CPartnerApps_FinishUpload_Request| { &m.upload_token },
                |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.upload_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routing_id",
                |m: &CPartnerApps_FinishUpload_Request| { &m.routing_id },
                |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.routing_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "app_id",
                |m: &CPartnerApps_FinishUpload_Request| { &m.app_id },
                |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.app_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUpload_Request>(
                "CPartnerApps_FinishUpload_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUpload_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUpload_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUpload_Request {
    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUpload_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUpload_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUploadKVSign_Response {
    // message fields
    signed_installscript: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadKVSign_Response {
    fn default() -> &'a CPartnerApps_FinishUploadKVSign_Response {
        <CPartnerApps_FinishUploadKVSign_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadKVSign_Response {
    pub fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        ::std::default::Default::default()
    }

    // optional string signed_installscript = 1;


    pub fn get_signed_installscript(&self) -> &str {
        match self.signed_installscript.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_signed_installscript(&mut self) {
        self.signed_installscript.clear();
    }

    pub fn has_signed_installscript(&self) -> bool {
        self.signed_installscript.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_installscript(&mut self, v: ::std::string::String) {
        self.signed_installscript = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_installscript(&mut self) -> &mut ::std::string::String {
        if self.signed_installscript.is_none() {
            self.signed_installscript.set_default();
        }
        self.signed_installscript.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_installscript(&mut self) -> ::std::string::String {
        self.signed_installscript.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadKVSign_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.signed_installscript)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_installscript.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_installscript.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        CPartnerApps_FinishUploadKVSign_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signed_installscript",
                |m: &CPartnerApps_FinishUploadKVSign_Response| { &m.signed_installscript },
                |m: &mut CPartnerApps_FinishUploadKVSign_Response| { &mut m.signed_installscript },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUploadKVSign_Response>(
                "CPartnerApps_FinishUploadKVSign_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadKVSign_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUploadKVSign_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUploadKVSign_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUploadKVSign_Response {
    fn clear(&mut self) {
        self.signed_installscript.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUploadKVSign_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadKVSign_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUploadLegacyDRM_Request {
    // message fields
    upload_token: ::std::option::Option<u64>,
    routing_id: ::std::option::Option<u64>,
    app_id: ::std::option::Option<u32>,
    flags: ::std::option::Option<u32>,
    tool_name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Request {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Request {
        <CPartnerApps_FinishUploadLegacyDRM_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Request {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;


    pub fn get_upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }
    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;


    pub fn get_routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }
    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;


    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 4;


    pub fn get_flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }
    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string tool_name = 5;


    pub fn get_tool_name(&self) -> &str {
        match self.tool_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_tool_name(&mut self) {
        self.tool_name.clear();
    }

    pub fn has_tool_name(&self) -> bool {
        self.tool_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_name(&mut self, v: ::std::string::String) {
        self.tool_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_name(&mut self) -> &mut ::std::string::String {
        if self.tool_name.is_none() {
            self.tool_name.set_default();
        }
        self.tool_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_name(&mut self) -> ::std::string::String {
        self.tool_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.upload_token = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routing_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.tool_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tool_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(4, v)?;
        }
        if let Some(ref v) = self.tool_name.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        CPartnerApps_FinishUploadLegacyDRM_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "upload_token",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.upload_token },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.upload_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routing_id",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.routing_id },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.routing_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "app_id",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.app_id },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.app_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "flags",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.flags },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tool_name",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.tool_name },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.tool_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUploadLegacyDRM_Request>(
                "CPartnerApps_FinishUploadLegacyDRM_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUploadLegacyDRM_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUploadLegacyDRM_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.tool_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUploadLegacyDRM_Response {
    // message fields
    file_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Response {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Response {
        <CPartnerApps_FinishUploadLegacyDRM_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Response {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;


    pub fn get_file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id.set_default();
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.file_id.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        CPartnerApps_FinishUploadLegacyDRM_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file_id",
                |m: &CPartnerApps_FinishUploadLegacyDRM_Response| { &m.file_id },
                |m: &mut CPartnerApps_FinishUploadLegacyDRM_Response| { &mut m.file_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUploadLegacyDRM_Response>(
                "CPartnerApps_FinishUploadLegacyDRM_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUploadLegacyDRM_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUploadLegacyDRM_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn clear(&mut self) {
        self.file_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUpload_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Response {
    fn default() -> &'a CPartnerApps_FinishUpload_Response {
        <CPartnerApps_FinishUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Response {
    pub fn new() -> CPartnerApps_FinishUpload_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUpload_Response {
        CPartnerApps_FinishUpload_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUpload_Response>(
                "CPartnerApps_FinishUpload_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUpload_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUpload_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUpload_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUpload_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUpload_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUploadDepot_Request {
    // message fields
    upload_token: ::std::option::Option<u64>,
    routing_id: ::std::option::Option<u64>,
    app_id: ::std::option::Option<u32>,
    depot_id: ::std::option::Option<u32>,
    build_flags: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Request {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Request {
        <CPartnerApps_FinishUploadDepot_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Request {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;


    pub fn get_upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }
    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;


    pub fn get_routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }
    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;


    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 4;


    pub fn get_depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }
    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional uint32 build_flags = 5;


    pub fn get_build_flags(&self) -> u32 {
        self.build_flags.unwrap_or(0)
    }
    pub fn clear_build_flags(&mut self) {
        self.build_flags = ::std::option::Option::None;
    }

    pub fn has_build_flags(&self) -> bool {
        self.build_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_flags(&mut self, v: u32) {
        self.build_flags = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.upload_token = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routing_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.depot_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.build_flags = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.depot_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.build_flags {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.build_flags {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Request {
        CPartnerApps_FinishUploadDepot_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "upload_token",
                |m: &CPartnerApps_FinishUploadDepot_Request| { &m.upload_token },
                |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.upload_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routing_id",
                |m: &CPartnerApps_FinishUploadDepot_Request| { &m.routing_id },
                |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.routing_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "app_id",
                |m: &CPartnerApps_FinishUploadDepot_Request| { &m.app_id },
                |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.app_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "depot_id",
                |m: &CPartnerApps_FinishUploadDepot_Request| { &m.depot_id },
                |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.depot_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "build_flags",
                |m: &CPartnerApps_FinishUploadDepot_Request| { &m.build_flags },
                |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.build_flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUploadDepot_Request>(
                "CPartnerApps_FinishUploadDepot_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUploadDepot_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUploadDepot_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUploadDepot_Request {
    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.build_flags = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUploadDepot_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadDepot_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FinishUploadDepot_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Response {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Response {
        <CPartnerApps_FinishUploadDepot_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Response {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Response {
        CPartnerApps_FinishUploadDepot_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FinishUploadDepot_Response>(
                "CPartnerApps_FinishUploadDepot_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FinishUploadDepot_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FinishUploadDepot_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FinishUploadDepot_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FinishUploadDepot_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadDepot_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_GetDepotBuildResult_Request {
    // message fields
    upload_token: ::std::option::Option<u64>,
    routing_id: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Request {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Request {
        <CPartnerApps_GetDepotBuildResult_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Request {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;


    pub fn get_upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }
    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;


    pub fn get_routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }
    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.upload_token = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routing_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        CPartnerApps_GetDepotBuildResult_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "upload_token",
                |m: &CPartnerApps_GetDepotBuildResult_Request| { &m.upload_token },
                |m: &mut CPartnerApps_GetDepotBuildResult_Request| { &mut m.upload_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routing_id",
                |m: &CPartnerApps_GetDepotBuildResult_Request| { &m.routing_id },
                |m: &mut CPartnerApps_GetDepotBuildResult_Request| { &mut m.routing_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_GetDepotBuildResult_Request>(
                "CPartnerApps_GetDepotBuildResult_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_GetDepotBuildResult_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_GetDepotBuildResult_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_GetDepotBuildResult_Request {
    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_GetDepotBuildResult_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_GetDepotBuildResult_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_GetDepotBuildResult_Response {
    // message fields
    manifest_id: ::std::option::Option<u64>,
    error_msg: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Response {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Response {
        <CPartnerApps_GetDepotBuildResult_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Response {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifest_id = 1;


    pub fn get_manifest_id(&self) -> u64 {
        self.manifest_id.unwrap_or(0)
    }
    pub fn clear_manifest_id(&mut self) {
        self.manifest_id = ::std::option::Option::None;
    }

    pub fn has_manifest_id(&self) -> bool {
        self.manifest_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_id(&mut self, v: u64) {
        self.manifest_id = ::std::option::Option::Some(v);
    }

    // optional string error_msg = 2;


    pub fn get_error_msg(&self) -> &str {
        match self.error_msg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    pub fn has_error_msg(&self) -> bool {
        self.error_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        if self.error_msg.is_none() {
            self.error_msg.set_default();
        }
        self.error_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        self.error_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.manifest_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.manifest_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.error_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.manifest_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.error_msg.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        CPartnerApps_GetDepotBuildResult_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "manifest_id",
                |m: &CPartnerApps_GetDepotBuildResult_Response| { &m.manifest_id },
                |m: &mut CPartnerApps_GetDepotBuildResult_Response| { &mut m.manifest_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_msg",
                |m: &CPartnerApps_GetDepotBuildResult_Response| { &m.error_msg },
                |m: &mut CPartnerApps_GetDepotBuildResult_Response| { &mut m.error_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_GetDepotBuildResult_Response>(
                "CPartnerApps_GetDepotBuildResult_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_GetDepotBuildResult_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_GetDepotBuildResult_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_GetDepotBuildResult_Response {
    fn clear(&mut self) {
        self.manifest_id = ::std::option::Option::None;
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_GetDepotBuildResult_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_GetDepotBuildResult_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FindDRMUploads_Request {
    // message fields
    app_id: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Request {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Request {
        <CPartnerApps_FindDRMUploads_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Request {
    pub fn new() -> CPartnerApps_FindDRMUploads_Request {
        ::std::default::Default::default()
    }

    // optional int32 app_id = 1;


    pub fn get_app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.app_id {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FindDRMUploads_Request {
        CPartnerApps_FindDRMUploads_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "app_id",
                |m: &CPartnerApps_FindDRMUploads_Request| { &m.app_id },
                |m: &mut CPartnerApps_FindDRMUploads_Request| { &mut m.app_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FindDRMUploads_Request>(
                "CPartnerApps_FindDRMUploads_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FindDRMUploads_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FindDRMUploads_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FindDRMUploads_Request {
    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FindDRMUploads_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FindDRMUploads_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_ExistingDRMUpload {
    // message fields
    file_id: ::protobuf::SingularField<::std::string::String>,
    app_id: ::std::option::Option<u32>,
    actor_id: ::std::option::Option<i32>,
    supplied_name: ::protobuf::SingularField<::std::string::String>,
    flags: ::std::option::Option<u32>,
    mod_type: ::protobuf::SingularField<::std::string::String>,
    timestamp: ::std::option::Option<u32>,
    orig_file_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_ExistingDRMUpload {
    fn default() -> &'a CPartnerApps_ExistingDRMUpload {
        <CPartnerApps_ExistingDRMUpload as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_ExistingDRMUpload {
    pub fn new() -> CPartnerApps_ExistingDRMUpload {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;


    pub fn get_file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id.set_default();
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 app_id = 2;


    pub fn get_app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional int32 actor_id = 3;


    pub fn get_actor_id(&self) -> i32 {
        self.actor_id.unwrap_or(0)
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id = ::std::option::Option::None;
    }

    pub fn has_actor_id(&self) -> bool {
        self.actor_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: i32) {
        self.actor_id = ::std::option::Option::Some(v);
    }

    // optional string supplied_name = 5;


    pub fn get_supplied_name(&self) -> &str {
        match self.supplied_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_supplied_name(&mut self) {
        self.supplied_name.clear();
    }

    pub fn has_supplied_name(&self) -> bool {
        self.supplied_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_supplied_name(&mut self, v: ::std::string::String) {
        self.supplied_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_supplied_name(&mut self) -> &mut ::std::string::String {
        if self.supplied_name.is_none() {
            self.supplied_name.set_default();
        }
        self.supplied_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_supplied_name(&mut self) -> ::std::string::String {
        self.supplied_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 flags = 6;


    pub fn get_flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }
    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string mod_type = 7;


    pub fn get_mod_type(&self) -> &str {
        match self.mod_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_mod_type(&mut self) {
        self.mod_type.clear();
    }

    pub fn has_mod_type(&self) -> bool {
        self.mod_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mod_type(&mut self, v: ::std::string::String) {
        self.mod_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mod_type(&mut self) -> &mut ::std::string::String {
        if self.mod_type.is_none() {
            self.mod_type.set_default();
        }
        self.mod_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_mod_type(&mut self) -> ::std::string::String {
        self.mod_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 timestamp = 8;


    pub fn get_timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional string orig_file_id = 9;


    pub fn get_orig_file_id(&self) -> &str {
        match self.orig_file_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_orig_file_id(&mut self) {
        self.orig_file_id.clear();
    }

    pub fn has_orig_file_id(&self) -> bool {
        self.orig_file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orig_file_id(&mut self, v: ::std::string::String) {
        self.orig_file_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orig_file_id(&mut self) -> &mut ::std::string::String {
        if self.orig_file_id.is_none() {
            self.orig_file_id.set_default();
        }
        self.orig_file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_orig_file_id(&mut self) -> ::std::string::String {
        self.orig_file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_ExistingDRMUpload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.actor_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.supplied_name)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mod_type)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.orig_file_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.actor_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.supplied_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.mod_type.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += 5;
        }
        if let Some(ref v) = self.orig_file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.file_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.actor_id {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.supplied_name.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.mod_type.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_fixed32(8, v)?;
        }
        if let Some(ref v) = self.orig_file_id.as_ref() {
            os.write_string(9, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_ExistingDRMUpload {
        CPartnerApps_ExistingDRMUpload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file_id",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.file_id },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.file_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "app_id",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.app_id },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.app_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "actor_id",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.actor_id },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.actor_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "supplied_name",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.supplied_name },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.supplied_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "flags",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.flags },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mod_type",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.mod_type },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.mod_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "timestamp",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.timestamp },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "orig_file_id",
                |m: &CPartnerApps_ExistingDRMUpload| { &m.orig_file_id },
                |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.orig_file_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_ExistingDRMUpload>(
                "CPartnerApps_ExistingDRMUpload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_ExistingDRMUpload {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_ExistingDRMUpload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_ExistingDRMUpload::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_ExistingDRMUpload {
    fn clear(&mut self) {
        self.file_id.clear();
        self.app_id = ::std::option::Option::None;
        self.actor_id = ::std::option::Option::None;
        self.supplied_name.clear();
        self.flags = ::std::option::Option::None;
        self.mod_type.clear();
        self.timestamp = ::std::option::Option::None;
        self.orig_file_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_ExistingDRMUpload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_ExistingDRMUpload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_FindDRMUploads_Response {
    // message fields
    pub uploads: ::protobuf::RepeatedField<CPartnerApps_ExistingDRMUpload>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Response {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Response {
        <CPartnerApps_FindDRMUploads_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Response {
    pub fn new() -> CPartnerApps_FindDRMUploads_Response {
        ::std::default::Default::default()
    }

    // repeated .CPartnerApps_ExistingDRMUpload uploads = 1;


    pub fn get_uploads(&self) -> &[CPartnerApps_ExistingDRMUpload] {
        &self.uploads
    }
    pub fn clear_uploads(&mut self) {
        self.uploads.clear();
    }

    // Param is passed by value, moved
    pub fn set_uploads(&mut self, v: ::protobuf::RepeatedField<CPartnerApps_ExistingDRMUpload>) {
        self.uploads = v;
    }

    // Mutable pointer to the field.
    pub fn mut_uploads(&mut self) -> &mut ::protobuf::RepeatedField<CPartnerApps_ExistingDRMUpload> {
        &mut self.uploads
    }

    // Take field
    pub fn take_uploads(&mut self) -> ::protobuf::RepeatedField<CPartnerApps_ExistingDRMUpload> {
        ::std::mem::replace(&mut self.uploads, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.uploads {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.uploads)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.uploads {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.uploads {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_FindDRMUploads_Response {
        CPartnerApps_FindDRMUploads_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPartnerApps_ExistingDRMUpload>>(
                "uploads",
                |m: &CPartnerApps_FindDRMUploads_Response| { &m.uploads },
                |m: &mut CPartnerApps_FindDRMUploads_Response| { &mut m.uploads },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_FindDRMUploads_Response>(
                "CPartnerApps_FindDRMUploads_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_FindDRMUploads_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_FindDRMUploads_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_FindDRMUploads_Response {
    fn clear(&mut self) {
        self.uploads.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_FindDRMUploads_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FindDRMUploads_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_Download_Request {
    // message fields
    file_id: ::protobuf::SingularField<::std::string::String>,
    app_id: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Request {
    fn default() -> &'a CPartnerApps_Download_Request {
        <CPartnerApps_Download_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Request {
    pub fn new() -> CPartnerApps_Download_Request {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;


    pub fn get_file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_id(&mut self) {
        self.file_id.clear();
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id.set_default();
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;


    pub fn get_app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.file_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_Download_Request {
        CPartnerApps_Download_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file_id",
                |m: &CPartnerApps_Download_Request| { &m.file_id },
                |m: &mut CPartnerApps_Download_Request| { &mut m.file_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "app_id",
                |m: &CPartnerApps_Download_Request| { &m.app_id },
                |m: &mut CPartnerApps_Download_Request| { &mut m.app_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_Download_Request>(
                "CPartnerApps_Download_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_Download_Request {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_Download_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_Download_Request::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_Download_Request {
    fn clear(&mut self) {
        self.file_id.clear();
        self.app_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_Download_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_Download_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CPartnerApps_Download_Response {
    // message fields
    download_url: ::protobuf::SingularField<::std::string::String>,
    app_id: ::std::option::Option<i32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Response {
    fn default() -> &'a CPartnerApps_Download_Response {
        <CPartnerApps_Download_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Response {
    pub fn new() -> CPartnerApps_Download_Response {
        ::std::default::Default::default()
    }

    // optional string download_url = 1;


    pub fn get_download_url(&self) -> &str {
        match self.download_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_download_url(&mut self) {
        self.download_url.clear();
    }

    pub fn has_download_url(&self) -> bool {
        self.download_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_url(&mut self, v: ::std::string::String) {
        self.download_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_url(&mut self) -> &mut ::std::string::String {
        if self.download_url.is_none() {
            self.download_url.set_default();
        }
        self.download_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_url(&mut self) -> ::std::string::String {
        self.download_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;


    pub fn get_app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }
    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.download_url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.app_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.download_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.download_url.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPartnerApps_Download_Response {
        CPartnerApps_Download_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "download_url",
                |m: &CPartnerApps_Download_Response| { &m.download_url },
                |m: &mut CPartnerApps_Download_Response| { &mut m.download_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "app_id",
                |m: &CPartnerApps_Download_Response| { &m.app_id },
                |m: &mut CPartnerApps_Download_Response| { &mut m.app_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPartnerApps_Download_Response>(
                "CPartnerApps_Download_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPartnerApps_Download_Response {
        static instance: ::protobuf::rt::LazyV2<CPartnerApps_Download_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPartnerApps_Download_Response::new)
    }
}

impl ::protobuf::Clear for CPartnerApps_Download_Response {
    fn clear(&mut self) {
        self.download_url.clear();
        self.app_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPartnerApps_Download_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_Download_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_partnerapps.steamclient.proto\x1a,steammessages_unified\
    _base.steamclient.proto\"[\n'CPartnerApps_RequestUploadToken_Request\x12\
    \x1a\n\x08filename\x18\x01\x20\x01(\tR\x08filename\x12\x14\n\x05appid\
    \x18\x02\x20\x01(\rR\x05appid\"\x88\x01\n(CPartnerApps_RequestUploadToke\
    n_Response\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadToken\
    \x12\x1a\n\x08location\x18\x02\x20\x01(\tR\x08location\x12\x1d\n\nroutin\
    g_id\x18\x03\x20\x01(\x04R\troutingId\"|\n!CPartnerApps_FinishUpload_Req\
    uest\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadToken\x12\x1d\
    \n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\x12\x15\n\x06app_id\x18\
    \x03\x20\x01(\rR\x05appId\"]\n(CPartnerApps_FinishUploadKVSign_Response\
    \x121\n\x14signed_installscript\x18\x01\x20\x01(\tR\x13signedInstallscri\
    pt\"\xb8\x01\n*CPartnerApps_FinishUploadLegacyDRM_Request\x12!\n\x0cuplo\
    ad_token\x18\x01\x20\x01(\x04R\x0buploadToken\x12\x1d\n\nrouting_id\x18\
    \x02\x20\x01(\x04R\troutingId\x12\x15\n\x06app_id\x18\x03\x20\x01(\rR\
    \x05appId\x12\x14\n\x05flags\x18\x04\x20\x01(\rR\x05flags\x12\x1b\n\ttoo\
    l_name\x18\x05\x20\x01(\tR\x08toolName\"F\n+CPartnerApps_FinishUploadLeg\
    acyDRM_Response\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06fileId\"$\n\
    \"CPartnerApps_FinishUpload_Response\"\xbd\x01\n&CPartnerApps_FinishUplo\
    adDepot_Request\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadTo\
    ken\x12\x1d\n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\x12\x15\n\x06\
    app_id\x18\x03\x20\x01(\rR\x05appId\x12\x19\n\x08depot_id\x18\x04\x20\
    \x01(\rR\x07depotId\x12\x1f\n\x0bbuild_flags\x18\x05\x20\x01(\rR\nbuildF\
    lags\")\n'CPartnerApps_FinishUploadDepot_Response\"l\n(CPartnerApps_GetD\
    epotBuildResult_Request\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0b\
    uploadToken\x12\x1d\n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\"i\n)\
    CPartnerApps_GetDepotBuildResult_Response\x12\x1f\n\x0bmanifest_id\x18\
    \x01\x20\x01(\x04R\nmanifestId\x12\x1b\n\terror_msg\x18\x02\x20\x01(\tR\
    \x08errorMsg\"<\n#CPartnerApps_FindDRMUploads_Request\x12\x15\n\x06app_i\
    d\x18\x01\x20\x01(\x05R\x05appId\"\x81\x02\n\x1eCPartnerApps_ExistingDRM\
    Upload\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06fileId\x12\x15\n\x06a\
    pp_id\x18\x02\x20\x01(\rR\x05appId\x12\x19\n\x08actor_id\x18\x03\x20\x01\
    (\x05R\x07actorId\x12#\n\rsupplied_name\x18\x05\x20\x01(\tR\x0csuppliedN\
    ame\x12\x14\n\x05flags\x18\x06\x20\x01(\rR\x05flags\x12\x19\n\x08mod_typ\
    e\x18\x07\x20\x01(\tR\x07modType\x12\x1c\n\ttimestamp\x18\x08\x20\x01(\
    \x07R\ttimestamp\x12\x20\n\x0corig_file_id\x18\t\x20\x01(\tR\norigFileId\
    \"a\n$CPartnerApps_FindDRMUploads_Response\x129\n\x07uploads\x18\x01\x20\
    \x03(\x0b2\x1f.CPartnerApps_ExistingDRMUploadR\x07uploads\"O\n\x1dCPartn\
    erApps_Download_Request\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06file\
    Id\x12\x15\n\x06app_id\x18\x02\x20\x01(\x05R\x05appId\"Z\n\x1eCPartnerAp\
    ps_Download_Response\x12!\n\x0cdownload_url\x18\x01\x20\x01(\tR\x0bdownl\
    oadUrl\x12\x15\n\x06app_id\x18\x02\x20\x01(\x05R\x05appId2\xa1\x0e\n\x0b\
    PartnerApps\x12\xb1\x01\n\x18RequestKVSignUploadToken\x12(.CPartnerApps_\
    RequestUploadToken_Request\x1a).CPartnerApps_RequestUploadToken_Response\
    \"@\x82\xb5\x18<Request\x20upload\x20token\x20for\x20installscript\x20fi\
    le\x20upload\x20/\x20signing\x12\xae\x01\n\x15RequestDRMUploadToken\x12(\
    .CPartnerApps_RequestUploadToken_Request\x1a).CPartnerApps_RequestUpload\
    Token_Response\"@\x82\xb5\x18<Request\x20upload\x20token\x20for\x20execu\
    table\x20file\x20upload\x20/\x20processing\x12\xb5\x01\n\x15RequestCEGUp\
    loadToken\x12(.CPartnerApps_RequestUploadToken_Request\x1a).CPartnerApps\
    _RequestUploadToken_Response\"G\x82\xb5\x18CRequest\x20upload\x20token\
    \x20for\x20custom\x20executable\x20file\x20upload\x20/\x20processing\x12\
    \xa3\x01\n\x17RequestDepotUploadToken\x12(.CPartnerApps_RequestUploadTok\
    en_Request\x1a).CPartnerApps_RequestUploadToken_Response\"3\x82\xb5\x18/\
    Request\x20upload\x20token\x20for\x20steampipe\x20depot\x20upload\x12\
    \xab\x01\n\x12FinishUploadKVSign\x12\".CPartnerApps_FinishUpload_Request\
    \x1a).CPartnerApps_FinishUploadKVSign_Response\"F\x82\xb5\x18BCommit\x20\
    method\x20to\x20sign\x20an\x20installscript\x20after\x20an\x20upload\x20\
    is\x20complete\x12\xa4\x01\n\x15FinishUploadDRMUpload\x12+.CPartnerApps_\
    FinishUploadLegacyDRM_Request\x1a,.CPartnerApps_FinishUploadLegacyDRM_Re\
    sponse\"0\x82\xb5\x18,Commit\x20method\x20for\x20executable\x20file\x20p\
    rocessing\x12\x99\x01\n\x15FinishUploadCEGUpload\x12\".CPartnerApps_Fini\
    shUpload_Request\x1a#.CPartnerApps_FinishUpload_Response\"7\x82\xb5\x183\
    Commit\x20method\x20for\x20custom\x20executable\x20file\x20processing\
    \x12\xa5\x01\n\x17FinishUploadDepotUpload\x12'.CPartnerApps_FinishUpload\
    Depot_Request\x1a(.CPartnerApps_FinishUploadDepot_Response\"7\x82\xb5\
    \x183Commit\x20method\x20for\x20custom\x20executable\x20file\x20processi\
    ng\x12\xa4\x01\n\x13GetDepotBuildResult\x12).CPartnerApps_GetDepotBuildR\
    esult_Request\x1a*.CPartnerApps_GetDepotBuildResult_Response\"6\x82\xb5\
    \x182Get\x20build\x20status\x20for\x20previously\x20uploaded\x20depot\
    \x20ZIP\x12\x8d\x01\n\x0eFindDRMUploads\x12$.CPartnerApps_FindDRMUploads\
    _Request\x1a%.CPartnerApps_FindDRMUploads_Response\".\x82\xb5\x18*Finds\
    \x20N\x20most\x20recent\x20prior\x20uploads\x20by\x20appid\x12K\n\x08Dow\
    nload\x12\x1e.CPartnerApps_Download_Request\x1a\x1f.CPartnerApps_Downloa\
    d_Response\x1a2\x82\xb5\x18.Service\x20methods\x20for\x20app\x20manageme\
    nt\x20by\x20partnersB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
