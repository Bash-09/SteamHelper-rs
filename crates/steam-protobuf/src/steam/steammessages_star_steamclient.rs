// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.10.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `steammessages_star.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_KeyValueQuery {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_KeyValueQuery {
    fn default() -> &'a CSTAR_KeyValueQuery {
        <CSTAR_KeyValueQuery as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_KeyValueQuery {
    pub fn new() -> CSTAR_KeyValueQuery {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_KeyValueQuery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_KeyValueQuery {
        CSTAR_KeyValueQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "key",
                |m: &CSTAR_KeyValueQuery| { &m.key },
                |m: &mut CSTAR_KeyValueQuery| { &mut m.key },
                CSTAR_KeyValueQuery::get_key,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "value",
                |m: &CSTAR_KeyValueQuery| { &m.value },
                |m: &mut CSTAR_KeyValueQuery| { &mut m.value },
                CSTAR_KeyValueQuery::get_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_KeyValueQuery>(
                "CSTAR_KeyValueQuery",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_KeyValueQuery {
        static instance: ::protobuf::rt::Lazy<CSTAR_KeyValueQuery> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_KeyValueQuery::new)
    }
}

impl ::protobuf::Clear for CSTAR_KeyValueQuery {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_KeyValueQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_KeyValueQuery {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_GlyphQueryParams {
    // message fields
    bundle_id: ::std::option::Option<u64>,
    pub queries: ::protobuf::RepeatedField<CSTAR_KeyValueQuery>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphQueryParams {
    fn default() -> &'a CSTAR_GlyphQueryParams {
        <CSTAR_GlyphQueryParams as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphQueryParams {
    pub fn new() -> CSTAR_GlyphQueryParams {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn get_bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_GlyphQueryParams {
    fn is_initialized(&self) -> bool {
        for v in &self.queries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.queries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.queries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_GlyphQueryParams {
        CSTAR_GlyphQueryParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "bundle_id",
                |m: &CSTAR_GlyphQueryParams| { &m.bundle_id },
                |m: &mut CSTAR_GlyphQueryParams| { &mut m.bundle_id },
                CSTAR_GlyphQueryParams::get_bundle_id,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_KeyValueQuery>>(
                "queries",
                |m: &CSTAR_GlyphQueryParams| { &m.queries },
                |m: &mut CSTAR_GlyphQueryParams| { &mut m.queries },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_GlyphQueryParams>(
                "CSTAR_GlyphQueryParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_GlyphQueryParams {
        static instance: ::protobuf::rt::Lazy<CSTAR_GlyphQueryParams> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_GlyphQueryParams::new)
    }
}

impl ::protobuf::Clear for CSTAR_GlyphQueryParams {
    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.queries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_GlyphQueryParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_GlyphQueryParams {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_ReadGlyphData_Request {
    // message fields
    pub query_params: ::protobuf::SingularPtrField<CSTAR_GlyphQueryParams>,
    last_modified_time_lower_limit: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Request {
    fn default() -> &'a CSTAR_ReadGlyphData_Request {
        <CSTAR_ReadGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Request {
    pub fn new() -> CSTAR_ReadGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional string last_modified_time_lower_limit = 2;

    pub fn get_last_modified_time_lower_limit(&self) -> &str {
        match self.last_modified_time_lower_limit.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_last_modified_time_lower_limit(&mut self) {
        self.last_modified_time_lower_limit.clear();
    }

    pub fn has_last_modified_time_lower_limit(&self) -> bool {
        self.last_modified_time_lower_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_modified_time_lower_limit(&mut self, v: ::std::string::String) {
        self.last_modified_time_lower_limit = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_modified_time_lower_limit(&mut self) -> &mut ::std::string::String {
        if self.last_modified_time_lower_limit.is_none() {
            self.last_modified_time_lower_limit.set_default();
        }
        self.last_modified_time_lower_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_modified_time_lower_limit(&mut self) -> ::std::string::String {
        self.last_modified_time_lower_limit.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.query_params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into::<CSTAR_GlyphQueryParams, _>(wire_type, is, &mut self.query_params)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.last_modified_time_lower_limit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.query_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.query_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_ReadGlyphData_Request {
        CSTAR_ReadGlyphData_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_GlyphQueryParams>, _>(
                "query_params",
                |m: &CSTAR_ReadGlyphData_Request| { &m.query_params },
                |m: &mut CSTAR_ReadGlyphData_Request| { &mut m.query_params },
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "last_modified_time_lower_limit",
                |m: &CSTAR_ReadGlyphData_Request| { &m.last_modified_time_lower_limit },
                |m: &mut CSTAR_ReadGlyphData_Request| { &mut m.last_modified_time_lower_limit },
                CSTAR_ReadGlyphData_Request::get_last_modified_time_lower_limit,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_ReadGlyphData_Request>(
                "CSTAR_ReadGlyphData_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Request {
        static instance: ::protobuf::rt::Lazy<CSTAR_ReadGlyphData_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_ReadGlyphData_Request::new)
    }
}

impl ::protobuf::Clear for CSTAR_ReadGlyphData_Request {
    fn clear(&mut self) {
        self.query_params.clear();
        self.last_modified_time_lower_limit.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_ReadGlyphData_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_ReadGlyphData_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_GlyphData {
    // message fields
    glyph_guid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    glyph_last_modified: ::protobuf::SingularField<::std::string::String>,
    glyph_json_data: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphData {
    fn default() -> &'a CSTAR_GlyphData {
        <CSTAR_GlyphData as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphData {
    pub fn new() -> CSTAR_GlyphData {
        ::std::default::Default::default()
    }

    // optional bytes glyph_guid = 1;

    pub fn get_glyph_guid(&self) -> &[u8] {
        match self.glyph_guid.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_glyph_guid(&mut self) {
        self.glyph_guid.clear();
    }

    pub fn has_glyph_guid(&self) -> bool {
        self.glyph_guid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_guid(&mut self, v: ::std::vec::Vec<u8>) {
        self.glyph_guid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_guid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.glyph_guid.is_none() {
            self.glyph_guid.set_default();
        }
        self.glyph_guid.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_guid(&mut self) -> ::std::vec::Vec<u8> {
        self.glyph_guid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string glyph_last_modified = 2;

    pub fn get_glyph_last_modified(&self) -> &str {
        match self.glyph_last_modified.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_last_modified(&mut self) {
        self.glyph_last_modified.clear();
    }

    pub fn has_glyph_last_modified(&self) -> bool {
        self.glyph_last_modified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_last_modified(&mut self, v: ::std::string::String) {
        self.glyph_last_modified = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_last_modified(&mut self) -> &mut ::std::string::String {
        if self.glyph_last_modified.is_none() {
            self.glyph_last_modified.set_default();
        }
        self.glyph_last_modified.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_last_modified(&mut self) -> ::std::string::String {
        self.glyph_last_modified.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string glyph_json_data = 3;

    pub fn get_glyph_json_data(&self) -> &str {
        match self.glyph_json_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_json_data(&mut self) {
        self.glyph_json_data.clear();
    }

    pub fn has_glyph_json_data(&self) -> bool {
        self.glyph_json_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_json_data(&mut self, v: ::std::string::String) {
        self.glyph_json_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_json_data(&mut self) -> &mut ::std::string::String {
        if self.glyph_json_data.is_none() {
            self.glyph_json_data.set_default();
        }
        self.glyph_json_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_json_data(&mut self) -> ::std::string::String {
        self.glyph_json_data.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_GlyphData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.glyph_guid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.glyph_last_modified)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.glyph_json_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.glyph_guid.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.glyph_guid.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_GlyphData {
        CSTAR_GlyphData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes, _>(
                "glyph_guid",
                |m: &CSTAR_GlyphData| { &m.glyph_guid },
                |m: &mut CSTAR_GlyphData| { &mut m.glyph_guid },
                CSTAR_GlyphData::get_glyph_guid,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "glyph_last_modified",
                |m: &CSTAR_GlyphData| { &m.glyph_last_modified },
                |m: &mut CSTAR_GlyphData| { &mut m.glyph_last_modified },
                CSTAR_GlyphData::get_glyph_last_modified,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "glyph_json_data",
                |m: &CSTAR_GlyphData| { &m.glyph_json_data },
                |m: &mut CSTAR_GlyphData| { &mut m.glyph_json_data },
                CSTAR_GlyphData::get_glyph_json_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_GlyphData>(
                "CSTAR_GlyphData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_GlyphData {
        static instance: ::protobuf::rt::Lazy<CSTAR_GlyphData> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_GlyphData::new)
    }
}

impl ::protobuf::Clear for CSTAR_GlyphData {
    fn clear(&mut self) {
        self.glyph_guid.clear();
        self.glyph_last_modified.clear();
        self.glyph_json_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_GlyphData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_GlyphData {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_WriteGlyphData_Request {
    // message fields
    bundle_id: ::std::option::Option<u64>,
    pub glyph_data: ::protobuf::RepeatedField<CSTAR_GlyphData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Request {
    fn default() -> &'a CSTAR_WriteGlyphData_Request {
        <CSTAR_WriteGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Request {
    pub fn new() -> CSTAR_WriteGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn get_bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.glyph_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_WriteGlyphData_Request {
        CSTAR_WriteGlyphData_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "bundle_id",
                |m: &CSTAR_WriteGlyphData_Request| { &m.bundle_id },
                |m: &mut CSTAR_WriteGlyphData_Request| { &mut m.bundle_id },
                CSTAR_WriteGlyphData_Request::get_bundle_id,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_GlyphData>>(
                "glyph_data",
                |m: &CSTAR_WriteGlyphData_Request| { &m.glyph_data },
                |m: &mut CSTAR_WriteGlyphData_Request| { &mut m.glyph_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_WriteGlyphData_Request>(
                "CSTAR_WriteGlyphData_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Request {
        static instance: ::protobuf::rt::Lazy<CSTAR_WriteGlyphData_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_WriteGlyphData_Request::new)
    }
}

impl ::protobuf::Clear for CSTAR_WriteGlyphData_Request {
    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_WriteGlyphData_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_WriteGlyphData_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_Request {
    // message fields
    pub read_glyph_data: ::protobuf::SingularPtrField<CSTAR_ReadGlyphData_Request>,
    pub write_glyph_data: ::protobuf::SingularPtrField<CSTAR_WriteGlyphData_Request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_Request {
    fn default() -> &'a CSTAR_Request {
        <CSTAR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Request {
    pub fn new() -> CSTAR_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.read_glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.write_glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into::<CSTAR_ReadGlyphData_Request, _>(wire_type, is, &mut self.read_glyph_data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into::<CSTAR_WriteGlyphData_Request, _>(wire_type, is, &mut self.write_glyph_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_Request {
        CSTAR_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_ReadGlyphData_Request>, _>(
                "read_glyph_data",
                |m: &CSTAR_Request| { &m.read_glyph_data },
                |m: &mut CSTAR_Request| { &mut m.read_glyph_data },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_WriteGlyphData_Request>, _>(
                "write_glyph_data",
                |m: &CSTAR_Request| { &m.write_glyph_data },
                |m: &mut CSTAR_Request| { &mut m.write_glyph_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_Request>(
                "CSTAR_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_Request {
        static instance: ::protobuf::rt::Lazy<CSTAR_Request> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_Request::new)
    }
}

impl ::protobuf::Clear for CSTAR_Request {
    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_Request {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_ReadGlyphData_Response {
    // message fields
    bundle_id: ::std::option::Option<u64>,
    pub glyph_data: ::protobuf::RepeatedField<CSTAR_GlyphData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Response {
    fn default() -> &'a CSTAR_ReadGlyphData_Response {
        <CSTAR_ReadGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Response {
    pub fn new() -> CSTAR_ReadGlyphData_Response {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn get_bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into_repeated_field(wire_type, is, &mut self.glyph_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_ReadGlyphData_Response {
        CSTAR_ReadGlyphData_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint64, _>(
                "bundle_id",
                |m: &CSTAR_ReadGlyphData_Response| { &m.bundle_id },
                |m: &mut CSTAR_ReadGlyphData_Response| { &mut m.bundle_id },
                CSTAR_ReadGlyphData_Response::get_bundle_id,
            ));
            fields.push(::protobuf::reflect::rt::make_repeated_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_GlyphData>>(
                "glyph_data",
                |m: &CSTAR_ReadGlyphData_Response| { &m.glyph_data },
                |m: &mut CSTAR_ReadGlyphData_Response| { &mut m.glyph_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_ReadGlyphData_Response>(
                "CSTAR_ReadGlyphData_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Response {
        static instance: ::protobuf::rt::Lazy<CSTAR_ReadGlyphData_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_ReadGlyphData_Response::new)
    }
}

impl ::protobuf::Clear for CSTAR_ReadGlyphData_Response {
    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_ReadGlyphData_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_ReadGlyphData_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_WriteGlyphData_Response {
    // message fields
    pub result: ::std::vec::Vec<::protobuf::ProtobufEnumOrUnknown<E_STAR_GlyphWriteResult>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Response {
    fn default() -> &'a CSTAR_WriteGlyphData_Response {
        <CSTAR_WriteGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Response {
    pub fn new() -> CSTAR_WriteGlyphData_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_or_unknown_into(wire_type, is, &mut self.result)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.result {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.result {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_WriteGlyphData_Response {
        CSTAR_WriteGlyphData_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnumOrUnknown<E_STAR_GlyphWriteResult>>(
                "result",
                |m: &CSTAR_WriteGlyphData_Response| { &m.result },
                |m: &mut CSTAR_WriteGlyphData_Response| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_WriteGlyphData_Response>(
                "CSTAR_WriteGlyphData_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Response {
        static instance: ::protobuf::rt::Lazy<CSTAR_WriteGlyphData_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_WriteGlyphData_Response::new)
    }
}

impl ::protobuf::Clear for CSTAR_WriteGlyphData_Response {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_WriteGlyphData_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_WriteGlyphData_Response {
}

#[derive(PartialEq,Clone,Default)]
pub struct CSTAR_Response {
    // message fields
    pub read_glyph_data: ::protobuf::SingularPtrField<CSTAR_ReadGlyphData_Response>,
    pub write_glyph_data: ::protobuf::SingularPtrField<CSTAR_WriteGlyphData_Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSTAR_Response {
    fn default() -> &'a CSTAR_Response {
        <CSTAR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Response {
    pub fn new() -> CSTAR_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.read_glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.write_glyph_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into::<CSTAR_ReadGlyphData_Response, _>(wire_type, is, &mut self.read_glyph_data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into::<CSTAR_WriteGlyphData_Response, _>(wire_type, is, &mut self.write_glyph_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSTAR_Response {
        CSTAR_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_ReadGlyphData_Response>, _>(
                "read_glyph_data",
                |m: &CSTAR_Response| { &m.read_glyph_data },
                |m: &mut CSTAR_Response| { &mut m.read_glyph_data },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<CSTAR_WriteGlyphData_Response>, _>(
                "write_glyph_data",
                |m: &CSTAR_Response| { &m.write_glyph_data },
                |m: &mut CSTAR_Response| { &mut m.write_glyph_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<CSTAR_Response>(
                "CSTAR_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSTAR_Response {
        static instance: ::protobuf::rt::Lazy<CSTAR_Response> = ::protobuf::rt::Lazy::INIT;
        instance.get(CSTAR_Response::new)
    }
}

impl ::protobuf::Clear for CSTAR_Response {
    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSTAR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_Response {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum E_STAR_GlyphWriteResult {
    k_E_STAR_GlyphWriteResult_Success = 0,
    k_E_STAR_GlyphWriteResult_InvalidMessage = 1,
    k_E_STAR_GlyphWriteResult_InvalidJSON = 2,
    k_E_STAR_GlyphWriteResult_SQLError = 3,
}

impl ::protobuf::ProtobufEnum for E_STAR_GlyphWriteResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<E_STAR_GlyphWriteResult> {
        match value {
            0 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success),
            1 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage),
            2 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON),
            3 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [E_STAR_GlyphWriteResult] = &[
            E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success,
            E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage,
            E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON,
            E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<E_STAR_GlyphWriteResult>("E_STAR_GlyphWriteResult", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for E_STAR_GlyphWriteResult {
    fn default() -> Self {
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success
    }
}

impl ::protobuf::reflect::ProtobufValue for E_STAR_GlyphWriteResult {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_star.steamclient.proto\x1a,steammessages_unified_base.s\
    teamclient.proto\"\xd2\x01\n\x13CSTAR_KeyValueQuery\x12H\n\x03key\x18\
    \x01\x20\x01(\tR\x03keyB6\x82\xb5\x182key\x20to\x20search\x20for\x20in\
    \x20JSON\x20path\x20format\x20(SQL\x20subset)\x12q\n\x05value\x18\x02\
    \x20\x01(\tR\x05valueB[\x82\xb5\x18Wthe\x20value\x20to\x20compare\x20aga\
    inst\x20(the\x20JSON\x20value\x20will\x20be\x20compared\x20for\x20equali\
    ty\x20as\x20a\x20string)\"\xde\x01\n\x16CSTAR_GlyphQueryParams\x12}\n\tb\
    undle_id\x18\x01\x20\x01(\x04R\x08bundleIdB`\x82\xb5\x18\\if\x20provided\
    ,\x20Bundle\x20ID\x20is\x20used\x20instead\x20of\x20the\x20other\x20quer\
    y\x20parameters\x20(much\x20faster\x20SQL\x20query)\x12E\n\x07queries\
    \x18\x02\x20\x03(\x0b2\x14.CSTAR_KeyValueQueryR\x07queriesB\x15\x82\xb5\
    \x18\x11key\x20value\x20queries\"\xbd\x02\n\x1bCSTAR_ReadGlyphData_Reque\
    st\x12r\n\x0cquery_params\x18\x01\x20\x01(\x0b2\x17.CSTAR_GlyphQueryPara\
    msR\x0bqueryParamsB6\x82\xb5\x182parameters\x20to\x20identify\x20the\x20\
    glyphs\x20to\x20read\x20from\x20SQL\x12\xa9\x01\n\x1elast_modified_time_\
    lower_limit\x18\x02\x20\x01(\tR\x1alastModifiedTimeLowerLimitBe\x82\xb5\
    \x18aif\x20provided,\x20only\x20return\x20glyphs\x20modified\x20more\x20\
    recently\x20than\x20this\x20timestamp\x20\x20(RFC\x203339\x20UTC\x20form\
    at)\"\x99\x02\n\x0fCSTAR_GlyphData\x12G\n\nglyph_guid\x18\x01\x20\x01(\
    \x0cR\tglyphGuidB(\x82\xb5\x18$GUID\x20uniquely\x20identifying\x20this\
    \x20glyph\x12x\n\x13glyph_last_modified\x18\x02\x20\x01(\tR\x11glyphLast\
    ModifiedBH\x82\xb5\x18Dtimestamp\x20of\x20when\x20this\x20glyph\x20was\
    \x20last\x20modified\x20(RFC\x203339\x20UTC\x20format)\x12C\n\x0fglyph_j\
    son_data\x18\x03\x20\x01(\tR\rglyphJsonDataB\x1b\x82\xb5\x18\x17JSON\x20\
    encoded\x20glyph\x20data\"\xc9\x01\n\x1cCSTAR_WriteGlyphData_Request\x12\
    J\n\tbundle_id\x18\x01\x20\x01(\x04R\x08bundleIdB-\x82\xb5\x18)the\x20Bu\
    ndle\x20ID\x20of\x20the\x20glyphs\x20to\x20be\x20written\x12]\n\nglyph_d\
    ata\x18\x02\x20\x03(\x0b2\x10.CSTAR_GlyphDataR\tglyphDataB,\x82\xb5\x18(\
    one\x20or\x20more\x20items\x20of\x20glyph\x20data\x20to\x20write\"\x9e\
    \x01\n\rCSTAR_Request\x12D\n\x0fread_glyph_data\x18\x01\x20\x01(\x0b2\
    \x1c.CSTAR_ReadGlyphData_RequestR\rreadGlyphData\x12G\n\x10write_glyph_d\
    ata\x18\x02\x20\x01(\x0b2\x1d.CSTAR_WriteGlyphData_RequestR\x0ewriteGlyp\
    hData\"\x87\x02\n\x1cCSTAR_ReadGlyphData_Response\x12\x86\x01\n\tbundle_\
    id\x18\x01\x20\x01(\x04R\x08bundleIdBi\x82\xb5\x18ethe\x20Bundle\x20ID\
    \x20of\x20the\x20returned\x20glyphs;\x20the\x20client\x20should\x20send\
    \x20this\x20back\x20to\x20optimize\x20subsequent\x20queries\x12^\n\nglyp\
    h_data\x18\x02\x20\x03(\x0b2\x10.CSTAR_GlyphDataR\tglyphDataB-\x82\xb5\
    \x18)zero\x20or\x20more\x20items\x20of\x20returned\x20glyph\x20data\"\
    \x7f\n\x1dCSTAR_WriteGlyphData_Response\x12^\n\x06result\x18\x01\x20\x03\
    (\x0e2\x18.E_STAR_GlyphWriteResultR\x06resultB,\x82\xb5\x18(write\x20res\
    ult\x20for\x20each\x20item\x20of\x20glyph\x20data\"\xa1\x01\n\x0eCSTAR_R\
    esponse\x12E\n\x0fread_glyph_data\x18\x01\x20\x01(\x0b2\x1d.CSTAR_ReadGl\
    yphData_ResponseR\rreadGlyphData\x12H\n\x10write_glyph_data\x18\x02\x20\
    \x01(\x0b2\x1e.CSTAR_WriteGlyphData_ResponseR\x0ewriteGlyphData*\xc1\x01\
    \n\x17E_STAR_GlyphWriteResult\x12%\n!k_E_STAR_GlyphWriteResult_Success\
    \x10\0\x12,\n(k_E_STAR_GlyphWriteResult_InvalidMessage\x10\x01\x12)\n%k_\
    E_STAR_GlyphWriteResult_InvalidJSON\x10\x02\x12&\n\"k_E_STAR_GlyphWriteR\
    esult_SQLError\x10\x032\x85\x01\n\x04STAR\x12R\n\x0eProcessMessage\x12\
    \x0e.CSTAR_Request\x1a\x0f.CSTAR_Response\"\x1f\x82\xb5\x18\x1bprocesses\
    \x20a\x20generic\x20message\x1a)\x82\xb5\x18%service\x20for\x20reading/w\
    riting\x20STAR\x20dataB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
