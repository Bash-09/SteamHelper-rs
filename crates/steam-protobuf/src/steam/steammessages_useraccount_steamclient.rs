// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_useraccount.steamclient.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_GetAccountLinkStatus_Request {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Request {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Request {
        <CUserAccount_GetAccountLinkStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Request {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetAccountLinkStatus_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        CUserAccount_GetAccountLinkStatus_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_GetAccountLinkStatus_Request>(
                    "CUserAccount_GetAccountLinkStatus_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_GetAccountLinkStatus_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_GetAccountLinkStatus_Request,
        };
        unsafe {
            instance.get(CUserAccount_GetAccountLinkStatus_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_GetAccountLinkStatus_Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_GetAccountLinkStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_GetAccountLinkStatus_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_GetAccountLinkStatus_Response {
    // message fields
    pwid: ::std::option::Option<u32>,
    identity_verification: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Response {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Response {
        <CUserAccount_GetAccountLinkStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Response {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pwid = 1;


    pub fn get_pwid(&self) -> u32 {
        self.pwid.unwrap_or(0)
    }
    pub fn clear_pwid(&mut self) {
        self.pwid = ::std::option::Option::None;
    }

    pub fn has_pwid(&self) -> bool {
        self.pwid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pwid(&mut self, v: u32) {
        self.pwid = ::std::option::Option::Some(v);
    }

    // optional uint32 identity_verification = 2;


    pub fn get_identity_verification(&self) -> u32 {
        self.identity_verification.unwrap_or(0)
    }
    pub fn clear_identity_verification(&mut self) {
        self.identity_verification = ::std::option::Option::None;
    }

    pub fn has_identity_verification(&self) -> bool {
        self.identity_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identity_verification(&mut self, v: u32) {
        self.identity_verification = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_GetAccountLinkStatus_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pwid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.identity_verification = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.pwid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.identity_verification {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.pwid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.identity_verification {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        CUserAccount_GetAccountLinkStatus_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "pwid",
                    |m: &CUserAccount_GetAccountLinkStatus_Response| { &m.pwid },
                    |m: &mut CUserAccount_GetAccountLinkStatus_Response| { &mut m.pwid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "identity_verification",
                    |m: &CUserAccount_GetAccountLinkStatus_Response| { &m.identity_verification },
                    |m: &mut CUserAccount_GetAccountLinkStatus_Response| { &mut m.identity_verification },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_GetAccountLinkStatus_Response>(
                    "CUserAccount_GetAccountLinkStatus_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_GetAccountLinkStatus_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_GetAccountLinkStatus_Response,
        };
        unsafe {
            instance.get(CUserAccount_GetAccountLinkStatus_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_GetAccountLinkStatus_Response {
    fn clear(&mut self) {
        self.pwid = ::std::option::Option::None;
        self.identity_verification = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_GetAccountLinkStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_GetAccountLinkStatus_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_CancelLicenseForApp_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Request {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Request {
        <CUserAccount_CancelLicenseForApp_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Request {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_CancelLicenseForApp_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Request {
        CUserAccount_CancelLicenseForApp_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CUserAccount_CancelLicenseForApp_Request| { &m.appid },
                    |m: &mut CUserAccount_CancelLicenseForApp_Request| { &mut m.appid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_CancelLicenseForApp_Request>(
                    "CUserAccount_CancelLicenseForApp_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_CancelLicenseForApp_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_CancelLicenseForApp_Request,
        };
        unsafe {
            instance.get(CUserAccount_CancelLicenseForApp_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_CancelLicenseForApp_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_CancelLicenseForApp_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_CancelLicenseForApp_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_CancelLicenseForApp_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Response {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Response {
        <CUserAccount_CancelLicenseForApp_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Response {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_CancelLicenseForApp_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Response {
        CUserAccount_CancelLicenseForApp_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_CancelLicenseForApp_Response>(
                    "CUserAccount_CancelLicenseForApp_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_CancelLicenseForApp_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_CancelLicenseForApp_Response,
        };
        unsafe {
            instance.get(CUserAccount_CancelLicenseForApp_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_CancelLicenseForApp_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_CancelLicenseForApp_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_CancelLicenseForApp_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_CreateFriendInviteToken_Request {
    // message fields
    invite_limit: ::std::option::Option<u32>,
    invite_duration: ::std::option::Option<u32>,
    invite_note: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Request {
        <CUserAccount_CreateFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Request {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional uint32 invite_limit = 1;


    pub fn get_invite_limit(&self) -> u32 {
        self.invite_limit.unwrap_or(0)
    }
    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u32) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint32 invite_duration = 2;


    pub fn get_invite_duration(&self) -> u32 {
        self.invite_duration.unwrap_or(0)
    }
    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u32) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional string invite_note = 3;


    pub fn get_invite_note(&self) -> &str {
        match self.invite_note.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_invite_note(&mut self) {
        self.invite_note.clear();
    }

    pub fn has_invite_note(&self) -> bool {
        self.invite_note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_note(&mut self, v: ::std::string::String) {
        self.invite_note = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_note(&mut self) -> &mut ::std::string::String {
        if self.invite_note.is_none() {
            self.invite_note.set_default();
        }
        self.invite_note.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_note(&mut self) -> ::std::string::String {
        self.invite_note.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_CreateFriendInviteToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.invite_limit = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.invite_duration = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.invite_note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.invite_limit {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.invite_note.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.invite_limit {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.invite_note.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        CUserAccount_CreateFriendInviteToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "invite_limit",
                    |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_limit },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "invite_duration",
                    |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_duration },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_note",
                    |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_note },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_note },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_CreateFriendInviteToken_Request>(
                    "CUserAccount_CreateFriendInviteToken_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_CreateFriendInviteToken_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_CreateFriendInviteToken_Request,
        };
        unsafe {
            instance.get(CUserAccount_CreateFriendInviteToken_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_CreateFriendInviteToken_Request {
    fn clear(&mut self) {
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.invite_note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_CreateFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_CreateFriendInviteToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_CreateFriendInviteToken_Response {
    // message fields
    invite_token: ::protobuf::SingularField<::std::string::String>,
    invite_limit: ::std::option::Option<u64>,
    invite_duration: ::std::option::Option<u64>,
    time_created: ::std::option::Option<u32>,
    valid: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Response {
        <CUserAccount_CreateFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Response {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;


    pub fn get_invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_invite_token(&mut self) {
        self.invite_token.clear();
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token.set_default();
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 invite_limit = 2;


    pub fn get_invite_limit(&self) -> u64 {
        self.invite_limit.unwrap_or(0)
    }
    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u64) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;


    pub fn get_invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }
    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional fixed32 time_created = 4;


    pub fn get_time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }
    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional bool valid = 5;


    pub fn get_valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }
    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_CreateFriendInviteToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.invite_token)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invite_limit = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invite_duration = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.time_created = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.valid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.invite_limit {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time_created {
            my_size += 5;
        }
        if let Some(v) = self.valid {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.invite_token.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.invite_limit {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.valid {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        CUserAccount_CreateFriendInviteToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_token",
                    |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_token },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "invite_limit",
                    |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_limit },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "invite_duration",
                    |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_duration },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                    "time_created",
                    |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.time_created },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.time_created },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "valid",
                    |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.valid },
                    |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.valid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_CreateFriendInviteToken_Response>(
                    "CUserAccount_CreateFriendInviteToken_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_CreateFriendInviteToken_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_CreateFriendInviteToken_Response,
        };
        unsafe {
            instance.get(CUserAccount_CreateFriendInviteToken_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_CreateFriendInviteToken_Response {
    fn clear(&mut self) {
        self.invite_token.clear();
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.valid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_CreateFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_CreateFriendInviteToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_GetFriendInviteTokens_Request {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Request {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Request {
        <CUserAccount_GetFriendInviteTokens_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Request {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetFriendInviteTokens_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        CUserAccount_GetFriendInviteTokens_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_GetFriendInviteTokens_Request>(
                    "CUserAccount_GetFriendInviteTokens_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_GetFriendInviteTokens_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_GetFriendInviteTokens_Request,
        };
        unsafe {
            instance.get(CUserAccount_GetFriendInviteTokens_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_GetFriendInviteTokens_Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_GetFriendInviteTokens_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_GetFriendInviteTokens_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_GetFriendInviteTokens_Response {
    // message fields
    tokens: ::protobuf::RepeatedField<CUserAccount_CreateFriendInviteToken_Response>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Response {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Response {
        <CUserAccount_GetFriendInviteTokens_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Response {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        ::std::default::Default::default()
    }

    // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;


    pub fn get_tokens(&self) -> &[CUserAccount_CreateFriendInviteToken_Response] {
        &self.tokens
    }
    pub fn clear_tokens(&mut self) {
        self.tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_tokens(&mut self, v: ::protobuf::RepeatedField<CUserAccount_CreateFriendInviteToken_Response>) {
        self.tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tokens(&mut self) -> &mut ::protobuf::RepeatedField<CUserAccount_CreateFriendInviteToken_Response> {
        &mut self.tokens
    }

    // Take field
    pub fn take_tokens(&mut self) -> ::protobuf::RepeatedField<CUserAccount_CreateFriendInviteToken_Response> {
        ::std::mem::replace(&mut self.tokens, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CUserAccount_GetFriendInviteTokens_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tokens)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tokens {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        CUserAccount_GetFriendInviteTokens_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CUserAccount_CreateFriendInviteToken_Response>>(
                    "tokens",
                    |m: &CUserAccount_GetFriendInviteTokens_Response| { &m.tokens },
                    |m: &mut CUserAccount_GetFriendInviteTokens_Response| { &mut m.tokens },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_GetFriendInviteTokens_Response>(
                    "CUserAccount_GetFriendInviteTokens_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_GetFriendInviteTokens_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_GetFriendInviteTokens_Response,
        };
        unsafe {
            instance.get(CUserAccount_GetFriendInviteTokens_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_GetFriendInviteTokens_Response {
    fn clear(&mut self) {
        self.tokens.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_GetFriendInviteTokens_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_GetFriendInviteTokens_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_ViewFriendInviteToken_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    invite_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Request {
        <CUserAccount_ViewFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Request {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;


    pub fn get_invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_invite_token(&mut self) {
        self.invite_token.clear();
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token.set_default();
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_ViewFriendInviteToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.invite_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.invite_token.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        CUserAccount_ViewFriendInviteToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CUserAccount_ViewFriendInviteToken_Request| { &m.steamid },
                    |m: &mut CUserAccount_ViewFriendInviteToken_Request| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_token",
                    |m: &CUserAccount_ViewFriendInviteToken_Request| { &m.invite_token },
                    |m: &mut CUserAccount_ViewFriendInviteToken_Request| { &mut m.invite_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_ViewFriendInviteToken_Request>(
                    "CUserAccount_ViewFriendInviteToken_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_ViewFriendInviteToken_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_ViewFriendInviteToken_Request,
        };
        unsafe {
            instance.get(CUserAccount_ViewFriendInviteToken_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_ViewFriendInviteToken_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_ViewFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_ViewFriendInviteToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_ViewFriendInviteToken_Response {
    // message fields
    valid: ::std::option::Option<bool>,
    steamid: ::std::option::Option<u64>,
    invite_duration: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Response {
        <CUserAccount_ViewFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Response {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional bool valid = 1;


    pub fn get_valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }
    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;


    pub fn get_invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }
    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_ViewFriendInviteToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.valid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invite_duration = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.valid {
            my_size += 2;
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.valid {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        CUserAccount_ViewFriendInviteToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "valid",
                    |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.valid },
                    |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.valid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "steamid",
                    |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.steamid },
                    |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "invite_duration",
                    |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.invite_duration },
                    |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.invite_duration },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_ViewFriendInviteToken_Response>(
                    "CUserAccount_ViewFriendInviteToken_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_ViewFriendInviteToken_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_ViewFriendInviteToken_Response,
        };
        unsafe {
            instance.get(CUserAccount_ViewFriendInviteToken_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_ViewFriendInviteToken_Response {
    fn clear(&mut self) {
        self.valid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_ViewFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_ViewFriendInviteToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RedeemFriendInviteToken_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    invite_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Request {
        <CUserAccount_RedeemFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;


    pub fn get_invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_invite_token(&mut self) {
        self.invite_token.clear();
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token.set_default();
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_RedeemFriendInviteToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.invite_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.invite_token.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        CUserAccount_RedeemFriendInviteToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CUserAccount_RedeemFriendInviteToken_Request| { &m.steamid },
                    |m: &mut CUserAccount_RedeemFriendInviteToken_Request| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_token",
                    |m: &CUserAccount_RedeemFriendInviteToken_Request| { &m.invite_token },
                    |m: &mut CUserAccount_RedeemFriendInviteToken_Request| { &mut m.invite_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RedeemFriendInviteToken_Request>(
                    "CUserAccount_RedeemFriendInviteToken_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RedeemFriendInviteToken_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RedeemFriendInviteToken_Request,
        };
        unsafe {
            instance.get(CUserAccount_RedeemFriendInviteToken_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RedeemFriendInviteToken_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RedeemFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RedeemFriendInviteToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RedeemFriendInviteToken_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Response {
        <CUserAccount_RedeemFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RedeemFriendInviteToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        CUserAccount_RedeemFriendInviteToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RedeemFriendInviteToken_Response>(
                    "CUserAccount_RedeemFriendInviteToken_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RedeemFriendInviteToken_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RedeemFriendInviteToken_Response,
        };
        unsafe {
            instance.get(CUserAccount_RedeemFriendInviteToken_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RedeemFriendInviteToken_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RedeemFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RedeemFriendInviteToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RevokeFriendInviteToken_Request {
    // message fields
    invite_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Request {
        <CUserAccount_RevokeFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;


    pub fn get_invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_invite_token(&mut self) {
        self.invite_token.clear();
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token.set_default();
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_RevokeFriendInviteToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.invite_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.invite_token.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        CUserAccount_RevokeFriendInviteToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invite_token",
                    |m: &CUserAccount_RevokeFriendInviteToken_Request| { &m.invite_token },
                    |m: &mut CUserAccount_RevokeFriendInviteToken_Request| { &mut m.invite_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RevokeFriendInviteToken_Request>(
                    "CUserAccount_RevokeFriendInviteToken_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RevokeFriendInviteToken_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RevokeFriendInviteToken_Request,
        };
        unsafe {
            instance.get(CUserAccount_RevokeFriendInviteToken_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RevokeFriendInviteToken_Request {
    fn clear(&mut self) {
        self.invite_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RevokeFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RevokeFriendInviteToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RevokeFriendInviteToken_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Response {
        <CUserAccount_RevokeFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RevokeFriendInviteToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        CUserAccount_RevokeFriendInviteToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RevokeFriendInviteToken_Response>(
                    "CUserAccount_RevokeFriendInviteToken_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RevokeFriendInviteToken_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RevokeFriendInviteToken_Response,
        };
        unsafe {
            instance.get(CUserAccount_RevokeFriendInviteToken_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RevokeFriendInviteToken_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RevokeFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RevokeFriendInviteToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RegisterCompatTool_Request {
    // message fields
    compat_tool: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Request {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Request {
        <CUserAccount_RegisterCompatTool_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Request {
    pub fn new() -> CUserAccount_RegisterCompatTool_Request {
        ::std::default::Default::default()
    }

    // optional uint32 compat_tool = 1;


    pub fn get_compat_tool(&self) -> u32 {
        self.compat_tool.unwrap_or(0)
    }
    pub fn clear_compat_tool(&mut self) {
        self.compat_tool = ::std::option::Option::None;
    }

    pub fn has_compat_tool(&self) -> bool {
        self.compat_tool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compat_tool(&mut self, v: u32) {
        self.compat_tool = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_RegisterCompatTool_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.compat_tool = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.compat_tool {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.compat_tool {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RegisterCompatTool_Request {
        CUserAccount_RegisterCompatTool_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "compat_tool",
                    |m: &CUserAccount_RegisterCompatTool_Request| { &m.compat_tool },
                    |m: &mut CUserAccount_RegisterCompatTool_Request| { &mut m.compat_tool },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RegisterCompatTool_Request>(
                    "CUserAccount_RegisterCompatTool_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Request {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RegisterCompatTool_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RegisterCompatTool_Request,
        };
        unsafe {
            instance.get(CUserAccount_RegisterCompatTool_Request::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RegisterCompatTool_Request {
    fn clear(&mut self) {
        self.compat_tool = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RegisterCompatTool_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RegisterCompatTool_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CUserAccount_RegisterCompatTool_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Response {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Response {
        <CUserAccount_RegisterCompatTool_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Response {
    pub fn new() -> CUserAccount_RegisterCompatTool_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RegisterCompatTool_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CUserAccount_RegisterCompatTool_Response {
        CUserAccount_RegisterCompatTool_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CUserAccount_RegisterCompatTool_Response>(
                    "CUserAccount_RegisterCompatTool_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Response {
        static mut instance: ::protobuf::lazy::Lazy<CUserAccount_RegisterCompatTool_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CUserAccount_RegisterCompatTool_Response,
        };
        unsafe {
            instance.get(CUserAccount_RegisterCompatTool_Response::new)
        }
    }
}

impl ::protobuf::Clear for CUserAccount_RegisterCompatTool_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CUserAccount_RegisterCompatTool_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserAccount_RegisterCompatTool_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CAccountLinking_GetLinkedAccountInfo_Request {
    // message fields
    account_type: ::std::option::Option<EInternalAccountType>,
    account_id: ::std::option::Option<u64>,
    filter: ::std::option::Option<EExternalAccountType>,
    return_access_token: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Request {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Request {
        <CAccountLinking_GetLinkedAccountInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Request {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        ::std::default::Default::default()
    }

    // optional .EInternalAccountType account_type = 1;


    pub fn get_account_type(&self) -> EInternalAccountType {
        self.account_type.unwrap_or(EInternalAccountType::k_EInternalSteamAccountType)
    }
    pub fn clear_account_type(&mut self) {
        self.account_type = ::std::option::Option::None;
    }

    pub fn has_account_type(&self) -> bool {
        self.account_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: EInternalAccountType) {
        self.account_type = ::std::option::Option::Some(v);
    }

    // optional uint64 account_id = 2;


    pub fn get_account_id(&self) -> u64 {
        self.account_id.unwrap_or(0)
    }
    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u64) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional .EExternalAccountType filter = 3;


    pub fn get_filter(&self) -> EExternalAccountType {
        self.filter.unwrap_or(EExternalAccountType::k_EExternalNone)
    }
    pub fn clear_filter(&mut self) {
        self.filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: EExternalAccountType) {
        self.filter = ::std::option::Option::Some(v);
    }

    // optional bool return_access_token = 4;


    pub fn get_return_access_token(&self) -> bool {
        self.return_access_token.unwrap_or(false)
    }
    pub fn clear_return_access_token(&mut self) {
        self.return_access_token = ::std::option::Option::None;
    }

    pub fn has_return_access_token(&self) -> bool {
        self.return_access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_return_access_token(&mut self, v: bool) {
        self.return_access_token = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountLinking_GetLinkedAccountInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.account_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.filter, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.return_access_token = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.account_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.filter {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.return_access_token {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.account_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(v) = self.account_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.filter {
            os.write_enum(3, v.value())?;
        }
        if let Some(v) = self.return_access_token {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        CAccountLinking_GetLinkedAccountInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EInternalAccountType>>(
                    "account_type",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.account_type },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.account_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "account_id",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.account_id },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EExternalAccountType>>(
                    "filter",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.filter },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "return_access_token",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.return_access_token },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.return_access_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CAccountLinking_GetLinkedAccountInfo_Request>(
                    "CAccountLinking_GetLinkedAccountInfo_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Request {
        static mut instance: ::protobuf::lazy::Lazy<CAccountLinking_GetLinkedAccountInfo_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CAccountLinking_GetLinkedAccountInfo_Request,
        };
        unsafe {
            instance.get(CAccountLinking_GetLinkedAccountInfo_Request::new)
        }
    }
}

impl ::protobuf::Clear for CAccountLinking_GetLinkedAccountInfo_Request {
    fn clear(&mut self) {
        self.account_type = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.filter = ::std::option::Option::None;
        self.return_access_token = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAccountLinking_GetLinkedAccountInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountLinking_GetLinkedAccountInfo_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CAccountLinking_GetLinkedAccountInfo_Response {
    // message fields
    external_accounts: ::protobuf::RepeatedField<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Response {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Response {
        <CAccountLinking_GetLinkedAccountInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Response {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        ::std::default::Default::default()
    }

    // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;


    pub fn get_external_accounts(&self) -> &[CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response] {
        &self.external_accounts
    }
    pub fn clear_external_accounts(&mut self) {
        self.external_accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_accounts(&mut self, v: ::protobuf::RepeatedField<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>) {
        self.external_accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_accounts(&mut self) -> &mut ::protobuf::RepeatedField<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response> {
        &mut self.external_accounts
    }

    // Take field
    pub fn take_external_accounts(&mut self) -> ::protobuf::RepeatedField<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response> {
        ::std::mem::replace(&mut self.external_accounts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CAccountLinking_GetLinkedAccountInfo_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.external_accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.external_accounts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.external_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.external_accounts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        CAccountLinking_GetLinkedAccountInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>>(
                    "external_accounts",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response| { &m.external_accounts },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response| { &mut m.external_accounts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CAccountLinking_GetLinkedAccountInfo_Response>(
                    "CAccountLinking_GetLinkedAccountInfo_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Response {
        static mut instance: ::protobuf::lazy::Lazy<CAccountLinking_GetLinkedAccountInfo_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CAccountLinking_GetLinkedAccountInfo_Response,
        };
        unsafe {
            instance.get(CAccountLinking_GetLinkedAccountInfo_Response::new)
        }
    }
}

impl ::protobuf::Clear for CAccountLinking_GetLinkedAccountInfo_Response {
    fn clear(&mut self) {
        self.external_accounts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAccountLinking_GetLinkedAccountInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountLinking_GetLinkedAccountInfo_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    // message fields
    external_type: ::std::option::Option<EExternalAccountType>,
    external_id: ::protobuf::SingularField<::std::string::String>,
    external_user_name: ::protobuf::SingularField<::std::string::String>,
    external_url: ::protobuf::SingularField<::std::string::String>,
    access_token: ::protobuf::SingularField<::std::string::String>,
    access_token_secret: ::protobuf::SingularField<::std::string::String>,
    is_valid: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
        <CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
        ::std::default::Default::default()
    }

    // optional .EExternalAccountType external_type = 1;


    pub fn get_external_type(&self) -> EExternalAccountType {
        self.external_type.unwrap_or(EExternalAccountType::k_EExternalNone)
    }
    pub fn clear_external_type(&mut self) {
        self.external_type = ::std::option::Option::None;
    }

    pub fn has_external_type(&self) -> bool {
        self.external_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_type(&mut self, v: EExternalAccountType) {
        self.external_type = ::std::option::Option::Some(v);
    }

    // optional string external_id = 2;


    pub fn get_external_id(&self) -> &str {
        match self.external_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_external_id(&mut self) {
        self.external_id.clear();
    }

    pub fn has_external_id(&self) -> bool {
        self.external_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_id(&mut self, v: ::std::string::String) {
        self.external_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_id(&mut self) -> &mut ::std::string::String {
        if self.external_id.is_none() {
            self.external_id.set_default();
        }
        self.external_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_external_id(&mut self) -> ::std::string::String {
        self.external_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string external_user_name = 3;


    pub fn get_external_user_name(&self) -> &str {
        match self.external_user_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_external_user_name(&mut self) {
        self.external_user_name.clear();
    }

    pub fn has_external_user_name(&self) -> bool {
        self.external_user_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_user_name(&mut self, v: ::std::string::String) {
        self.external_user_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_user_name(&mut self) -> &mut ::std::string::String {
        if self.external_user_name.is_none() {
            self.external_user_name.set_default();
        }
        self.external_user_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_external_user_name(&mut self) -> ::std::string::String {
        self.external_user_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string external_url = 4;


    pub fn get_external_url(&self) -> &str {
        match self.external_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_external_url(&mut self) {
        self.external_url.clear();
    }

    pub fn has_external_url(&self) -> bool {
        self.external_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_url(&mut self, v: ::std::string::String) {
        self.external_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external_url(&mut self) -> &mut ::std::string::String {
        if self.external_url.is_none() {
            self.external_url.set_default();
        }
        self.external_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_external_url(&mut self) -> ::std::string::String {
        self.external_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token = 5;


    pub fn get_access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token.set_default();
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token_secret = 6;


    pub fn get_access_token_secret(&self) -> &str {
        match self.access_token_secret.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_access_token_secret(&mut self) {
        self.access_token_secret.clear();
    }

    pub fn has_access_token_secret(&self) -> bool {
        self.access_token_secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token_secret(&mut self, v: ::std::string::String) {
        self.access_token_secret = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token_secret(&mut self) -> &mut ::std::string::String {
        if self.access_token_secret.is_none() {
            self.access_token_secret.set_default();
        }
        self.access_token_secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token_secret(&mut self) -> ::std::string::String {
        self.access_token_secret.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_valid = 7;


    pub fn get_is_valid(&self) -> bool {
        self.is_valid.unwrap_or(false)
    }
    pub fn clear_is_valid(&mut self) {
        self.is_valid = ::std::option::Option::None;
    }

    pub fn has_is_valid(&self) -> bool {
        self.is_valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_valid(&mut self, v: bool) {
        self.is_valid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.external_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.external_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.external_user_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.external_url)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.access_token)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.access_token_secret)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_valid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.external_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.external_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.external_user_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.external_url.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.access_token_secret.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.is_valid {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.external_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.external_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.external_user_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.external_url.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.access_token.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.access_token_secret.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.is_valid {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
        CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EExternalAccountType>>(
                    "external_type",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.external_type },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.external_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "external_id",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.external_id },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.external_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "external_user_name",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.external_user_name },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.external_user_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "external_url",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.external_url },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.external_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "access_token",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.access_token },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.access_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "access_token_secret",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.access_token_secret },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.access_token_secret },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_valid",
                    |m: &CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &m.is_valid },
                    |m: &mut CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response| { &mut m.is_valid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(
                    "CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
        static mut instance: ::protobuf::lazy::Lazy<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response,
        };
        unsafe {
            instance.get(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::new)
        }
    }
}

impl ::protobuf::Clear for CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    fn clear(&mut self) {
        self.external_type = ::std::option::Option::None;
        self.external_id.clear();
        self.external_user_name.clear();
        self.external_url.clear();
        self.access_token.clear();
        self.access_token_secret.clear();
        self.is_valid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CEmbeddedClient_AuthorizeCurrentDevice_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    device_info: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn default() -> &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
        <CEmbeddedClient_AuthorizeCurrentDevice_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeCurrentDevice_Request {
    pub fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string device_info = 3;


    pub fn get_device_info(&self) -> &str {
        match self.device_info.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_info(&mut self) {
        self.device_info.clear();
    }

    pub fn has_device_info(&self) -> bool {
        self.device_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_info(&mut self, v: ::std::string::String) {
        self.device_info = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_info(&mut self) -> &mut ::std::string::String {
        if self.device_info.is_none() {
            self.device_info.set_default();
        }
        self.device_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_info(&mut self) -> ::std::string::String {
        self.device_info.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.device_info.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.device_info.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        CEmbeddedClient_AuthorizeCurrentDevice_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.steamid },
                    |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.appid },
                    |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_info",
                    |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.device_info },
                    |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.device_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CEmbeddedClient_AuthorizeCurrentDevice_Request>(
                    "CEmbeddedClient_AuthorizeCurrentDevice_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeCurrentDevice_Request {
        static mut instance: ::protobuf::lazy::Lazy<CEmbeddedClient_AuthorizeCurrentDevice_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CEmbeddedClient_AuthorizeCurrentDevice_Request,
        };
        unsafe {
            instance.get(CEmbeddedClient_AuthorizeCurrentDevice_Request::new)
        }
    }
}

impl ::protobuf::Clear for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CEmbeddedClient_Token {
    // message fields
    steamid: ::std::option::Option<u64>,
    client_token: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    expiry: ::std::option::Option<u32>,
    deviceid: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_Token {
    fn default() -> &'a CEmbeddedClient_Token {
        <CEmbeddedClient_Token as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_Token {
    pub fn new() -> CEmbeddedClient_Token {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes client_token = 2;


    pub fn get_client_token(&self) -> &[u8] {
        match self.client_token.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_client_token(&mut self) {
        self.client_token.clear();
    }

    pub fn has_client_token(&self) -> bool {
        self.client_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.client_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.client_token.is_none() {
            self.client_token.set_default();
        }
        self.client_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_token(&mut self) -> ::std::vec::Vec<u8> {
        self.client_token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 expiry = 3;


    pub fn get_expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    // optional uint32 deviceid = 4;


    pub fn get_deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }
    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CEmbeddedClient_Token {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.client_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.expiry = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.deviceid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.client_token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.expiry {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.deviceid {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.client_token.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CEmbeddedClient_Token {
        CEmbeddedClient_Token::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CEmbeddedClient_Token| { &m.steamid },
                    |m: &mut CEmbeddedClient_Token| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "client_token",
                    |m: &CEmbeddedClient_Token| { &m.client_token },
                    |m: &mut CEmbeddedClient_Token| { &mut m.client_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "expiry",
                    |m: &CEmbeddedClient_Token| { &m.expiry },
                    |m: &mut CEmbeddedClient_Token| { &mut m.expiry },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "deviceid",
                    |m: &CEmbeddedClient_Token| { &m.deviceid },
                    |m: &mut CEmbeddedClient_Token| { &mut m.deviceid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CEmbeddedClient_Token>(
                    "CEmbeddedClient_Token",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CEmbeddedClient_Token {
        static mut instance: ::protobuf::lazy::Lazy<CEmbeddedClient_Token> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CEmbeddedClient_Token,
        };
        unsafe {
            instance.get(CEmbeddedClient_Token::new)
        }
    }
}

impl ::protobuf::Clear for CEmbeddedClient_Token {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.client_token.clear();
        self.expiry = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CEmbeddedClient_Token {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEmbeddedClient_Token {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CEmbeddedClient_AuthorizeDevice_Response {
    // message fields
    result: ::std::option::Option<u32>,
    token: ::protobuf::SingularPtrField<CEmbeddedClient_Token>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeDevice_Response {
    fn default() -> &'a CEmbeddedClient_AuthorizeDevice_Response {
        <CEmbeddedClient_AuthorizeDevice_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeDevice_Response {
    pub fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;


    pub fn get_result(&self) -> u32 {
        self.result.unwrap_or(0)
    }
    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional .CEmbeddedClient_Token token = 2;


    pub fn get_token(&self) -> &CEmbeddedClient_Token {
        self.token.as_ref().unwrap_or_else(|| CEmbeddedClient_Token::default_instance())
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: CEmbeddedClient_Token) {
        self.token = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut CEmbeddedClient_Token {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> CEmbeddedClient_Token {
        self.token.take().unwrap_or_else(|| CEmbeddedClient_Token::new())
    }
}

impl ::protobuf::Message for CEmbeddedClient_AuthorizeDevice_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.token {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.token.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        CEmbeddedClient_AuthorizeDevice_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "result",
                    |m: &CEmbeddedClient_AuthorizeDevice_Response| { &m.result },
                    |m: &mut CEmbeddedClient_AuthorizeDevice_Response| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CEmbeddedClient_Token>>(
                    "token",
                    |m: &CEmbeddedClient_AuthorizeDevice_Response| { &m.token },
                    |m: &mut CEmbeddedClient_AuthorizeDevice_Response| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CEmbeddedClient_AuthorizeDevice_Response>(
                    "CEmbeddedClient_AuthorizeDevice_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeDevice_Response {
        static mut instance: ::protobuf::lazy::Lazy<CEmbeddedClient_AuthorizeDevice_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CEmbeddedClient_AuthorizeDevice_Response,
        };
        unsafe {
            instance.get(CEmbeddedClient_AuthorizeDevice_Response::new)
        }
    }
}

impl ::protobuf::Clear for CEmbeddedClient_AuthorizeDevice_Response {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CEmbeddedClient_AuthorizeDevice_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEmbeddedClient_AuthorizeDevice_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum EInternalAccountType {
    k_EInternalSteamAccountType = 1,
    k_EInternalClanType = 2,
    k_EInternalAppType = 3,
    k_EInternalBroadcastChannelType = 4,
}

impl ::protobuf::ProtobufEnum for EInternalAccountType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EInternalAccountType> {
        match value {
            1 => ::std::option::Option::Some(EInternalAccountType::k_EInternalSteamAccountType),
            2 => ::std::option::Option::Some(EInternalAccountType::k_EInternalClanType),
            3 => ::std::option::Option::Some(EInternalAccountType::k_EInternalAppType),
            4 => ::std::option::Option::Some(EInternalAccountType::k_EInternalBroadcastChannelType),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EInternalAccountType] = &[
            EInternalAccountType::k_EInternalSteamAccountType,
            EInternalAccountType::k_EInternalClanType,
            EInternalAccountType::k_EInternalAppType,
            EInternalAccountType::k_EInternalBroadcastChannelType,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EInternalAccountType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EInternalAccountType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EInternalAccountType {
    fn default() -> Self {
        EInternalAccountType::k_EInternalSteamAccountType
    }
}

impl ::protobuf::reflect::ProtobufValue for EInternalAccountType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum EExternalAccountType {
    k_EExternalNone = 0,
    k_EExternalSteamAccount = 1,
    k_EExternalGoogleAccount = 2,
    k_EExternalFacebookAccount = 3,
    k_EExternalTwitterAccount = 4,
    k_EExternalTwitchAccount = 5,
    k_EExternalYouTubeChannelAccount = 6,
    k_EExternalFacebookPage = 7,
}

impl ::protobuf::ProtobufEnum for EExternalAccountType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EExternalAccountType> {
        match value {
            0 => ::std::option::Option::Some(EExternalAccountType::k_EExternalNone),
            1 => ::std::option::Option::Some(EExternalAccountType::k_EExternalSteamAccount),
            2 => ::std::option::Option::Some(EExternalAccountType::k_EExternalGoogleAccount),
            3 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookAccount),
            4 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitterAccount),
            5 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitchAccount),
            6 => ::std::option::Option::Some(EExternalAccountType::k_EExternalYouTubeChannelAccount),
            7 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookPage),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EExternalAccountType] = &[
            EExternalAccountType::k_EExternalNone,
            EExternalAccountType::k_EExternalSteamAccount,
            EExternalAccountType::k_EExternalGoogleAccount,
            EExternalAccountType::k_EExternalFacebookAccount,
            EExternalAccountType::k_EExternalTwitterAccount,
            EExternalAccountType::k_EExternalTwitchAccount,
            EExternalAccountType::k_EExternalYouTubeChannelAccount,
            EExternalAccountType::k_EExternalFacebookPage,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EExternalAccountType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EExternalAccountType {
}

impl ::std::default::Default for EExternalAccountType {
    fn default() -> Self {
        EExternalAccountType::k_EExternalNone
    }
}

impl ::protobuf::reflect::ProtobufValue for EExternalAccountType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_useraccount.steamclient.proto\x1a,steammessages_unified\
    _base.steamclient.proto\"+\n)CUserAccount_GetAccountLinkStatus_Request\"\
    u\n*CUserAccount_GetAccountLinkStatus_Response\x12\x12\n\x04pwid\x18\x01\
    \x20\x01(\rR\x04pwid\x123\n\x15identity_verification\x18\x02\x20\x01(\rR\
    \x14identityVerification\"@\n(CUserAccount_CancelLicenseForApp_Request\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"+\n)CUserAccount_Cance\
    lLicenseForApp_Response\"\x9b\x01\n,CUserAccount_CreateFriendInviteToken\
    _Request\x12!\n\x0cinvite_limit\x18\x01\x20\x01(\rR\x0binviteLimit\x12'\
    \n\x0finvite_duration\x18\x02\x20\x01(\rR\x0einviteDuration\x12\x1f\n\
    \x0binvite_note\x18\x03\x20\x01(\tR\ninviteNote\"\xd7\x01\n-CUserAccount\
    _CreateFriendInviteToken_Response\x12!\n\x0cinvite_token\x18\x01\x20\x01\
    (\tR\x0binviteToken\x12!\n\x0cinvite_limit\x18\x02\x20\x01(\x04R\x0binvi\
    teLimit\x12'\n\x0finvite_duration\x18\x03\x20\x01(\x04R\x0einviteDuratio\
    n\x12!\n\x0ctime_created\x18\x04\x20\x01(\x07R\x0btimeCreated\x12\x14\n\
    \x05valid\x18\x05\x20\x01(\x08R\x05valid\",\n*CUserAccount_GetFriendInvi\
    teTokens_Request\"u\n+CUserAccount_GetFriendInviteTokens_Response\x12F\n\
    \x06tokens\x18\x01\x20\x03(\x0b2..CUserAccount_CreateFriendInviteToken_R\
    esponseR\x06tokens\"i\n*CUserAccount_ViewFriendInviteToken_Request\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12!\n\x0cinvite_toke\
    n\x18\x02\x20\x01(\tR\x0binviteToken\"\x86\x01\n+CUserAccount_ViewFriend\
    InviteToken_Response\x12\x14\n\x05valid\x18\x01\x20\x01(\x08R\x05valid\
    \x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\x12'\n\x0finvite_\
    duration\x18\x03\x20\x01(\x04R\x0einviteDuration\"k\n,CUserAccount_Redee\
    mFriendInviteToken_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\
    \x07steamid\x12!\n\x0cinvite_token\x18\x02\x20\x01(\tR\x0binviteToken\"/\
    \n-CUserAccount_RedeemFriendInviteToken_Response\"Q\n,CUserAccount_Revok\
    eFriendInviteToken_Request\x12!\n\x0cinvite_token\x18\x01\x20\x01(\tR\
    \x0binviteToken\"/\n-CUserAccount_RevokeFriendInviteToken_Response\"J\n'\
    CUserAccount_RegisterCompatTool_Request\x12\x1f\n\x0bcompat_tool\x18\x01\
    \x20\x01(\rR\ncompatTool\"*\n(CUserAccount_RegisterCompatTool_Response\"\
    \xd0\x03\n,CAccountLinking_GetLinkedAccountInfo_Request\x12U\n\x0caccoun\
    t_type\x18\x01\x20\x01(\x0e2\x15.EInternalAccountType:\x1bk_EInternalSte\
    amAccountTypeR\x0baccountType\x126\n\naccount_id\x18\x02\x20\x01(\x04R\t\
    accountIdB\x17\x82\xb5\x18\x13Internal\x20account\x20ID\x12|\n\x06filter\
    \x18\x03\x20\x01(\x0e2\x15.EExternalAccountType:\x0fk_EExternalNoneR\x06\
    filterB<\x82\xb5\x188if\x20specified\x20then\x20only\x20return\x20this\
    \x20external\x20account\x20type\x12\x92\x01\n\x13return_access_token\x18\
    \x04\x20\x01(\x08R\x11returnAccessTokenBb\x82\xb5\x18^if\x20provided\x20\
    and\x20true,\x20then\x20returns\x20valid\x20access\x20token\x20if\x20ava\
    ilable.\x20It\x20may\x20refresh\x20the\x20token.\x20\"\xff\x06\n-CAccoun\
    tLinking_GetLinkedAccountInfo_Response\x12z\n\x11external_accounts\x18\
    \x01\x20\x03(\x0b2M.CAccountLinking_GetLinkedAccountInfo_Response.CExter\
    nalAccountTuple_ResponseR\x10externalAccounts\x1a\xd1\x05\n\x1eCExternal\
    AccountTuple_Response\x12K\n\rexternal_type\x18\x01\x20\x01(\x0e2\x15.EE\
    xternalAccountType:\x0fk_EExternalNoneR\x0cexternalType\x12G\n\x0bextern\
    al_id\x18\x02\x20\x01(\tR\nexternalIdB&\x82\xb5\x18\"unique\x20external\
    \x20account\x20identifier\x12L\n\x12external_user_name\x18\x03\x20\x01(\
    \tR\x10externalUserNameB\x1e\x82\xb5\x18\x1auser\x20readable;\x20best\
    \x20effort\x12`\n\x0cexternal_url\x18\x04\x20\x01(\tR\x0bexternalUrlB=\
    \x82\xb5\x189required\x20for\x20all,\x20can\x20be\x20a\x20sentinal\x20to\
    \x20verify\x20correctness\x12M\n\x0caccess_token\x18\x05\x20\x01(\tR\x0b\
    accessTokenB*\x82\xb5\x18&provided\x20if\x20requeest\x20and\x20it\x20was\
    \x20valid.\x12~\n\x13access_token_secret\x18\x06\x20\x01(\tR\x11accessTo\
    kenSecretBN\x82\xb5\x18Jrequired\x20for\x20OAuth\x20v1\x20and\x20signing\
    \x20the\x20message,\x20provided\x20with\x20access\x20token.\x12\x99\x01\
    \n\x08is_valid\x18\x07\x20\x01(\x08R\x07isValidB~\x82\xb5\x18zIf\x20fals\
    e,\x20it\x20means\x20access\x20token\x20no\x20longer\x20work\x20(expired\
    ,\x20disconnected)\x20and\x20the\x20link\x20is\x20now\x20broken.\x20Info\
    rm\x20user\x20to\x20refresh.\"\x81\x01\n.CEmbeddedClient_AuthorizeCurren\
    tDevice_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\
    \x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x1f\n\x0bdevice_inf\
    o\x18\x03\x20\x01(\tR\ndeviceInfo\"\x88\x01\n\x15CEmbeddedClient_Token\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12!\n\x0cclient_\
    token\x18\x02\x20\x01(\x0cR\x0bclientToken\x12\x16\n\x06expiry\x18\x03\
    \x20\x01(\rR\x06expiry\x12\x1a\n\x08deviceid\x18\x04\x20\x01(\rR\x08devi\
    ceid\"p\n(CEmbeddedClient_AuthorizeDevice_Response\x12\x16\n\x06result\
    \x18\x01\x20\x01(\rR\x06result\x12,\n\x05token\x18\x02\x20\x01(\x0b2\x16\
    .CEmbeddedClient_TokenR\x05token*\x8d\x01\n\x14EInternalAccountType\x12\
    \x1f\n\x1bk_EInternalSteamAccountType\x10\x01\x12\x17\n\x13k_EInternalCl\
    anType\x10\x02\x12\x16\n\x12k_EInternalAppType\x10\x03\x12#\n\x1fk_EInte\
    rnalBroadcastChannelType\x10\x04*\x86\x02\n\x14EExternalAccountType\x12\
    \x13\n\x0fk_EExternalNone\x10\0\x12\x1b\n\x17k_EExternalSteamAccount\x10\
    \x01\x12\x1c\n\x18k_EExternalGoogleAccount\x10\x02\x12\x1e\n\x1ak_EExter\
    nalFacebookAccount\x10\x03\x12\x1d\n\x19k_EExternalTwitterAccount\x10\
    \x04\x12\x1c\n\x18k_EExternalTwitchAccount\x10\x05\x12$\n\x20k_EExternal\
    YouTubeChannelAccount\x10\x06\x12\x1b\n\x17k_EExternalFacebookPage\x10\
    \x072\xe8\n\n\x0bUserAccount\x12\x90\x01\n\x14GetAccountLinkStatus\x12*.\
    CUserAccount_GetAccountLinkStatus_Request\x1a+.CUserAccount_GetAccountLi\
    nkStatus_Response\"\x1f\x82\xb5\x18\x1bFetches\x20account\x20link\x20sta\
    tus\x12\x93\x01\n\x13CancelLicenseForApp\x12).CUserAccount_CancelLicense\
    ForApp_Request\x1a*.CUserAccount_CancelLicenseForApp_Response\"%\x82\xb5\
    \x18!Cancels\x20a\x20free\x20license\x20for\x20a\x20user\x12\xc4\x01\n\
    \x17CreateFriendInviteToken\x12-.CUserAccount_CreateFriendInviteToken_Re\
    quest\x1a..CUserAccount_CreateFriendInviteToken_Response\"J\x82\xb5\x18F\
    Create\x20a\x20limited-use\x20token\x20that\x20can\x20be\x20used\x20to\
    \x20create\x20a\x20friend\x20request\x12\xa1\x01\n\x15GetFriendInviteTok\
    ens\x12+.CUserAccount_GetFriendInviteTokens_Request\x1a,.CUserAccount_Ge\
    tFriendInviteTokens_Response\"-\x82\xb5\x18)Get\x20the\x20set\x20of\x20a\
    ctive\x20tokens\x20for\x20the\x20user\x12\x9b\x01\n\x15ViewFriendInviteT\
    oken\x12+.CUserAccount_ViewFriendInviteToken_Request\x1a,.CUserAccount_V\
    iewFriendInviteToken_Response\"'\x82\xb5\x18#View\x20details\x20about\
    \x20an\x20invite\x20token\x20\x12\xb7\x01\n\x17RedeemFriendInviteToken\
    \x12-.CUserAccount_RedeemFriendInviteToken_Request\x1a..CUserAccount_Red\
    eemFriendInviteToken_Response\"=\x82\xb5\x189Create\x20a\x20friend\x20re\
    lationship\x20using\x20the\x20given\x20invite\x20token\x12\xa2\x01\n\x17\
    RevokeFriendInviteToken\x12-.CUserAccount_RevokeFriendInviteToken_Reques\
    t\x1a..CUserAccount_RevokeFriendInviteToken_Response\"(\x82\xb5\x18$Revo\
    ke\x20an\x20active\x20friend\x20invite\x20token\x12\x98\x01\n\x12Registe\
    rCompatTool\x12(.CUserAccount_RegisterCompatTool_Request\x1a).CUserAccou\
    nt_RegisterCompatTool_Response\"-\x82\xb5\x18)Register\x20intended\x20ac\
    count\x20usage\x20of\x20a\x20tool\x1a-\x82\xb5\x18)A\x20service\x20to\
    \x20get\x20user\x20account\x20information2\x9d\x02\n\x0eAccountLinking\
    \x12\xd3\x01\n\x14GetLinkedAccountInfo\x12-.CAccountLinking_GetLinkedAcc\
    ountInfo_Request\x1a..CAccountLinking_GetLinkedAccountInfo_Response\"\\\
    \x82\xb5\x18XList\x20all\x20my\x20active\x20linked\x20external\x20accoun\
    ts;\x20may\x20be\x20requested\x20to\x20return\x20the\x20access\x20token\
    \x1a5\x82\xb5\x181A\x20service\x20to\x20manage\x20and\x20link\x20to\x20e\
    xternal\x20accounts2\xa4\x02\n\x0eEmbeddedClient\x12\xc1\x01\n\x16Author\
    izeCurrentDevice\x12/.CEmbeddedClient_AuthorizeCurrentDevice_Request\x1a\
    ).CEmbeddedClient_AuthorizeDevice_Response\"K\x82\xb5\x18GUse\x20a\x20lo\
    gged-in\x20(password/etc)\x20session\x20to\x20create\x20a\x20durable\x20\
    access\x20token\x1aN\x82\xb5\x18JService\x20to\x20authorize\x20and\x20ma\
    nage\x20Steam\x20functions\x20directly\x20embedded\x20in\x20gamesB\x03\
    \x80\x01\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
