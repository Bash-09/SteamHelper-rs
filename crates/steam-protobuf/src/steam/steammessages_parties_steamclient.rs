// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_parties.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct CParties_JoinParty_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Request {
    fn default() -> &'a CParties_JoinParty_Request {
        <CParties_JoinParty_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Request {
    pub fn new() -> CParties_JoinParty_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 beacon_id = 2;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_JoinParty_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.beacon_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_JoinParty_Request {
        CParties_JoinParty_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CParties_JoinParty_Request| { &m.steamid },
                |m: &mut CParties_JoinParty_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_JoinParty_Request| { &m.beacon_id },
                |m: &mut CParties_JoinParty_Request| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_JoinParty_Request>(
                "CParties_JoinParty_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_JoinParty_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_JoinParty_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_JoinParty_Request::new)
    }
}

impl ::protobuf::Clear for CParties_JoinParty_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_JoinParty_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_JoinParty_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_JoinParty_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    connect_string: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Response {
    fn default() -> &'a CParties_JoinParty_Response {
        <CParties_JoinParty_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Response {
    pub fn new() -> CParties_JoinParty_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 2;


    pub fn get_connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_connect_string(&mut self) {
        self.connect_string.clear();
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string.set_default();
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CParties_JoinParty_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.connect_string)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.connect_string.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_JoinParty_Response {
        CParties_JoinParty_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_JoinParty_Response| { &m.beacon_id },
                |m: &mut CParties_JoinParty_Response| { &mut m.beacon_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connect_string",
                |m: &CParties_JoinParty_Response| { &m.connect_string },
                |m: &mut CParties_JoinParty_Response| { &mut m.connect_string },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_JoinParty_Response>(
                "CParties_JoinParty_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_JoinParty_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_JoinParty_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_JoinParty_Response::new)
    }
}

impl ::protobuf::Clear for CParties_JoinParty_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.connect_string.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_JoinParty_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_JoinParty_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_BeaconLocation {
    // message fields
    location_type: ::std::option::Option<u32>,
    location_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_BeaconLocation {
    fn default() -> &'a CParties_BeaconLocation {
        <CParties_BeaconLocation as ::protobuf::Message>::default_instance()
    }
}

impl CParties_BeaconLocation {
    pub fn new() -> CParties_BeaconLocation {
        ::std::default::Default::default()
    }

    // optional uint32 location_type = 1;


    pub fn get_location_type(&self) -> u32 {
        self.location_type.unwrap_or(0)
    }
    pub fn clear_location_type(&mut self) {
        self.location_type = ::std::option::Option::None;
    }

    pub fn has_location_type(&self) -> bool {
        self.location_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_type(&mut self, v: u32) {
        self.location_type = ::std::option::Option::Some(v);
    }

    // optional uint64 location_id = 2;


    pub fn get_location_id(&self) -> u64 {
        self.location_id.unwrap_or(0)
    }
    pub fn clear_location_id(&mut self) {
        self.location_id = ::std::option::Option::None;
    }

    pub fn has_location_id(&self) -> bool {
        self.location_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_id(&mut self, v: u64) {
        self.location_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_BeaconLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.location_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.location_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.location_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.location_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.location_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.location_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_BeaconLocation {
        CParties_BeaconLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "location_type",
                |m: &CParties_BeaconLocation| { &m.location_type },
                |m: &mut CParties_BeaconLocation| { &mut m.location_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "location_id",
                |m: &CParties_BeaconLocation| { &m.location_id },
                |m: &mut CParties_BeaconLocation| { &mut m.location_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_BeaconLocation>(
                "CParties_BeaconLocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_BeaconLocation {
        static instance: ::protobuf::rt::LazyV2<CParties_BeaconLocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_BeaconLocation::new)
    }
}

impl ::protobuf::Clear for CParties_BeaconLocation {
    fn clear(&mut self) {
        self.location_type = ::std::option::Option::None;
        self.location_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_BeaconLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_BeaconLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_CreateBeacon_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    num_open_slots: ::std::option::Option<u32>,
    pub locations: ::protobuf::RepeatedField<CParties_BeaconLocation>,
    connect_string: ::protobuf::SingularField<::std::string::String>,
    metadata: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Request {
    fn default() -> &'a CParties_CreateBeacon_Request {
        <CParties_CreateBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Request {
    pub fn new() -> CParties_CreateBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;


    pub fn get_num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }
    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    // repeated .CParties_BeaconLocation locations = 3;


    pub fn get_locations(&self) -> &[CParties_BeaconLocation] {
        &self.locations
    }
    pub fn clear_locations(&mut self) {
        self.locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_locations(&mut self, v: ::protobuf::RepeatedField<CParties_BeaconLocation>) {
        self.locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_locations(&mut self) -> &mut ::protobuf::RepeatedField<CParties_BeaconLocation> {
        &mut self.locations
    }

    // Take field
    pub fn take_locations(&mut self) -> ::protobuf::RepeatedField<CParties_BeaconLocation> {
        ::std::mem::replace(&mut self.locations, ::protobuf::RepeatedField::new())
    }

    // optional string connect_string = 4;


    pub fn get_connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_connect_string(&mut self) {
        self.connect_string.clear();
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string.set_default();
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string metadata = 5;


    pub fn get_metadata(&self) -> &str {
        match self.metadata.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::string::String) {
        self.metadata = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::std::string::String {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::string::String {
        self.metadata.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.locations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_open_slots = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.locations)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.connect_string)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.locations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        for v in &self.locations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.connect_string.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_CreateBeacon_Request {
        CParties_CreateBeacon_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CParties_CreateBeacon_Request| { &m.appid },
                |m: &mut CParties_CreateBeacon_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_open_slots",
                |m: &CParties_CreateBeacon_Request| { &m.num_open_slots },
                |m: &mut CParties_CreateBeacon_Request| { &mut m.num_open_slots },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CParties_BeaconLocation>>(
                "locations",
                |m: &CParties_CreateBeacon_Request| { &m.locations },
                |m: &mut CParties_CreateBeacon_Request| { &mut m.locations },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connect_string",
                |m: &CParties_CreateBeacon_Request| { &m.connect_string },
                |m: &mut CParties_CreateBeacon_Request| { &mut m.connect_string },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &CParties_CreateBeacon_Request| { &m.metadata },
                |m: &mut CParties_CreateBeacon_Request| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_CreateBeacon_Request>(
                "CParties_CreateBeacon_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_CreateBeacon_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_CreateBeacon_Request::new)
    }
}

impl ::protobuf::Clear for CParties_CreateBeacon_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.locations.clear();
        self.connect_string.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_CreateBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CreateBeacon_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_CreateBeacon_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Response {
    fn default() -> &'a CParties_CreateBeacon_Response {
        <CParties_CreateBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Response {
    pub fn new() -> CParties_CreateBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_CreateBeacon_Response {
        CParties_CreateBeacon_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_CreateBeacon_Response| { &m.beacon_id },
                |m: &mut CParties_CreateBeacon_Response| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_CreateBeacon_Response>(
                "CParties_CreateBeacon_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_CreateBeacon_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_CreateBeacon_Response::new)
    }
}

impl ::protobuf::Clear for CParties_CreateBeacon_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_CreateBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CreateBeacon_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_OnReservationCompleted_Request {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    user_steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Request {
    fn default() -> &'a CParties_OnReservationCompleted_Request {
        <CParties_OnReservationCompleted_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Request {
    pub fn new() -> CParties_OnReservationCompleted_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;


    pub fn get_user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }
    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.user_steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.user_steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_OnReservationCompleted_Request {
        CParties_OnReservationCompleted_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_OnReservationCompleted_Request| { &m.beacon_id },
                |m: &mut CParties_OnReservationCompleted_Request| { &mut m.beacon_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "user_steamid",
                |m: &CParties_OnReservationCompleted_Request| { &m.user_steamid },
                |m: &mut CParties_OnReservationCompleted_Request| { &mut m.user_steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_OnReservationCompleted_Request>(
                "CParties_OnReservationCompleted_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_OnReservationCompleted_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_OnReservationCompleted_Request::new)
    }
}

impl ::protobuf::Clear for CParties_OnReservationCompleted_Request {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_OnReservationCompleted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_OnReservationCompleted_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_OnReservationCompleted_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Response {
    fn default() -> &'a CParties_OnReservationCompleted_Response {
        <CParties_OnReservationCompleted_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Response {
    pub fn new() -> CParties_OnReservationCompleted_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_OnReservationCompleted_Response {
        CParties_OnReservationCompleted_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_OnReservationCompleted_Response| { &m.beacon_id },
                |m: &mut CParties_OnReservationCompleted_Response| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_OnReservationCompleted_Response>(
                "CParties_OnReservationCompleted_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_OnReservationCompleted_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_OnReservationCompleted_Response::new)
    }
}

impl ::protobuf::Clear for CParties_OnReservationCompleted_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_OnReservationCompleted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_OnReservationCompleted_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_CancelReservation_Request {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    user_steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Request {
    fn default() -> &'a CParties_CancelReservation_Request {
        <CParties_CancelReservation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Request {
    pub fn new() -> CParties_CancelReservation_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;


    pub fn get_user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }
    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.user_steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.user_steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_CancelReservation_Request {
        CParties_CancelReservation_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_CancelReservation_Request| { &m.beacon_id },
                |m: &mut CParties_CancelReservation_Request| { &mut m.beacon_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "user_steamid",
                |m: &CParties_CancelReservation_Request| { &m.user_steamid },
                |m: &mut CParties_CancelReservation_Request| { &mut m.user_steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_CancelReservation_Request>(
                "CParties_CancelReservation_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_CancelReservation_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_CancelReservation_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_CancelReservation_Request::new)
    }
}

impl ::protobuf::Clear for CParties_CancelReservation_Request {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_CancelReservation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CancelReservation_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_CancelReservation_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Response {
    fn default() -> &'a CParties_CancelReservation_Response {
        <CParties_CancelReservation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Response {
    pub fn new() -> CParties_CancelReservation_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_CancelReservation_Response {
        CParties_CancelReservation_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_CancelReservation_Response| { &m.beacon_id },
                |m: &mut CParties_CancelReservation_Response| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_CancelReservation_Response>(
                "CParties_CancelReservation_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_CancelReservation_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_CancelReservation_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_CancelReservation_Response::new)
    }
}

impl ::protobuf::Clear for CParties_CancelReservation_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_CancelReservation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CancelReservation_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_ChangeNumOpenSlots_Request {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    num_open_slots: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Request {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Request {
        <CParties_ChangeNumOpenSlots_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Request {
    pub fn new() -> CParties_ChangeNumOpenSlots_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;


    pub fn get_num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }
    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_open_slots = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_ChangeNumOpenSlots_Request {
        CParties_ChangeNumOpenSlots_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_ChangeNumOpenSlots_Request| { &m.beacon_id },
                |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.beacon_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_open_slots",
                |m: &CParties_ChangeNumOpenSlots_Request| { &m.num_open_slots },
                |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.num_open_slots },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_ChangeNumOpenSlots_Request>(
                "CParties_ChangeNumOpenSlots_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_ChangeNumOpenSlots_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_ChangeNumOpenSlots_Request::new)
    }
}

impl ::protobuf::Clear for CParties_ChangeNumOpenSlots_Request {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_ChangeNumOpenSlots_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_ChangeNumOpenSlots_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Response {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Response {
        <CParties_ChangeNumOpenSlots_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Response {
    pub fn new() -> CParties_ChangeNumOpenSlots_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_ChangeNumOpenSlots_Response {
        CParties_ChangeNumOpenSlots_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_ChangeNumOpenSlots_Response| { &m.beacon_id },
                |m: &mut CParties_ChangeNumOpenSlots_Response| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_ChangeNumOpenSlots_Response>(
                "CParties_ChangeNumOpenSlots_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_ChangeNumOpenSlots_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_ChangeNumOpenSlots_Response::new)
    }
}

impl ::protobuf::Clear for CParties_ChangeNumOpenSlots_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_ChangeNumOpenSlots_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_DestroyBeacon_Request {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Request {
    fn default() -> &'a CParties_DestroyBeacon_Request {
        <CParties_DestroyBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Request {
    pub fn new() -> CParties_DestroyBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_DestroyBeacon_Request {
        CParties_DestroyBeacon_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_DestroyBeacon_Request| { &m.beacon_id },
                |m: &mut CParties_DestroyBeacon_Request| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_DestroyBeacon_Request>(
                "CParties_DestroyBeacon_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Request {
        static instance: ::protobuf::rt::LazyV2<CParties_DestroyBeacon_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_DestroyBeacon_Request::new)
    }
}

impl ::protobuf::Clear for CParties_DestroyBeacon_Request {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_DestroyBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_DestroyBeacon_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CParties_DestroyBeacon_Response {
    // message fields
    beacon_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Response {
    fn default() -> &'a CParties_DestroyBeacon_Response {
        <CParties_DestroyBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Response {
    pub fn new() -> CParties_DestroyBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;


    pub fn get_beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }
    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.beacon_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CParties_DestroyBeacon_Response {
        CParties_DestroyBeacon_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "beacon_id",
                |m: &CParties_DestroyBeacon_Response| { &m.beacon_id },
                |m: &mut CParties_DestroyBeacon_Response| { &mut m.beacon_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CParties_DestroyBeacon_Response>(
                "CParties_DestroyBeacon_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Response {
        static instance: ::protobuf::rt::LazyV2<CParties_DestroyBeacon_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CParties_DestroyBeacon_Response::new)
    }
}

impl ::protobuf::Clear for CParties_DestroyBeacon_Response {
    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CParties_DestroyBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_DestroyBeacon_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_parties.steamclient.proto\x1a,steammessages_unified_bas\
    e.steamclient.proto\"S\n\x1aCParties_JoinParty_Request\x12\x18\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1b\n\tbeacon_id\x18\x02\x20\
    \x01(\x04R\x08beaconId\"a\n\x1bCParties_JoinParty_Response\x12\x1b\n\tbe\
    acon_id\x18\x01\x20\x01(\x04R\x08beaconId\x12%\n\x0econnect_string\x18\
    \x02\x20\x01(\tR\rconnectString\"_\n\x17CParties_BeaconLocation\x12#\n\r\
    location_type\x18\x01\x20\x01(\rR\x0clocationType\x12\x1f\n\x0blocation_\
    id\x18\x02\x20\x01(\x04R\nlocationId\"\xd6\x01\n\x1dCParties_CreateBeaco\
    n_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12$\n\x0enum_\
    open_slots\x18\x02\x20\x01(\rR\x0cnumOpenSlots\x126\n\tlocations\x18\x03\
    \x20\x03(\x0b2\x18.CParties_BeaconLocationR\tlocations\x12%\n\x0econnect\
    _string\x18\x04\x20\x01(\tR\rconnectString\x12\x1a\n\x08metadata\x18\x05\
    \x20\x01(\tR\x08metadata\"=\n\x1eCParties_CreateBeacon_Response\x12\x1b\
    \n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"i\n'CParties_OnReservat\
    ionCompleted_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaco\
    nId\x12!\n\x0cuser_steamid\x18\x02\x20\x01(\x06R\x0buserSteamid\"G\n(CPa\
    rties_OnReservationCompleted_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\
    \x01(\x04R\x08beaconId\"d\n\"CParties_CancelReservation_Request\x12\x1b\
    \n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\x12!\n\x0cuser_steamid\
    \x18\x02\x20\x01(\x06R\x0buserSteamid\"B\n#CParties_CancelReservation_Re\
    sponse\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"h\n#CPart\
    ies_ChangeNumOpenSlots_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04\
    R\x08beaconId\x12$\n\x0enum_open_slots\x18\x02\x20\x01(\rR\x0cnumOpenSlo\
    ts\"C\n$CParties_ChangeNumOpenSlots_Response\x12\x1b\n\tbeacon_id\x18\
    \x01\x20\x01(\x04R\x08beaconId\"=\n\x1eCParties_DestroyBeacon_Request\
    \x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\">\n\x1fCParties\
    _DestroyBeacon_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08be\
    aconId2\xd9\x07\n\x07Parties\x12\xb9\x01\n\tJoinParty\x12\x1b.CParties_J\
    oinParty_Request\x1a\x1c.CParties_JoinParty_Response\"q\x82\xb5\x18mRequ\
    est\x20to\x20join\x20a\x20Party\x20via\x20the\x20given\x20Beacon\x20ID.\
    \x20If\x20successful,\x20will\x20be\x20given\x20the\x20necessary\x20'con\
    nect'\x20string.\x12\x85\x01\n\x0cCreateBeacon\x12\x1e.CParties_CreateBe\
    acon_Request\x1a\x1f.CParties_CreateBeacon_Response\"4\x82\xb5\x180Creat\
    e\x20a\x20Beacon\x20to\x20attract\x20people\x20to\x20your\x20Party.\x12\
    \xb7\x01\n\x16OnReservationCompleted\x12(.CParties_OnReservationComplete\
    d_Request\x1a).CParties_OnReservationCompleted_Response\"H\x82\xb5\x18DN\
    otify\x20Steam\x20that\x20a\x20user\x20with\x20a\x20reservation\x20has\
    \x20successfully\x20joined.\x12\xbe\x01\n\x11CancelReservation\x12#.CPar\
    ties_CancelReservation_Request\x1a$.CParties_CancelReservation_Response\
    \"^\x82\xb5\x18ZNotify\x20Steam\x20that\x20a\x20user\x20with\x20a\x20res\
    ervation\x20either\x20never\x20showed\x20up,\x20or\x20has\x20left\x20the\
    \x20party.\x12\x86\x01\n\x12ChangeNumOpenSlots\x12$.CParties_ChangeNumOp\
    enSlots_Request\x1a%.CParties_ChangeNumOpenSlots_Response\"#\x82\xb5\x18\
    \x1fChange\x20the\x20number\x20of\x20open\x20slots\x12j\n\rDestroyBeacon\
    \x12\x1f.CParties_DestroyBeacon_Request\x1a\x20.CParties_DestroyBeacon_R\
    esponse\"\x16\x82\xb5\x18\x12Delete\x20the\x20Beacon.\x1a\x1a\x82\xb5\
    \x18\x16Party-related\x20servicesB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
