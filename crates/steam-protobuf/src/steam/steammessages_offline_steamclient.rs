// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_offline.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct COffline_GetOfflineLogonTicket_Request {
    // message fields
    priority: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a COffline_GetOfflineLogonTicket_Request {
    fn default() -> &'a COffline_GetOfflineLogonTicket_Request {
        <COffline_GetOfflineLogonTicket_Request as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetOfflineLogonTicket_Request {
    pub fn new() -> COffline_GetOfflineLogonTicket_Request {
        ::std::default::Default::default()
    }

    // optional uint32 priority = 1;


    pub fn get_priority(&self) -> u32 {
        self.priority.unwrap_or(0)
    }
    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for COffline_GetOfflineLogonTicket_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.priority = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.priority {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.priority {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> COffline_GetOfflineLogonTicket_Request {
        COffline_GetOfflineLogonTicket_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "priority",
                |m: &COffline_GetOfflineLogonTicket_Request| { &m.priority },
                |m: &mut COffline_GetOfflineLogonTicket_Request| { &mut m.priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<COffline_GetOfflineLogonTicket_Request>(
                "COffline_GetOfflineLogonTicket_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static COffline_GetOfflineLogonTicket_Request {
        static instance: ::protobuf::rt::LazyV2<COffline_GetOfflineLogonTicket_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(COffline_GetOfflineLogonTicket_Request::new)
    }
}

impl ::protobuf::Clear for COffline_GetOfflineLogonTicket_Request {
    fn clear(&mut self) {
        self.priority = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for COffline_GetOfflineLogonTicket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetOfflineLogonTicket_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct COffline_GetOfflineLogonTicket_Response {
    // message fields
    serialized_ticket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a COffline_GetOfflineLogonTicket_Response {
    fn default() -> &'a COffline_GetOfflineLogonTicket_Response {
        <COffline_GetOfflineLogonTicket_Response as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetOfflineLogonTicket_Response {
    pub fn new() -> COffline_GetOfflineLogonTicket_Response {
        ::std::default::Default::default()
    }

    // optional bytes serialized_ticket = 1;


    pub fn get_serialized_ticket(&self) -> &[u8] {
        match self.serialized_ticket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_serialized_ticket(&mut self) {
        self.serialized_ticket.clear();
    }

    pub fn has_serialized_ticket(&self) -> bool {
        self.serialized_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_ticket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_ticket.is_none() {
            self.serialized_ticket.set_default();
        }
        self.serialized_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for COffline_GetOfflineLogonTicket_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.serialized_ticket)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.serialized_ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.serialized_ticket.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> COffline_GetOfflineLogonTicket_Response {
        COffline_GetOfflineLogonTicket_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "serialized_ticket",
                |m: &COffline_GetOfflineLogonTicket_Response| { &m.serialized_ticket },
                |m: &mut COffline_GetOfflineLogonTicket_Response| { &mut m.serialized_ticket },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &COffline_GetOfflineLogonTicket_Response| { &m.signature },
                |m: &mut COffline_GetOfflineLogonTicket_Response| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<COffline_GetOfflineLogonTicket_Response>(
                "COffline_GetOfflineLogonTicket_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static COffline_GetOfflineLogonTicket_Response {
        static instance: ::protobuf::rt::LazyV2<COffline_GetOfflineLogonTicket_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(COffline_GetOfflineLogonTicket_Response::new)
    }
}

impl ::protobuf::Clear for COffline_GetOfflineLogonTicket_Response {
    fn clear(&mut self) {
        self.serialized_ticket.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for COffline_GetOfflineLogonTicket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetOfflineLogonTicket_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct COffline_GetUnsignedOfflineLogonTicket_Request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a COffline_GetUnsignedOfflineLogonTicket_Request {
    fn default() -> &'a COffline_GetUnsignedOfflineLogonTicket_Request {
        <COffline_GetUnsignedOfflineLogonTicket_Request as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetUnsignedOfflineLogonTicket_Request {
    pub fn new() -> COffline_GetUnsignedOfflineLogonTicket_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> COffline_GetUnsignedOfflineLogonTicket_Request {
        COffline_GetUnsignedOfflineLogonTicket_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<COffline_GetUnsignedOfflineLogonTicket_Request>(
                "COffline_GetUnsignedOfflineLogonTicket_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static COffline_GetUnsignedOfflineLogonTicket_Request {
        static instance: ::protobuf::rt::LazyV2<COffline_GetUnsignedOfflineLogonTicket_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(COffline_GetUnsignedOfflineLogonTicket_Request::new)
    }
}

impl ::protobuf::Clear for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct COffline_OfflineLogonTicket {
    // message fields
    accountid: ::std::option::Option<u32>,
    rtime32_creation_time: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a COffline_OfflineLogonTicket {
    fn default() -> &'a COffline_OfflineLogonTicket {
        <COffline_OfflineLogonTicket as ::protobuf::Message>::default_instance()
    }
}

impl COffline_OfflineLogonTicket {
    pub fn new() -> COffline_OfflineLogonTicket {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;


    pub fn get_accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }
    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional fixed32 rtime32_creation_time = 2;


    pub fn get_rtime32_creation_time(&self) -> u32 {
        self.rtime32_creation_time.unwrap_or(0)
    }
    pub fn clear_rtime32_creation_time(&mut self) {
        self.rtime32_creation_time = ::std::option::Option::None;
    }

    pub fn has_rtime32_creation_time(&self) -> bool {
        self.rtime32_creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime32_creation_time(&mut self, v: u32) {
        self.rtime32_creation_time = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for COffline_OfflineLogonTicket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.accountid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.rtime32_creation_time = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.rtime32_creation_time {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.rtime32_creation_time {
            os.write_fixed32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> COffline_OfflineLogonTicket {
        COffline_OfflineLogonTicket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "accountid",
                |m: &COffline_OfflineLogonTicket| { &m.accountid },
                |m: &mut COffline_OfflineLogonTicket| { &mut m.accountid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "rtime32_creation_time",
                |m: &COffline_OfflineLogonTicket| { &m.rtime32_creation_time },
                |m: &mut COffline_OfflineLogonTicket| { &mut m.rtime32_creation_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<COffline_OfflineLogonTicket>(
                "COffline_OfflineLogonTicket",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static COffline_OfflineLogonTicket {
        static instance: ::protobuf::rt::LazyV2<COffline_OfflineLogonTicket> = ::protobuf::rt::LazyV2::INIT;
        instance.get(COffline_OfflineLogonTicket::new)
    }
}

impl ::protobuf::Clear for COffline_OfflineLogonTicket {
    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.rtime32_creation_time = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for COffline_OfflineLogonTicket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_OfflineLogonTicket {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct COffline_GetUnsignedOfflineLogonTicket_Response {
    // message fields
    pub ticket: ::protobuf::SingularPtrField<COffline_OfflineLogonTicket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a COffline_GetUnsignedOfflineLogonTicket_Response {
    fn default() -> &'a COffline_GetUnsignedOfflineLogonTicket_Response {
        <COffline_GetUnsignedOfflineLogonTicket_Response as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetUnsignedOfflineLogonTicket_Response {
    pub fn new() -> COffline_GetUnsignedOfflineLogonTicket_Response {
        ::std::default::Default::default()
    }

    // optional .COffline_OfflineLogonTicket ticket = 1;


    pub fn get_ticket(&self) -> &COffline_OfflineLogonTicket {
        self.ticket.as_ref().unwrap_or_else(|| <COffline_OfflineLogonTicket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ticket(&mut self) {
        self.ticket.clear();
    }

    pub fn has_ticket(&self) -> bool {
        self.ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticket(&mut self, v: COffline_OfflineLogonTicket) {
        self.ticket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticket(&mut self) -> &mut COffline_OfflineLogonTicket {
        if self.ticket.is_none() {
            self.ticket.set_default();
        }
        self.ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_ticket(&mut self) -> COffline_OfflineLogonTicket {
        self.ticket.take().unwrap_or_else(|| COffline_OfflineLogonTicket::new())
    }
}

impl ::protobuf::Message for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.ticket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ticket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ticket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ticket.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> COffline_GetUnsignedOfflineLogonTicket_Response {
        COffline_GetUnsignedOfflineLogonTicket_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<COffline_OfflineLogonTicket>>(
                "ticket",
                |m: &COffline_GetUnsignedOfflineLogonTicket_Response| { &m.ticket },
                |m: &mut COffline_GetUnsignedOfflineLogonTicket_Response| { &mut m.ticket },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<COffline_GetUnsignedOfflineLogonTicket_Response>(
                "COffline_GetUnsignedOfflineLogonTicket_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static COffline_GetUnsignedOfflineLogonTicket_Response {
        static instance: ::protobuf::rt::LazyV2<COffline_GetUnsignedOfflineLogonTicket_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(COffline_GetUnsignedOfflineLogonTicket_Response::new)
    }
}

impl ::protobuf::Clear for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn clear(&mut self) {
        self.ticket.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_offline.steamclient.proto\x1a,steammessages_unified_bas\
    e.steamclient.proto\"D\n&COffline_GetOfflineLogonTicket_Request\x12\x1a\
    \n\x08priority\x18\x01\x20\x01(\rR\x08priority\"t\n'COffline_GetOfflineL\
    ogonTicket_Response\x12+\n\x11serialized_ticket\x18\x01\x20\x01(\x0cR\
    \x10serializedTicket\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignatu\
    re\"0\n.COffline_GetUnsignedOfflineLogonTicket_Request\"o\n\x1bCOffline_\
    OfflineLogonTicket\x12\x1c\n\taccountid\x18\x01\x20\x01(\rR\taccountid\
    \x122\n\x15rtime32_creation_time\x18\x02\x20\x01(\x07R\x13rtime32Creatio\
    nTime\"g\n/COffline_GetUnsignedOfflineLogonTicket_Response\x124\n\x06tic\
    ket\x18\x01\x20\x01(\x0b2\x1c.COffline_OfflineLogonTicketR\x06ticket2\
    \xa3\x03\n\x07Offline\x12\xb5\x01\n\x15GetOfflineLogonTicket\x12'.COffli\
    ne_GetOfflineLogonTicket_Request\x1a(.COffline_GetOfflineLogonTicket_Res\
    ponse\"I\x82\xb5\x18EGet\x20a\x20serialized\x20and\x20signed\x20offline\
    \x20logon\x20ticket\x20for\x20the\x20current\x20user\x12\xc1\x01\n\x1dGe\
    tUnsignedOfflineLogonTicket\x12/.COffline_GetUnsignedOfflineLogonTicket_\
    Request\x1a0.COffline_GetUnsignedOfflineLogonTicket_Response\"=\x82\xb5\
    \x189Get\x20an\x20unsigned\x20offline\x20logon\x20ticket\x20for\x20the\
    \x20current\x20user\x1a\x1c\x82\xb5\x18\x18Offline\x20settings\x20servic\
    eB\x03\x80\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
