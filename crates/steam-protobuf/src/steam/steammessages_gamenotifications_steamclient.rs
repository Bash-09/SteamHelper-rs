// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_gamenotifications.steamclient.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_Variable {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Variable {
    fn default() -> &'a CGameNotifications_Variable {
        <CGameNotifications_Variable as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Variable {
    pub fn new() -> CGameNotifications_Variable {
        ::std::default::Default::default()
    }

    // optional string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_Variable {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_Variable {
        CGameNotifications_Variable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &CGameNotifications_Variable| { &m.key },
                    |m: &mut CGameNotifications_Variable| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &CGameNotifications_Variable| { &m.value },
                    |m: &mut CGameNotifications_Variable| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_Variable>(
                    "CGameNotifications_Variable",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_Variable {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_Variable> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_Variable,
        };
        unsafe {
            instance.get(CGameNotifications_Variable::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_Variable {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_Variable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_Variable {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_LocalizedText {
    // message fields
    token: ::protobuf::SingularField<::std::string::String>,
    variables: ::protobuf::RepeatedField<CGameNotifications_Variable>,
    rendered_text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_LocalizedText {
    fn default() -> &'a CGameNotifications_LocalizedText {
        <CGameNotifications_LocalizedText as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_LocalizedText {
    pub fn new() -> CGameNotifications_LocalizedText {
        ::std::default::Default::default()
    }

    // optional string token = 1;


    pub fn get_token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CGameNotifications_Variable variables = 2;


    pub fn get_variables(&self) -> &[CGameNotifications_Variable] {
        &self.variables
    }
    pub fn clear_variables(&mut self) {
        self.variables.clear();
    }

    // Param is passed by value, moved
    pub fn set_variables(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_Variable>) {
        self.variables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_variables(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_Variable> {
        &mut self.variables
    }

    // Take field
    pub fn take_variables(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_Variable> {
        ::std::mem::replace(&mut self.variables, ::protobuf::RepeatedField::new())
    }

    // optional string rendered_text = 3;


    pub fn get_rendered_text(&self) -> &str {
        match self.rendered_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rendered_text(&mut self) {
        self.rendered_text.clear();
    }

    pub fn has_rendered_text(&self) -> bool {
        self.rendered_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rendered_text(&mut self, v: ::std::string::String) {
        self.rendered_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rendered_text(&mut self) -> &mut ::std::string::String {
        if self.rendered_text.is_none() {
            self.rendered_text.set_default();
        }
        self.rendered_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_rendered_text(&mut self) -> ::std::string::String {
        self.rendered_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_LocalizedText {
    fn is_initialized(&self) -> bool {
        for v in &self.variables {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.variables)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rendered_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.variables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.rendered_text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.token.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.variables {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.rendered_text.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_LocalizedText {
        CGameNotifications_LocalizedText::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token",
                    |m: &CGameNotifications_LocalizedText| { &m.token },
                    |m: &mut CGameNotifications_LocalizedText| { &mut m.token },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_Variable>>(
                    "variables",
                    |m: &CGameNotifications_LocalizedText| { &m.variables },
                    |m: &mut CGameNotifications_LocalizedText| { &mut m.variables },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rendered_text",
                    |m: &CGameNotifications_LocalizedText| { &m.rendered_text },
                    |m: &mut CGameNotifications_LocalizedText| { &mut m.rendered_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_LocalizedText>(
                    "CGameNotifications_LocalizedText",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_LocalizedText {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_LocalizedText> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_LocalizedText,
        };
        unsafe {
            instance.get(CGameNotifications_LocalizedText::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_LocalizedText {
    fn clear(&mut self) {
        self.token.clear();
        self.variables.clear();
        self.rendered_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_LocalizedText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_LocalizedText {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_UserStatus {
    // message fields
    steamid: ::std::option::Option<u64>,
    state: ::protobuf::SingularField<::std::string::String>,
    title: ::protobuf::SingularPtrField<CGameNotifications_LocalizedText>,
    message: ::protobuf::SingularPtrField<CGameNotifications_LocalizedText>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UserStatus {
    fn default() -> &'a CGameNotifications_UserStatus {
        <CGameNotifications_UserStatus as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UserStatus {
    pub fn new() -> CGameNotifications_UserStatus {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string state = 2;


    pub fn get_state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CGameNotifications_LocalizedText title = 3;


    pub fn get_title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| CGameNotifications_LocalizedText::default_instance())
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // optional .CGameNotifications_LocalizedText message = 4;


    pub fn get_message(&self) -> &CGameNotifications_LocalizedText {
        self.message.as_ref().unwrap_or_else(|| CGameNotifications_LocalizedText::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: CGameNotifications_LocalizedText) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut CGameNotifications_LocalizedText {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> CGameNotifications_LocalizedText {
        self.message.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }
}

impl ::protobuf::Message for CGameNotifications_UserStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.title {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.state)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.title.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_UserStatus {
        CGameNotifications_UserStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_UserStatus| { &m.steamid },
                    |m: &mut CGameNotifications_UserStatus| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "state",
                    |m: &CGameNotifications_UserStatus| { &m.state },
                    |m: &mut CGameNotifications_UserStatus| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_LocalizedText>>(
                    "title",
                    |m: &CGameNotifications_UserStatus| { &m.title },
                    |m: &mut CGameNotifications_UserStatus| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_LocalizedText>>(
                    "message",
                    |m: &CGameNotifications_UserStatus| { &m.message },
                    |m: &mut CGameNotifications_UserStatus| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_UserStatus>(
                    "CGameNotifications_UserStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_UserStatus {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_UserStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_UserStatus,
        };
        unsafe {
            instance.get(CGameNotifications_UserStatus::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_UserStatus {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.state.clear();
        self.title.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_UserStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UserStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_CreateSession_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    context: ::std::option::Option<u64>,
    title: ::protobuf::SingularPtrField<CGameNotifications_LocalizedText>,
    users: ::protobuf::RepeatedField<CGameNotifications_UserStatus>,
    steamid: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Request {
    fn default() -> &'a CGameNotifications_CreateSession_Request {
        <CGameNotifications_CreateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Request {
    pub fn new() -> CGameNotifications_CreateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 2;


    pub fn get_context(&self) -> u64 {
        self.context.unwrap_or(0)
    }
    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 3;


    pub fn get_title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| CGameNotifications_LocalizedText::default_instance())
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // repeated .CGameNotifications_UserStatus users = 4;


    pub fn get_users(&self) -> &[CGameNotifications_UserStatus] {
        &self.users
    }
    pub fn clear_users(&mut self) {
        self.users.clear();
    }

    // Param is passed by value, moved
    pub fn set_users(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_UserStatus>) {
        self.users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_users(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        &mut self.users
    }

    // Take field
    pub fn take_users(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.users, ::protobuf::RepeatedField::new())
    }

    // optional fixed64 steamid = 5;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.title {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.users {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.context = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.users)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.title.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.users {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_CreateSession_Request {
        CGameNotifications_CreateSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_CreateSession_Request| { &m.appid },
                    |m: &mut CGameNotifications_CreateSession_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "context",
                    |m: &CGameNotifications_CreateSession_Request| { &m.context },
                    |m: &mut CGameNotifications_CreateSession_Request| { &mut m.context },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_LocalizedText>>(
                    "title",
                    |m: &CGameNotifications_CreateSession_Request| { &m.title },
                    |m: &mut CGameNotifications_CreateSession_Request| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_UserStatus>>(
                    "users",
                    |m: &CGameNotifications_CreateSession_Request| { &m.users },
                    |m: &mut CGameNotifications_CreateSession_Request| { &mut m.users },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_CreateSession_Request| { &m.steamid },
                    |m: &mut CGameNotifications_CreateSession_Request| { &mut m.steamid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_CreateSession_Request>(
                    "CGameNotifications_CreateSession_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_CreateSession_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_CreateSession_Request,
        };
        unsafe {
            instance.get(CGameNotifications_CreateSession_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_CreateSession_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_CreateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_CreateSession_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_CreateSession_Response {
    // message fields
    sessionid: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Response {
    fn default() -> &'a CGameNotifications_CreateSession_Response {
        <CGameNotifications_CreateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Response {
    pub fn new() -> CGameNotifications_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_CreateSession_Response {
        CGameNotifications_CreateSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_CreateSession_Response| { &m.sessionid },
                    |m: &mut CGameNotifications_CreateSession_Response| { &mut m.sessionid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_CreateSession_Response>(
                    "CGameNotifications_CreateSession_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_CreateSession_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_CreateSession_Response,
        };
        unsafe {
            instance.get(CGameNotifications_CreateSession_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_CreateSession_Response {
    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_CreateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_CreateSession_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_DeleteSession_Request {
    // message fields
    sessionid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Request {
    fn default() -> &'a CGameNotifications_DeleteSession_Request {
        <CGameNotifications_DeleteSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Request {
    pub fn new() -> CGameNotifications_DeleteSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_DeleteSession_Request {
        CGameNotifications_DeleteSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_DeleteSession_Request| { &m.sessionid },
                    |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.sessionid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_DeleteSession_Request| { &m.appid },
                    |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_DeleteSession_Request| { &m.steamid },
                    |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.steamid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_DeleteSession_Request>(
                    "CGameNotifications_DeleteSession_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_DeleteSession_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_DeleteSession_Request,
        };
        unsafe {
            instance.get(CGameNotifications_DeleteSession_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_DeleteSession_Request {
    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_DeleteSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_DeleteSession_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_DeleteSession_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Response {
    fn default() -> &'a CGameNotifications_DeleteSession_Response {
        <CGameNotifications_DeleteSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Response {
    pub fn new() -> CGameNotifications_DeleteSession_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_DeleteSession_Response {
        CGameNotifications_DeleteSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_DeleteSession_Response>(
                    "CGameNotifications_DeleteSession_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_DeleteSession_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_DeleteSession_Response,
        };
        unsafe {
            instance.get(CGameNotifications_DeleteSession_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_DeleteSession_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_DeleteSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_DeleteSession_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_UpdateSession_Request {
    // message fields
    sessionid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    title: ::protobuf::SingularPtrField<CGameNotifications_LocalizedText>,
    users: ::protobuf::RepeatedField<CGameNotifications_UserStatus>,
    steamid: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Request {
    fn default() -> &'a CGameNotifications_UpdateSession_Request {
        <CGameNotifications_UpdateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Request {
    pub fn new() -> CGameNotifications_UpdateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 3;


    pub fn get_title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| CGameNotifications_LocalizedText::default_instance())
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // repeated .CGameNotifications_UserStatus users = 4;


    pub fn get_users(&self) -> &[CGameNotifications_UserStatus] {
        &self.users
    }
    pub fn clear_users(&mut self) {
        self.users.clear();
    }

    // Param is passed by value, moved
    pub fn set_users(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_UserStatus>) {
        self.users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_users(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        &mut self.users
    }

    // Take field
    pub fn take_users(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.users, ::protobuf::RepeatedField::new())
    }

    // optional fixed64 steamid = 6;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.title {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.users {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.users)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.title.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.users {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_UpdateSession_Request {
        CGameNotifications_UpdateSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_UpdateSession_Request| { &m.sessionid },
                    |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.sessionid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_UpdateSession_Request| { &m.appid },
                    |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_LocalizedText>>(
                    "title",
                    |m: &CGameNotifications_UpdateSession_Request| { &m.title },
                    |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_UserStatus>>(
                    "users",
                    |m: &CGameNotifications_UpdateSession_Request| { &m.users },
                    |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.users },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_UpdateSession_Request| { &m.steamid },
                    |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.steamid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_UpdateSession_Request>(
                    "CGameNotifications_UpdateSession_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_UpdateSession_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_UpdateSession_Request,
        };
        unsafe {
            instance.get(CGameNotifications_UpdateSession_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_UpdateSession_Request {
    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_UpdateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateSession_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_UpdateSession_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Response {
    fn default() -> &'a CGameNotifications_UpdateSession_Response {
        <CGameNotifications_UpdateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Response {
    pub fn new() -> CGameNotifications_UpdateSession_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_UpdateSession_Response {
        CGameNotifications_UpdateSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_UpdateSession_Response>(
                    "CGameNotifications_UpdateSession_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_UpdateSession_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_UpdateSession_Response,
        };
        unsafe {
            instance.get(CGameNotifications_UpdateSession_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_UpdateSession_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_UpdateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateSession_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_EnumerateSessions_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    include_all_user_messages: ::std::option::Option<bool>,
    include_auth_user_message: ::std::option::Option<bool>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Request {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Request {
        <CGameNotifications_EnumerateSessions_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Request {
    pub fn new() -> CGameNotifications_EnumerateSessions_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool include_all_user_messages = 3;


    pub fn get_include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.unwrap_or(false)
    }
    pub fn clear_include_all_user_messages(&mut self) {
        self.include_all_user_messages = ::std::option::Option::None;
    }

    pub fn has_include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_all_user_messages(&mut self, v: bool) {
        self.include_all_user_messages = ::std::option::Option::Some(v);
    }

    // optional bool include_auth_user_message = 4;


    pub fn get_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.unwrap_or(false)
    }
    pub fn clear_include_auth_user_message(&mut self) {
        self.include_auth_user_message = ::std::option::Option::None;
    }

    pub fn has_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_auth_user_message(&mut self, v: bool) {
        self.include_auth_user_message = ::std::option::Option::Some(v);
    }

    // optional string language = 5;


    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_all_user_messages = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_auth_user_message = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.include_all_user_messages {
            my_size += 2;
        }
        if let Some(v) = self.include_auth_user_message {
            my_size += 2;
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.include_all_user_messages {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.include_auth_user_message {
            os.write_bool(4, v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_EnumerateSessions_Request {
        CGameNotifications_EnumerateSessions_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_EnumerateSessions_Request| { &m.appid },
                    |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "include_all_user_messages",
                    |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_all_user_messages },
                    |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_all_user_messages },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "include_auth_user_message",
                    |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_auth_user_message },
                    |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_auth_user_message },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &CGameNotifications_EnumerateSessions_Request| { &m.language },
                    |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.language },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_EnumerateSessions_Request>(
                    "CGameNotifications_EnumerateSessions_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_EnumerateSessions_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_EnumerateSessions_Request,
        };
        unsafe {
            instance.get(CGameNotifications_EnumerateSessions_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_EnumerateSessions_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.include_all_user_messages = ::std::option::Option::None;
        self.include_auth_user_message = ::std::option::Option::None;
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_EnumerateSessions_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_Session {
    // message fields
    sessionid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u64>,
    context: ::std::option::Option<u64>,
    title: ::protobuf::SingularPtrField<CGameNotifications_LocalizedText>,
    time_created: ::std::option::Option<u32>,
    time_updated: ::std::option::Option<u32>,
    user_status: ::protobuf::RepeatedField<CGameNotifications_UserStatus>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Session {
    fn default() -> &'a CGameNotifications_Session {
        <CGameNotifications_Session as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Session {
    pub fn new() -> CGameNotifications_Session {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint64 appid = 2;


    pub fn get_appid(&self) -> u64 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u64) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 3;


    pub fn get_context(&self) -> u64 {
        self.context.unwrap_or(0)
    }
    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 4;


    pub fn get_title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| CGameNotifications_LocalizedText::default_instance())
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // optional uint32 time_created = 5;


    pub fn get_time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }
    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 time_updated = 6;


    pub fn get_time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }
    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // repeated .CGameNotifications_UserStatus user_status = 7;


    pub fn get_user_status(&self) -> &[CGameNotifications_UserStatus] {
        &self.user_status
    }
    pub fn clear_user_status(&mut self) {
        self.user_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_status(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_UserStatus>) {
        self.user_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_status(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        &mut self.user_status
    }

    // Take field
    pub fn take_user_status(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.user_status, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CGameNotifications_Session {
    fn is_initialized(&self) -> bool {
        for v in &self.title {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.user_status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.context = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.title)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_created = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_updated = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.user_status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.user_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.title.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(6, v)?;
        }
        for v in &self.user_status {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_Session {
        CGameNotifications_Session::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_Session| { &m.sessionid },
                    |m: &mut CGameNotifications_Session| { &mut m.sessionid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "appid",
                    |m: &CGameNotifications_Session| { &m.appid },
                    |m: &mut CGameNotifications_Session| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "context",
                    |m: &CGameNotifications_Session| { &m.context },
                    |m: &mut CGameNotifications_Session| { &mut m.context },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_LocalizedText>>(
                    "title",
                    |m: &CGameNotifications_Session| { &m.title },
                    |m: &mut CGameNotifications_Session| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time_created",
                    |m: &CGameNotifications_Session| { &m.time_created },
                    |m: &mut CGameNotifications_Session| { &mut m.time_created },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time_updated",
                    |m: &CGameNotifications_Session| { &m.time_updated },
                    |m: &mut CGameNotifications_Session| { &mut m.time_updated },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_UserStatus>>(
                    "user_status",
                    |m: &CGameNotifications_Session| { &m.user_status },
                    |m: &mut CGameNotifications_Session| { &mut m.user_status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_Session>(
                    "CGameNotifications_Session",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_Session {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_Session> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_Session,
        };
        unsafe {
            instance.get(CGameNotifications_Session::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_Session {
    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.time_created = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.user_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_Session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_Session {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_EnumerateSessions_Response {
    // message fields
    sessions: ::protobuf::RepeatedField<CGameNotifications_Session>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Response {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Response {
        <CGameNotifications_EnumerateSessions_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Response {
    pub fn new() -> CGameNotifications_EnumerateSessions_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_Session sessions = 1;


    pub fn get_sessions(&self) -> &[CGameNotifications_Session] {
        &self.sessions
    }
    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_Session>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_Session> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_Session> {
        ::std::mem::replace(&mut self.sessions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.sessions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sessions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sessions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_EnumerateSessions_Response {
        CGameNotifications_EnumerateSessions_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_Session>>(
                    "sessions",
                    |m: &CGameNotifications_EnumerateSessions_Response| { &m.sessions },
                    |m: &mut CGameNotifications_EnumerateSessions_Response| { &mut m.sessions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_EnumerateSessions_Response>(
                    "CGameNotifications_EnumerateSessions_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_EnumerateSessions_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_EnumerateSessions_Response,
        };
        unsafe {
            instance.get(CGameNotifications_EnumerateSessions_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_EnumerateSessions_Response {
    fn clear(&mut self) {
        self.sessions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_EnumerateSessions_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_GetSessionDetails_Request {
    // message fields
    sessions: ::protobuf::RepeatedField<CGameNotifications_GetSessionDetails_Request_RequestedSession>,
    appid: ::std::option::Option<u32>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Request {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Request {
        <CGameNotifications_GetSessionDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Request {
    pub fn new() -> CGameNotifications_GetSessionDetails_Request {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;


    pub fn get_sessions(&self) -> &[CGameNotifications_GetSessionDetails_Request_RequestedSession] {
        &self.sessions
    }
    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_GetSessionDetails_Request_RequestedSession>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_GetSessionDetails_Request_RequestedSession> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_GetSessionDetails_Request_RequestedSession> {
        ::std::mem::replace(&mut self.sessions, ::protobuf::RepeatedField::new())
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string language = 3;


    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.sessions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sessions)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sessions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_GetSessionDetails_Request {
        CGameNotifications_GetSessionDetails_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_GetSessionDetails_Request_RequestedSession>>(
                    "sessions",
                    |m: &CGameNotifications_GetSessionDetails_Request| { &m.sessions },
                    |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.sessions },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_GetSessionDetails_Request| { &m.appid },
                    |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &CGameNotifications_GetSessionDetails_Request| { &m.language },
                    |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.language },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_GetSessionDetails_Request>(
                    "CGameNotifications_GetSessionDetails_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_GetSessionDetails_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_GetSessionDetails_Request,
        };
        unsafe {
            instance.get(CGameNotifications_GetSessionDetails_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_GetSessionDetails_Request {
    fn clear(&mut self) {
        self.sessions.clear();
        self.appid = ::std::option::Option::None;
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_GetSessionDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_GetSessionDetails_Request_RequestedSession {
    // message fields
    sessionid: ::std::option::Option<u64>,
    include_auth_user_message: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Request_RequestedSession {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Request_RequestedSession {
        <CGameNotifications_GetSessionDetails_Request_RequestedSession as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Request_RequestedSession {
    pub fn new() -> CGameNotifications_GetSessionDetails_Request_RequestedSession {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional bool include_auth_user_message = 3;


    pub fn get_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.unwrap_or(false)
    }
    pub fn clear_include_auth_user_message(&mut self) {
        self.include_auth_user_message = ::std::option::Option::None;
    }

    pub fn has_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_auth_user_message(&mut self, v: bool) {
        self.include_auth_user_message = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Request_RequestedSession {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_auth_user_message = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.include_auth_user_message {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.include_auth_user_message {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_GetSessionDetails_Request_RequestedSession {
        CGameNotifications_GetSessionDetails_Request_RequestedSession::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_GetSessionDetails_Request_RequestedSession| { &m.sessionid },
                    |m: &mut CGameNotifications_GetSessionDetails_Request_RequestedSession| { &mut m.sessionid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "include_auth_user_message",
                    |m: &CGameNotifications_GetSessionDetails_Request_RequestedSession| { &m.include_auth_user_message },
                    |m: &mut CGameNotifications_GetSessionDetails_Request_RequestedSession| { &mut m.include_auth_user_message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_GetSessionDetails_Request_RequestedSession>(
                    "CGameNotifications_GetSessionDetails_Request_RequestedSession",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Request_RequestedSession {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_GetSessionDetails_Request_RequestedSession> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_GetSessionDetails_Request_RequestedSession,
        };
        unsafe {
            instance.get(CGameNotifications_GetSessionDetails_Request_RequestedSession::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_GetSessionDetails_Request_RequestedSession {
    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.include_auth_user_message = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_GetSessionDetails_Request_RequestedSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Request_RequestedSession {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_GetSessionDetails_Response {
    // message fields
    sessions: ::protobuf::RepeatedField<CGameNotifications_Session>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Response {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Response {
        <CGameNotifications_GetSessionDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Response {
    pub fn new() -> CGameNotifications_GetSessionDetails_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_Session sessions = 1;


    pub fn get_sessions(&self) -> &[CGameNotifications_Session] {
        &self.sessions
    }
    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::protobuf::RepeatedField<CGameNotifications_Session>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::protobuf::RepeatedField<CGameNotifications_Session> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::protobuf::RepeatedField<CGameNotifications_Session> {
        ::std::mem::replace(&mut self.sessions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.sessions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sessions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sessions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_GetSessionDetails_Response {
        CGameNotifications_GetSessionDetails_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_Session>>(
                    "sessions",
                    |m: &CGameNotifications_GetSessionDetails_Response| { &m.sessions },
                    |m: &mut CGameNotifications_GetSessionDetails_Response| { &mut m.sessions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_GetSessionDetails_Response>(
                    "CGameNotifications_GetSessionDetails_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_GetSessionDetails_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_GetSessionDetails_Response,
        };
        unsafe {
            instance.get(CGameNotifications_GetSessionDetails_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_GetSessionDetails_Response {
    fn clear(&mut self) {
        self.sessions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_GetSessionDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GameNotificationSettings {
    // message fields
    appid: ::std::option::Option<u32>,
    allow_notifications: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameNotificationSettings {
    fn default() -> &'a GameNotificationSettings {
        <GameNotificationSettings as ::protobuf::Message>::default_instance()
    }
}

impl GameNotificationSettings {
    pub fn new() -> GameNotificationSettings {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool allow_notifications = 2;


    pub fn get_allow_notifications(&self) -> bool {
        self.allow_notifications.unwrap_or(false)
    }
    pub fn clear_allow_notifications(&mut self) {
        self.allow_notifications = ::std::option::Option::None;
    }

    pub fn has_allow_notifications(&self) -> bool {
        self.allow_notifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_notifications(&mut self, v: bool) {
        self.allow_notifications = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GameNotificationSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_notifications = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.allow_notifications {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.allow_notifications {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameNotificationSettings {
        GameNotificationSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &GameNotificationSettings| { &m.appid },
                    |m: &mut GameNotificationSettings| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "allow_notifications",
                    |m: &GameNotificationSettings| { &m.allow_notifications },
                    |m: &mut GameNotificationSettings| { &mut m.allow_notifications },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GameNotificationSettings>(
                    "GameNotificationSettings",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GameNotificationSettings {
        static mut instance: ::protobuf::lazy::Lazy<GameNotificationSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GameNotificationSettings,
        };
        unsafe {
            instance.get(GameNotificationSettings::new)
        }
    }
}

impl ::protobuf::Clear for GameNotificationSettings {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.allow_notifications = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameNotificationSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameNotificationSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_UpdateNotificationSettings_Request {
    // message fields
    game_notification_settings: ::protobuf::RepeatedField<GameNotificationSettings>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Request {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Request {
        <CGameNotifications_UpdateNotificationSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Request {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        ::std::default::Default::default()
    }

    // repeated .GameNotificationSettings game_notification_settings = 1;


    pub fn get_game_notification_settings(&self) -> &[GameNotificationSettings] {
        &self.game_notification_settings
    }
    pub fn clear_game_notification_settings(&mut self) {
        self.game_notification_settings.clear();
    }

    // Param is passed by value, moved
    pub fn set_game_notification_settings(&mut self, v: ::protobuf::RepeatedField<GameNotificationSettings>) {
        self.game_notification_settings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_game_notification_settings(&mut self) -> &mut ::protobuf::RepeatedField<GameNotificationSettings> {
        &mut self.game_notification_settings
    }

    // Take field
    pub fn take_game_notification_settings(&mut self) -> ::protobuf::RepeatedField<GameNotificationSettings> {
        ::std::mem::replace(&mut self.game_notification_settings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.game_notification_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.game_notification_settings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.game_notification_settings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.game_notification_settings {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        CGameNotifications_UpdateNotificationSettings_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameNotificationSettings>>(
                    "game_notification_settings",
                    |m: &CGameNotifications_UpdateNotificationSettings_Request| { &m.game_notification_settings },
                    |m: &mut CGameNotifications_UpdateNotificationSettings_Request| { &mut m.game_notification_settings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_UpdateNotificationSettings_Request>(
                    "CGameNotifications_UpdateNotificationSettings_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Request {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_UpdateNotificationSettings_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_UpdateNotificationSettings_Request,
        };
        unsafe {
            instance.get(CGameNotifications_UpdateNotificationSettings_Request::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_UpdateNotificationSettings_Request {
    fn clear(&mut self) {
        self.game_notification_settings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_UpdateNotificationSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_UpdateNotificationSettings_Response {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Response {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Response {
        <CGameNotifications_UpdateNotificationSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Response {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        CGameNotifications_UpdateNotificationSettings_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_UpdateNotificationSettings_Response>(
                    "CGameNotifications_UpdateNotificationSettings_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Response {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_UpdateNotificationSettings_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_UpdateNotificationSettings_Response,
        };
        unsafe {
            instance.get(CGameNotifications_UpdateNotificationSettings_Response::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_UpdateNotificationSettings_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_UpdateNotificationSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_OnNotificationsRequested_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnNotificationsRequested_Notification {
    fn default() -> &'a CGameNotifications_OnNotificationsRequested_Notification {
        <CGameNotifications_OnNotificationsRequested_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnNotificationsRequested_Notification {
    pub fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_OnNotificationsRequested_Notification {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        CGameNotifications_OnNotificationsRequested_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.steamid },
                    |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.appid },
                    |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.appid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_OnNotificationsRequested_Notification>(
                    "CGameNotifications_OnNotificationsRequested_Notification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_OnNotificationsRequested_Notification {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_OnNotificationsRequested_Notification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_OnNotificationsRequested_Notification,
        };
        unsafe {
            instance.get(CGameNotifications_OnNotificationsRequested_Notification::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_OnNotificationsRequested_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_OnNotificationsRequested_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_OnNotificationsRequested_Notification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CGameNotifications_OnUserStatusChanged_Notification {
    // message fields
    steamid: ::std::option::Option<u64>,
    sessionid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    status: ::protobuf::SingularPtrField<CGameNotifications_UserStatus>,
    removed: ::std::option::Option<bool>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnUserStatusChanged_Notification {
    fn default() -> &'a CGameNotifications_OnUserStatusChanged_Notification {
        <CGameNotifications_OnUserStatusChanged_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnUserStatusChanged_Notification {
    pub fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 sessionid = 2;


    pub fn get_sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }
    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_UserStatus status = 4;


    pub fn get_status(&self) -> &CGameNotifications_UserStatus {
        self.status.as_ref().unwrap_or_else(|| CGameNotifications_UserStatus::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CGameNotifications_UserStatus) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CGameNotifications_UserStatus {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> CGameNotifications_UserStatus {
        self.status.take().unwrap_or_else(|| CGameNotifications_UserStatus::new())
    }

    // optional bool removed = 5;


    pub fn get_removed(&self) -> bool {
        self.removed.unwrap_or(false)
    }
    pub fn clear_removed(&mut self) {
        self.removed = ::std::option::Option::None;
    }

    pub fn has_removed(&self) -> bool {
        self.removed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_removed(&mut self, v: bool) {
        self.removed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_OnUserStatusChanged_Notification {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sessionid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.removed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.removed {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.sessionid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.removed {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        CGameNotifications_OnUserStatusChanged_Notification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "steamid",
                    |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.steamid },
                    |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.steamid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sessionid",
                    |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.sessionid },
                    |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.sessionid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "appid",
                    |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.appid },
                    |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.appid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CGameNotifications_UserStatus>>(
                    "status",
                    |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.status },
                    |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "removed",
                    |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.removed },
                    |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.removed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CGameNotifications_OnUserStatusChanged_Notification>(
                    "CGameNotifications_OnUserStatusChanged_Notification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CGameNotifications_OnUserStatusChanged_Notification {
        static mut instance: ::protobuf::lazy::Lazy<CGameNotifications_OnUserStatusChanged_Notification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CGameNotifications_OnUserStatusChanged_Notification,
        };
        unsafe {
            instance.get(CGameNotifications_OnUserStatusChanged_Notification::new)
        }
    }
}

impl ::protobuf::Clear for CGameNotifications_OnUserStatusChanged_Notification {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.status.clear();
        self.removed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CGameNotifications_OnUserStatusChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_OnUserStatusChanged_Notification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1steammessages_gamenotifications.steamclient.proto\x1a,steammessages_u\
    nified_base.steamclient.proto\"\xec\x02\n\x1bCGameNotifications_Variable\
    \x12\xab\x01\n\x03key\x18\x01\x20\x01(\tR\x03keyB\x98\x01\x82\xb5\x18\
    \x93\x01The\x20name\x20of\x20the\x20variable\x20in\x20the\x20localized\
    \x20text\x20--\x20anywhere\x20that\x20%variablename%\x20is\x20found\x20w\
    ithin\x20the\x20text\x20it\x20will\x20be\x20substituded\x20with\x20the\
    \x20given\x20value\x12\x9e\x01\n\x05value\x18\x02\x20\x01(\tR\x05valueB\
    \x87\x01\x82\xb5\x18\x82\x01The\x20value\x20of\x20the\x20variable\x20to\
    \x20substitute\x20in\x20the\x20localized\x20text\x20in\x20place\x20of\
    \x20the\x20given\x20variable.\x20\x20Can\x20itself\x20be\x20a\x20localiz\
    ation\x20token.\"\xa5\x03\n\x20CGameNotifications_LocalizedText\x12O\n\
    \x05token\x18\x01\x20\x01(\tR\x05tokenB9\x82\xb5\x185A\x20localization\
    \x20token\x20that\x20maps\x20to\x20the\x20desired\x20string.\x12\x98\x01\
    \n\tvariables\x18\x02\x20\x03(\x0b2\x1c.CGameNotifications_VariableR\tva\
    riablesB\\\x82\xb5\x18XA\x20list\x20of\x20variables\x20values\x20to\x20s\
    ubstitute\x20in\x20any\x20variables\x20found\x20in\x20the\x20localized\
    \x20string.\x12\x94\x01\n\rrendered_text\x18\x03\x20\x01(\tR\x0crendered\
    TextBo\x82\xb5\x18kText\x20rendered\x20in\x20the\x20requested\x20languag\
    e,\x20complete\x20with\x20variable\x20substitutions,\x20if\x20a\x20langu\
    age\x20was\x20specified.\"\xb5\x04\n\x1dCGameNotifications_UserStatus\
    \x12:\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamidB\x20\x82\xb5\x18\x1c\
    The\x20specific\x20user's\x20steamid.\x12\xab\x01\n\x05state\x18\x02\x20\
    \x01(\tR\x05stateB\x94\x01\x82\xb5\x18\x8f\x01The\x20user's\x20state.\
    \x20\x20ready\x20--\x20the\x20user\x20is\x20ready\x20to\x20play.\x20\x20\
    waiting\x20--\x20The\x20game\x20is\x20waiting\x20on\x20an\x20action\x20f\
    rom\x20the\x20user.\x20completed,\x20the\x20game\x20is\x20over.\x12\x8b\
    \x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\
    \x05titleBR\x82\xb5\x18NTitle\x20of\x20the\x20session\x20to\x20display\
    \x20to\x20this\x20user\x20in\x20their\x20list\x20of\x20active\x20session\
    s.\x12\x9b\x01\n\x07message\x18\x04\x20\x01(\x0b2!.CGameNotifications_Lo\
    calizedTextR\x07messageB^\x82\xb5\x18ZSubtitle\x20of\x20the\x20session\
    \x20to\x20display\x20to\x20this\x20user\x20user\x20within\x20their\x20li\
    st\x20of\x20active\x20sessions.\"\xbb\x05\n(CGameNotifications_CreateSes\
    sion_Request\x12>\n\x05appid\x18\x01\x20\x01(\rR\x05appidB(\x82\xb5\x18$\
    The\x20appid\x20to\x20create\x20the\x20session\x20for.\x12\x88\x01\n\x07\
    context\x18\x02\x20\x01(\x04R\x07contextBn\x82\xb5\x18jGame-specified\
    \x20context\x20value\x20the\x20game\x20can\x20used\x20to\x20associate\
    \x20the\x20session\x20with\x20some\x20object\x20on\x20their\x20backend.\
    \x12\x8a\x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_Locali\
    zedTextR\x05titleBQ\x82\xb5\x18MThe\x20title\x20of\x20the\x20session\x20\
    to\x20be\x20displayed\x20within\x20each\x20user's\x20list\x20of\x20sessi\
    ons.\x12h\n\x05users\x18\x04\x20\x03(\x0b2\x1e.CGameNotifications_UserSt\
    atusR\x05usersB2\x82\xb5\x18.The\x20initial\x20state\x20of\x20all\x20use\
    rs\x20in\x20the\x20session.\x12\xcc\x01\n\x07steamid\x18\x05\x20\x01(\
    \x06R\x07steamidB\xb1\x01\x82\xb5\x18\xac\x01(Optional)\x20steamid\x20to\
    \x20make\x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20specifie\
    d,\x20the\x20user\x20must\x20be\x20in\x20the\x20session\x20and\x20all\
    \x20users\x20being\x20added\x20to\x20the\x20session\x20must\x20be\x20fri\
    ends\x20with\x20the\x20user.\"t\n)CGameNotifications_CreateSession_Respo\
    nse\x12G\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionidB)\x82\xb5\x18%The\
    \x20sessionid\x20of\x20the\x20created\x20session.\"\xab\x02\n(CGameNotif\
    ications_DeleteSession_Request\x12:\n\tsessionid\x18\x01\x20\x01(\x04R\t\
    sessionidB\x1c\x82\xb5\x18\x18The\x20sessionid\x20to\x20delete.\x12=\n\
    \x05appid\x18\x02\x20\x01(\rR\x05appidB'\x82\xb5\x18#The\x20appid\x20of\
    \x20the\x20session\x20to\x20delete.\x12\x83\x01\n\x07steamid\x18\x03\x20\
    \x01(\x06R\x07steamidBi\x82\xb5\x18e(Optional)\x20steamid\x20to\x20make\
    \x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20specified,\x20th\
    e\x20user\x20must\x20be\x20in\x20the\x20session.\"+\n)CGameNotifications\
    _DeleteSession_Response\"\xe6\x05\n(CGameNotifications_UpdateSession_Req\
    uest\x12:\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionidB\x1c\x82\xb5\x18\
    \x18The\x20sessionid\x20to\x20update.\x12=\n\x05appid\x18\x02\x20\x01(\r\
    R\x05appidB'\x82\xb5\x18#The\x20appid\x20of\x20the\x20session\x20to\x20u\
    pdate.\x12\x97\x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_\
    LocalizedTextR\x05titleB^\x82\xb5\x18Z(Optional)\x20The\x20new\x20title\
    \x20of\x20the\x20session.\x20\x20If\x20not\x20specified,\x20the\x20title\
    \x20will\x20not\x20be\x20changed.\x12\xd5\x01\n\x05users\x18\x04\x20\x03\
    (\x0b2\x1e.CGameNotifications_UserStatusR\x05usersB\x9e\x01\x82\xb5\x18\
    \x99\x01(Optional)\x20A\x20list\x20of\x20users\x20whose\x20state\x20will\
    \x20be\x20updated\x20to\x20reflect\x20the\x20given\x20state.\x20If\x20th\
    e\x20users\x20are\x20not\x20already\x20in\x20the\x20session,\x20they\x20\
    will\x20be\x20added\x20to\x20it.\x12\xcc\x01\n\x07steamid\x18\x06\x20\
    \x01(\x06R\x07steamidB\xb1\x01\x82\xb5\x18\xac\x01(Optional)\x20steamid\
    \x20to\x20make\x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20sp\
    ecified,\x20the\x20user\x20must\x20be\x20in\x20the\x20session\x20and\x20\
    all\x20users\x20being\x20added\x20to\x20the\x20session\x20must\x20be\x20\
    friends\x20with\x20the\x20user.\"+\n)CGameNotifications_UpdateSession_Re\
    sponse\"\xe3\x04\n,CGameNotifications_EnumerateSessions_Request\x12\x85\
    \x01\n\x05appid\x18\x01\x20\x01(\rR\x05appidBo\x82\xb5\x18kThe\x20sessio\
    nid\x20to\x20request\x20details\x20for.\x20Optional.\x20If\x20not\x20spe\
    cified,\x20all\x20the\x20user's\x20sessions\x20will\x20be\x20returned.\
    \x12\xa6\x01\n\x19include_all_user_messages\x18\x03\x20\x01(\x08R\x16inc\
    ludeAllUserMessagesBk\x82\xb5\x18g(Optional)\x20Boolean\x20determining\
    \x20whether\x20the\x20message\x20for\x20all\x20users\x20should\x20be\x20\
    included.\x20Defaults\x20to\x20false.\x12\xb3\x01\n\x19include_auth_user\
    _message\x18\x04\x20\x01(\x08R\x16includeAuthUserMessageBx\x82\xb5\x18t(\
    Optional)\x20Boolean\x20determining\x20whether\x20the\x20message\x20for\
    \x20the\x20authenticated\x20user\x20should\x20be\x20included.\x20Default\
    s\x20to\x20false.\x12L\n\x08language\x18\x05\x20\x01(\tR\x08languageB0\
    \x82\xb5\x18,(Optional)\x20Language\x20to\x20localize\x20the\x20text\x20\
    in.\"\x8c\x05\n\x1aCGameNotifications_Session\x12A\n\tsessionid\x18\x01\
    \x20\x01(\x04R\tsessionidB#\x82\xb5\x18\x1fThe\x20sessionid\x20for\x20th\
    is\x20session.\x124\n\x05appid\x18\x02\x20\x01(\x04R\x05appidB\x1e\x82\
    \xb5\x18\x1aThe\x20appid\x20for\x20the\x20session.\x12\x88\x01\n\x07cont\
    ext\x18\x03\x20\x01(\x04R\x07contextBn\x82\xb5\x18jGame-specified\x20con\
    text\x20value\x20the\x20game\x20can\x20used\x20to\x20associate\x20the\
    \x20session\x20with\x20some\x20object\x20on\x20their\x20backend.\x12_\n\
    \x05title\x18\x04\x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\x05ti\
    tleB&\x82\xb5\x18\"The\x20current\x20title\x20for\x20the\x20session.\x12\
    H\n\x0ctime_created\x18\x05\x20\x01(\rR\x0btimeCreatedB%\x82\xb5\x18!The\
    \x20time\x20the\x20session\x20was\x20created.\x12M\n\x0ctime_updated\x18\
    \x06\x20\x01(\rR\x0btimeUpdatedB*\x82\xb5\x18&The\x20last\x20time\x20the\
    \x20session\x20was\x20updated.\x12p\n\x0buser_status\x18\x07\x20\x03(\
    \x0b2\x1e.CGameNotifications_UserStatusR\nuserStatusB/\x82\xb5\x18+The\
    \x20status\x20of\x20all\x20the\x20users\x20in\x20the\x20session.\"\x8c\
    \x01\n-CGameNotifications_EnumerateSessions_Response\x12[\n\x08sessions\
    \x18\x01\x20\x03(\x0b2\x1b.CGameNotifications_SessionR\x08sessionsB\"\
    \x82\xb5\x18\x1eA\x20list\x20of\x20the\x20user's\x20sessions.\"\x94\x04\
    \n,CGameNotifications_GetSessionDetails_Request\x12Z\n\x08sessions\x18\
    \x01\x20\x03(\x0b2>.CGameNotifications_GetSessionDetails_Request.Request\
    edSessionR\x08sessions\x125\n\x05appid\x18\x02\x20\x01(\rR\x05appidB\x1f\
    \x82\xb5\x18\x1bThe\x20appid\x20for\x20the\x20sessions.\x12A\n\x08langua\
    ge\x18\x03\x20\x01(\tR\x08languageB%\x82\xb5\x18!Language\x20to\x20local\
    ize\x20the\x20text\x20in.\x1a\x8d\x02\n\x10RequestedSession\x12C\n\tsess\
    ionid\x18\x01\x20\x01(\x04R\tsessionidB%\x82\xb5\x18!The\x20sessionid\
    \x20to\x20get\x20details\x20for.\x12\xb3\x01\n\x19include_auth_user_mess\
    age\x18\x03\x20\x01(\x08R\x16includeAuthUserMessageBx\x82\xb5\x18t(Optio\
    nal)\x20Boolean\x20determining\x20whether\x20the\x20message\x20for\x20th\
    e\x20authenticated\x20user\x20should\x20be\x20included.\x20Defaults\x20t\
    o\x20false.\"\x89\x01\n-CGameNotifications_GetSessionDetails_Response\
    \x12X\n\x08sessions\x18\x01\x20\x03(\x0b2\x1b.CGameNotifications_Session\
    R\x08sessionsB\x1f\x82\xb5\x18\x1bThe\x20details\x20of\x20the\x20session\
    .\"\xc3\x01\n\x18GameNotificationSettings\x12>\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appidB(\x82\xb5\x18$The\x20appid\x20to\x20create\x20the\x20s\
    ession\x20for.\x12g\n\x13allow_notifications\x18\x02\x20\x01(\x08R\x12al\
    lowNotificationsB6\x82\xb5\x182Whether\x20the\x20user\x20allows\x20notif\
    ication\x20for\x20this\x20app.\"\x90\x01\n5CGameNotifications_UpdateNoti\
    ficationSettings_Request\x12W\n\x1agame_notification_settings\x18\x01\
    \x20\x03(\x0b2\x19.GameNotificationSettingsR\x18gameNotificationSettings\
    \"8\n6CGameNotifications_UpdateNotificationSettings_Response\"\xd6\x01\n\
    8CGameNotifications_OnNotificationsRequested_Notification\x12W\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamidB=\x82\xb5\x189steamid\x20of\x20the\
    \x20user\x20who\x20notifications\x20were\x20requested\x20for.\x12A\n\x05\
    appid\x18\x02\x20\x01(\rR\x05appidB+\x82\xb5\x18'The\x20appid\x20that\
    \x20requested\x20notifications.\"\xea\x03\n3CGameNotifications_OnUserSta\
    tusChanged_Notification\x12G\n\x07steamid\x18\x01\x20\x01(\x06R\x07steam\
    idB-\x82\xb5\x18)steamid\x20of\x20the\x20user\x20whose\x20status\x20chan\
    ged.\x12c\n\tsessionid\x18\x02\x20\x01(\x04R\tsessionidBE\x82\xb5\x18ATh\
    e\x20sessionid\x20of\x20the\x20session\x20where\x20the\x20user's\x20stat\
    us\x20was\x20changed.\x12S\n\x05appid\x18\x03\x20\x01(\rR\x05appidB=\x82\
    \xb5\x189The\x20appid\x20of\x20the\x20session\x20where\x20the\x20user's\
    \x20status\x20changed.\x12^\n\x06status\x18\x04\x20\x01(\x0b2\x1e.CGameN\
    otifications_UserStatusR\x06statusB&\x82\xb5\x18\"(Optional)\x20New\x20s\
    tatus\x20of\x20the\x20user.\x12P\n\x07removed\x18\x05\x20\x01(\x08R\x07r\
    emovedB6\x82\xb5\x182(Optional)\x20User\x20has\x20been\x20removed\x20fro\
    m\x20the\x20session.2\xa6\x08\n\x11GameNotifications\x12\x8d\x01\n\x11Us\
    erCreateSession\x12).CGameNotifications_CreateSession_Request\x1a*.CGame\
    Notifications_CreateSession_Response\"!\x82\xb5\x18\x1dCreates\x20an\x20\
    async\x20game\x20session\x12\x8d\x01\n\x11UserDeleteSession\x12).CGameNo\
    tifications_DeleteSession_Request\x1a*.CGameNotifications_DeleteSession_\
    Response\"!\x82\xb5\x18\x1dDeletes\x20an\x20async\x20game\x20session\x12\
    \x8d\x01\n\x11UserUpdateSession\x12).CGameNotifications_UpdateSession_Re\
    quest\x1a*.CGameNotifications_UpdateSession_Response\"!\x82\xb5\x18\x1dU\
    pdates\x20an\x20async\x20game\x20session\x12\x94\x01\n\x11EnumerateSessi\
    ons\x12-.CGameNotifications_EnumerateSessions_Request\x1a..CGameNotifica\
    tions_EnumerateSessions_Response\"\x20\x82\xb5\x18\x1cEnumerates\x20a\
    \x20user's\x20sessions\x12\x9e\x01\n\x11GetSessionDetails\x12-.CGameNoti\
    fications_GetSessionDetails_Request\x1a..CGameNotifications_GetSessionDe\
    tails_Response\"*\x82\xb5\x18&Get\x20the\x20details\x20for\x20a\x20speci\
    fic\x20session\x12\xd6\x01\n\x1aUpdateNotificationSettings\x126.CGameNot\
    ifications_UpdateNotificationSettings_Request\x1a7.CGameNotifications_Up\
    dateNotificationSettings_Response\"G\x82\xb5\x18CUpdates\x20whether\x20a\
    \x20user\x20allows\x20game\x20notifications\x20for\x20a\x20specific\x20a\
    pp\x1aP\x82\xb5\x18LA\x20service\x20for\x20functions\x20related\x20to\
    \x20the\x20asyncronous\x20game\x20notification\x20server.2\xdf\x02\n\x17\
    GameNotificationsClient\x12\x95\x01\n\x18OnNotificationsRequested\x129.C\
    GameNotifications_OnNotificationsRequested_Notification\x1a\x0b.NoRespon\
    se\"1\x82\xb5\x18-Requests\x20that\x20the\x20user\x20opt\x20into\x20noti\
    fications\x12\x8d\x01\n\x13OnUserStatusChanged\x124.CGameNotifications_O\
    nUserStatusChanged_Notification\x1a\x0b.NoResponse\"3\x82\xb5\x18/Notifi\
    cation\x20that\x20the\x20user's\x20status\x20has\x20changed\x1a\x1c\x82\
    \xb5\x18\x14Client\x20notifications\xc0\xb5\x18\x02B\x03\x80\x01\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
